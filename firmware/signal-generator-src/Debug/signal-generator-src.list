
signal-generator-src.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  08006168  08006168  00016168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066a8  080066a8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080066a8  080066a8  000166a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066b0  080066b0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080066b8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f3c  20000088  08006740  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fc4  08006740  00020fc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c0d  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f28  00000000  00000000  00029cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d19  00000000  00000000  0002cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3b5  00000000  00000000  00042909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a3e  00000000  00000000  0004ccbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d26fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e0  00000000  00000000  000d2750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800614c 	.word	0x0800614c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	0800614c 	.word	0x0800614c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b90:	f000 b96e 	b.w	8000e70 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8083 	bne.w	8000cc2 <__udivmoddi4+0x116>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4617      	mov	r7, r2
 8000bc0:	d947      	bls.n	8000c52 <__udivmoddi4+0xa6>
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	b142      	cbz	r2, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	f1c2 0020 	rsb	r0, r2, #32
 8000bcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	4097      	lsls	r7, r2
 8000bd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	0c23      	lsrs	r3, r4, #16
 8000be0:	fbbc f6f8 	udiv	r6, ip, r8
 8000be4:	fa1f fe87 	uxth.w	lr, r7
 8000be8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf0:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d909      	bls.n	8000c0c <__udivmoddi4+0x60>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bfe:	f080 8119 	bcs.w	8000e34 <__udivmoddi4+0x288>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 8116 	bls.w	8000e34 <__udivmoddi4+0x288>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	443b      	add	r3, r7
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x8c>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c2a:	f080 8105 	bcs.w	8000e38 <__udivmoddi4+0x28c>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f240 8102 	bls.w	8000e38 <__udivmoddi4+0x28c>
 8000c34:	3802      	subs	r0, #2
 8000c36:	443c      	add	r4, r7
 8000c38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa0>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	b902      	cbnz	r2, 8000c56 <__udivmoddi4+0xaa>
 8000c54:	deff      	udf	#255	; 0xff
 8000c56:	fab2 f282 	clz	r2, r2
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	d150      	bne.n	8000d00 <__udivmoddi4+0x154>
 8000c5e:	1bcb      	subs	r3, r1, r7
 8000c60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c64:	fa1f f887 	uxth.w	r8, r7
 8000c68:	2601      	movs	r6, #1
 8000c6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c6e:	0c21      	lsrs	r1, r4, #16
 8000c70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c78:	fb08 f30c 	mul.w	r3, r8, ip
 8000c7c:	428b      	cmp	r3, r1
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0xe4>
 8000c80:	1879      	adds	r1, r7, r1
 8000c82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0xe2>
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	f200 80e9 	bhi.w	8000e60 <__udivmoddi4+0x2b4>
 8000c8e:	4684      	mov	ip, r0
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	b2a3      	uxth	r3, r4
 8000c94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	fb08 f800 	mul.w	r8, r8, r0
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0x10c>
 8000ca8:	193c      	adds	r4, r7, r4
 8000caa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x10a>
 8000cb0:	45a0      	cmp	r8, r4
 8000cb2:	f200 80d9 	bhi.w	8000e68 <__udivmoddi4+0x2bc>
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	eba4 0408 	sub.w	r4, r4, r8
 8000cbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc0:	e7bf      	b.n	8000c42 <__udivmoddi4+0x96>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x12e>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80b1 	beq.w	8000e2e <__udivmoddi4+0x282>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x1cc>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0x140>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80b8 	bhi.w	8000e5c <__udivmoddi4+0x2b0>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	468c      	mov	ip, r1
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0a8      	beq.n	8000c4c <__udivmoddi4+0xa0>
 8000cfa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cfe:	e7a5      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f603 	lsr.w	r6, r0, r3
 8000d08:	4097      	lsls	r7, r2
 8000d0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d12:	40d9      	lsrs	r1, r3
 8000d14:	4330      	orrs	r0, r6
 8000d16:	0c03      	lsrs	r3, r0, #16
 8000d18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d1c:	fa1f f887 	uxth.w	r8, r7
 8000d20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d28:	fb06 f108 	mul.w	r1, r6, r8
 8000d2c:	4299      	cmp	r1, r3
 8000d2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x19c>
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d3a:	f080 808d 	bcs.w	8000e58 <__udivmoddi4+0x2ac>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 808a 	bls.w	8000e58 <__udivmoddi4+0x2ac>
 8000d44:	3e02      	subs	r6, #2
 8000d46:	443b      	add	r3, r7
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b281      	uxth	r1, r0
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d58:	fb00 f308 	mul.w	r3, r0, r8
 8000d5c:	428b      	cmp	r3, r1
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x1c4>
 8000d60:	1879      	adds	r1, r7, r1
 8000d62:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d66:	d273      	bcs.n	8000e50 <__udivmoddi4+0x2a4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d971      	bls.n	8000e50 <__udivmoddi4+0x2a4>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	4439      	add	r1, r7
 8000d70:	1acb      	subs	r3, r1, r3
 8000d72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d76:	e778      	b.n	8000c6a <__udivmoddi4+0xbe>
 8000d78:	f1c6 0c20 	rsb	ip, r6, #32
 8000d7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d84:	431c      	orrs	r4, r3
 8000d86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d96:	431f      	orrs	r7, r3
 8000d98:	0c3b      	lsrs	r3, r7, #16
 8000d9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d9e:	fa1f f884 	uxth.w	r8, r4
 8000da2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000da6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000daa:	fb09 fa08 	mul.w	sl, r9, r8
 8000dae:	458a      	cmp	sl, r1
 8000db0:	fa02 f206 	lsl.w	r2, r2, r6
 8000db4:	fa00 f306 	lsl.w	r3, r0, r6
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x220>
 8000dba:	1861      	adds	r1, r4, r1
 8000dbc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dc0:	d248      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc2:	458a      	cmp	sl, r1
 8000dc4:	d946      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000dc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dca:	4421      	add	r1, r4
 8000dcc:	eba1 010a 	sub.w	r1, r1, sl
 8000dd0:	b2bf      	uxth	r7, r7
 8000dd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dde:	fb00 f808 	mul.w	r8, r0, r8
 8000de2:	45b8      	cmp	r8, r7
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x24a>
 8000de6:	19e7      	adds	r7, r4, r7
 8000de8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dec:	d22e      	bcs.n	8000e4c <__udivmoddi4+0x2a0>
 8000dee:	45b8      	cmp	r8, r7
 8000df0:	d92c      	bls.n	8000e4c <__udivmoddi4+0x2a0>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4427      	add	r7, r4
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	eba7 0708 	sub.w	r7, r7, r8
 8000dfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000e02:	454f      	cmp	r7, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	4649      	mov	r1, r9
 8000e08:	d31a      	bcc.n	8000e40 <__udivmoddi4+0x294>
 8000e0a:	d017      	beq.n	8000e3c <__udivmoddi4+0x290>
 8000e0c:	b15d      	cbz	r5, 8000e26 <__udivmoddi4+0x27a>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb67 0701 	sbc.w	r7, r7, r1
 8000e16:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1a:	40f2      	lsrs	r2, r6
 8000e1c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e20:	40f7      	lsrs	r7, r6
 8000e22:	e9c5 2700 	strd	r2, r7, [r5]
 8000e26:	2600      	movs	r6, #0
 8000e28:	4631      	mov	r1, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	462e      	mov	r6, r5
 8000e30:	4628      	mov	r0, r5
 8000e32:	e70b      	b.n	8000c4c <__udivmoddi4+0xa0>
 8000e34:	4606      	mov	r6, r0
 8000e36:	e6e9      	b.n	8000c0c <__udivmoddi4+0x60>
 8000e38:	4618      	mov	r0, r3
 8000e3a:	e6fd      	b.n	8000c38 <__udivmoddi4+0x8c>
 8000e3c:	4543      	cmp	r3, r8
 8000e3e:	d2e5      	bcs.n	8000e0c <__udivmoddi4+0x260>
 8000e40:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e44:	eb69 0104 	sbc.w	r1, r9, r4
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7df      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e7d2      	b.n	8000df6 <__udivmoddi4+0x24a>
 8000e50:	4660      	mov	r0, ip
 8000e52:	e78d      	b.n	8000d70 <__udivmoddi4+0x1c4>
 8000e54:	4681      	mov	r9, r0
 8000e56:	e7b9      	b.n	8000dcc <__udivmoddi4+0x220>
 8000e58:	4666      	mov	r6, ip
 8000e5a:	e775      	b.n	8000d48 <__udivmoddi4+0x19c>
 8000e5c:	4630      	mov	r0, r6
 8000e5e:	e74a      	b.n	8000cf6 <__udivmoddi4+0x14a>
 8000e60:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e64:	4439      	add	r1, r7
 8000e66:	e713      	b.n	8000c90 <__udivmoddi4+0xe4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	443c      	add	r4, r7
 8000e6c:	e724      	b.n	8000cb8 <__udivmoddi4+0x10c>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <update_ui>:
#define UI_SELECTED_HARM 3

ui_state_t ui_global_state;

void update_ui()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b094      	sub	sp, #80	; 0x50
 8000e78:	af00      	add	r7, sp, #0
	char freq_txt[20];
	char amp_txt[20];
	char wave_txt[20];
	char harm_txt[20];

	LCD_clrScr();
 8000e7a:	f001 f8e9 	bl	8002050 <LCD_clrScr>

	//freq text
	if(frequency < 1000)
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <update_ui+0x104>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e86:	da08      	bge.n	8000e9a <update_ui+0x26>
	{
		sprintf(freq_txt, " Freq: %dHz", frequency);
 8000e88:	4b3b      	ldr	r3, [pc, #236]	; (8000f78 <update_ui+0x104>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e90:	493a      	ldr	r1, [pc, #232]	; (8000f7c <update_ui+0x108>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f003 fcf4 	bl	8004880 <siprintf>
 8000e98:	e00d      	b.n	8000eb6 <update_ui+0x42>
	}
	else
	{
		sprintf(freq_txt, " Freq: %dkHz", frequency/1000);
 8000e9a:	4b37      	ldr	r3, [pc, #220]	; (8000f78 <update_ui+0x104>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <update_ui+0x10c>)
 8000ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea4:	1192      	asrs	r2, r2, #6
 8000ea6:	17db      	asrs	r3, r3, #31
 8000ea8:	1ad2      	subs	r2, r2, r3
 8000eaa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eae:	4935      	ldr	r1, [pc, #212]	; (8000f84 <update_ui+0x110>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 fce5 	bl	8004880 <siprintf>
	}

	LCD_print(freq_txt, 0, 0);
 8000eb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 f8a6 	bl	8002010 <LCD_print>

	//Amp text
	sprintf(amp_txt, " Amp: %d%%", amplitude);
 8000ec4:	4b30      	ldr	r3, [pc, #192]	; (8000f88 <update_ui+0x114>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ecc:	492f      	ldr	r1, [pc, #188]	; (8000f8c <update_ui+0x118>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fcd6 	bl	8004880 <siprintf>
	LCD_print(amp_txt, 0, 1);
 8000ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f001 f897 	bl	8002010 <LCD_print>

	//Wave text
	switch(waveform)
 8000ee2:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <update_ui+0x11c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b03      	cmp	r3, #3
 8000ee8:	d826      	bhi.n	8000f38 <update_ui+0xc4>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <update_ui+0x7c>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f01 	.word	0x08000f01
 8000ef4:	08000f0f 	.word	0x08000f0f
 8000ef8:	08000f1d 	.word	0x08000f1d
 8000efc:	08000f2b 	.word	0x08000f2b
	{
	case WAVEFORM_SIN:
		sprintf(wave_txt, " Wave: SIN");
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4923      	ldr	r1, [pc, #140]	; (8000f94 <update_ui+0x120>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fcba 	bl	8004880 <siprintf>
		break;
 8000f0c:	e014      	b.n	8000f38 <update_ui+0xc4>
	case WAVEFORM_SQUARE:
		sprintf(wave_txt, " Wave: SQR");
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4921      	ldr	r1, [pc, #132]	; (8000f98 <update_ui+0x124>)
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 fcb3 	bl	8004880 <siprintf>
		break;
 8000f1a:	e00d      	b.n	8000f38 <update_ui+0xc4>
	case WAVEFORM_TRIANGLE:
		sprintf(wave_txt, " Wave: TRI");
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	491e      	ldr	r1, [pc, #120]	; (8000f9c <update_ui+0x128>)
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fcac 	bl	8004880 <siprintf>
		break;
 8000f28:	e006      	b.n	8000f38 <update_ui+0xc4>
	case WAVEFORM_SAW:
		sprintf(wave_txt, " Wave: SAW");
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	491c      	ldr	r1, [pc, #112]	; (8000fa0 <update_ui+0x12c>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 fca5 	bl	8004880 <siprintf>
		break;
 8000f36:	bf00      	nop
	}

	LCD_print(wave_txt, 0, 2);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f001 f865 	bl	8002010 <LCD_print>

	//Harm text
	sprintf(harm_txt, " Harm: %d", harmonics);
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <update_ui+0x130>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4916      	ldr	r1, [pc, #88]	; (8000fa8 <update_ui+0x134>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 fc96 	bl	8004880 <siprintf>
	LCD_print(harm_txt, 0, 3);
 8000f54:	463b      	mov	r3, r7
 8000f56:	2203      	movs	r2, #3
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 f858 	bl	8002010 <LCD_print>

	//Selection
	LCD_print("*", 0, ui_global_state.selected);
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <update_ui+0x138>)
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <update_ui+0x13c>)
 8000f6c:	f001 f850 	bl	8002010 <LCD_print>
}
 8000f70:	bf00      	nop
 8000f72:	3750      	adds	r7, #80	; 0x50
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	08006168 	.word	0x08006168
 8000f80:	10624dd3 	.word	0x10624dd3
 8000f84:	08006174 	.word	0x08006174
 8000f88:	20000004 	.word	0x20000004
 8000f8c:	08006184 	.word	0x08006184
 8000f90:	200000a4 	.word	0x200000a4
 8000f94:	08006190 	.word	0x08006190
 8000f98:	0800619c 	.word	0x0800619c
 8000f9c:	080061a8 	.word	0x080061a8
 8000fa0:	080061b4 	.word	0x080061b4
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	080061c0 	.word	0x080061c0
 8000fac:	200008c8 	.word	0x200008c8
 8000fb0:	080061cc 	.word	0x080061cc

08000fb4 <freq_selected_init>:


void freq_selected_init()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	update_ui();
 8000fb8:	f7ff ff5c 	bl	8000e74 <update_ui>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <freq_selected_cw>:

void freq_selected_cw()
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	if(frequency < 20000)
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <freq_selected_cw+0x84>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	dc32      	bgt.n	8001036 <freq_selected_cw+0x76>
	{
		if(frequency < 1000)
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <freq_selected_cw+0x84>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fd8:	da14      	bge.n	8001004 <freq_selected_cw+0x44>
		{
			frequency = (frequency/10)*10;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <freq_selected_cw+0x84>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1a      	ldr	r2, [pc, #104]	; (8001048 <freq_selected_cw+0x88>)
 8000fe0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe4:	1092      	asrs	r2, r2, #2
 8000fe6:	17db      	asrs	r3, r3, #31
 8000fe8:	1ad2      	subs	r2, r2, r3
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <freq_selected_cw+0x84>)
 8000ff6:	601a      	str	r2, [r3, #0]
			frequency += 10;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <freq_selected_cw+0x84>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	330a      	adds	r3, #10
 8000ffe:	4a11      	ldr	r2, [pc, #68]	; (8001044 <freq_selected_cw+0x84>)
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e018      	b.n	8001036 <freq_selected_cw+0x76>
		}
		else if(frequency >= 1000)
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <freq_selected_cw+0x84>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800100c:	db13      	blt.n	8001036 <freq_selected_cw+0x76>
		{
			frequency = (frequency/1000)*1000;
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <freq_selected_cw+0x84>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <freq_selected_cw+0x8c>)
 8001014:	fb82 1203 	smull	r1, r2, r2, r3
 8001018:	1192      	asrs	r2, r2, #6
 800101a:	17db      	asrs	r3, r3, #31
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <freq_selected_cw+0x84>)
 8001028:	6013      	str	r3, [r2, #0]
			frequency += 1000;
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <freq_selected_cw+0x84>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001032:	4a04      	ldr	r2, [pc, #16]	; (8001044 <freq_selected_cw+0x84>)
 8001034:	6013      	str	r3, [r2, #0]
		}
	}

	update_ui();
 8001036:	f7ff ff1d 	bl	8000e74 <update_ui>
	generate_wave_cycle();
 800103a:	f000 fd6d 	bl	8001b18 <generate_wave_cycle>
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000000 	.word	0x20000000
 8001048:	66666667 	.word	0x66666667
 800104c:	10624dd3 	.word	0x10624dd3

08001050 <freq_selected_ccw>:

void freq_selected_ccw()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	if(frequency > 20)
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <freq_selected_ccw+0x80>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b14      	cmp	r3, #20
 800105a:	dd32      	ble.n	80010c2 <freq_selected_ccw+0x72>
	{
		if(frequency <= 1000)
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <freq_selected_ccw+0x80>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001064:	dc14      	bgt.n	8001090 <freq_selected_ccw+0x40>
		{
			frequency = (frequency/10)*10;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <freq_selected_ccw+0x80>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <freq_selected_ccw+0x84>)
 800106c:	fb82 1203 	smull	r1, r2, r2, r3
 8001070:	1092      	asrs	r2, r2, #2
 8001072:	17db      	asrs	r3, r3, #31
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	461a      	mov	r2, r3
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <freq_selected_ccw+0x80>)
 8001082:	601a      	str	r2, [r3, #0]
			frequency -= 10;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <freq_selected_ccw+0x80>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3b0a      	subs	r3, #10
 800108a:	4a11      	ldr	r2, [pc, #68]	; (80010d0 <freq_selected_ccw+0x80>)
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	e018      	b.n	80010c2 <freq_selected_ccw+0x72>
		}
		else if(frequency > 1000)
 8001090:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <freq_selected_ccw+0x80>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001098:	dd13      	ble.n	80010c2 <freq_selected_ccw+0x72>
		{
			frequency = (frequency/1000)*1000;
 800109a:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <freq_selected_ccw+0x80>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <freq_selected_ccw+0x88>)
 80010a0:	fb82 1203 	smull	r1, r2, r2, r3
 80010a4:	1192      	asrs	r2, r2, #6
 80010a6:	17db      	asrs	r3, r3, #31
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ae:	fb02 f303 	mul.w	r3, r2, r3
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <freq_selected_ccw+0x80>)
 80010b4:	6013      	str	r3, [r2, #0]
			frequency -= 1000;
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <freq_selected_ccw+0x80>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <freq_selected_ccw+0x80>)
 80010c0:	6013      	str	r3, [r2, #0]
		}
	}

	update_ui();
 80010c2:	f7ff fed7 	bl	8000e74 <update_ui>
	generate_wave_cycle();
 80010c6:	f000 fd27 	bl	8001b18 <generate_wave_cycle>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000000 	.word	0x20000000
 80010d4:	66666667 	.word	0x66666667
 80010d8:	10624dd3 	.word	0x10624dd3

080010dc <freq_selected_push>:

void freq_selected_push()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	select_amp();
 80010e0:	f000 f862 	bl	80011a8 <select_amp>
	ui_global_state.init();
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <freq_selected_push+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4798      	blx	r3
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200008c8 	.word	0x200008c8

080010f4 <select_freq>:

void select_freq()
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	ui_global_state.init = freq_selected_init;
 80010f8:	4b09      	ldr	r3, [pc, #36]	; (8001120 <select_freq+0x2c>)
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <select_freq+0x30>)
 80010fc:	601a      	str	r2, [r3, #0]
	ui_global_state.cw_rotation = freq_selected_cw;
 80010fe:	4b08      	ldr	r3, [pc, #32]	; (8001120 <select_freq+0x2c>)
 8001100:	4a09      	ldr	r2, [pc, #36]	; (8001128 <select_freq+0x34>)
 8001102:	605a      	str	r2, [r3, #4]
	ui_global_state.ccw_rotation = freq_selected_ccw;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <select_freq+0x2c>)
 8001106:	4a09      	ldr	r2, [pc, #36]	; (800112c <select_freq+0x38>)
 8001108:	609a      	str	r2, [r3, #8]
	ui_global_state.push = freq_selected_push;
 800110a:	4b05      	ldr	r3, [pc, #20]	; (8001120 <select_freq+0x2c>)
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <select_freq+0x3c>)
 800110e:	60da      	str	r2, [r3, #12]
	ui_global_state.selected = UI_SELECTED_FREQ;
 8001110:	4b03      	ldr	r3, [pc, #12]	; (8001120 <select_freq+0x2c>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	200008c8 	.word	0x200008c8
 8001124:	08000fb5 	.word	0x08000fb5
 8001128:	08000fc1 	.word	0x08000fc1
 800112c:	08001051 	.word	0x08001051
 8001130:	080010dd 	.word	0x080010dd

08001134 <amp_selected_init>:

void amp_selected_init()
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	update_ui();
 8001138:	f7ff fe9c 	bl	8000e74 <update_ui>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <amp_selected_cw>:

void amp_selected_cw()
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	if(amplitude < 100) amplitude += 1;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <amp_selected_cw+0x24>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b63      	cmp	r3, #99	; 0x63
 800114a:	dc04      	bgt.n	8001156 <amp_selected_cw+0x16>
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <amp_selected_cw+0x24>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <amp_selected_cw+0x24>)
 8001154:	6013      	str	r3, [r2, #0]
	update_ui();
 8001156:	f7ff fe8d 	bl	8000e74 <update_ui>
	generate_wave_cycle();
 800115a:	f000 fcdd 	bl	8001b18 <generate_wave_cycle>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000004 	.word	0x20000004

08001168 <amp_selected_ccw>:

void amp_selected_ccw()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	if(amplitude > 0) amplitude -= 1;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <amp_selected_ccw+0x24>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	dd04      	ble.n	800117e <amp_selected_ccw+0x16>
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <amp_selected_ccw+0x24>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3b01      	subs	r3, #1
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <amp_selected_ccw+0x24>)
 800117c:	6013      	str	r3, [r2, #0]
	update_ui();
 800117e:	f7ff fe79 	bl	8000e74 <update_ui>
	generate_wave_cycle();
 8001182:	f000 fcc9 	bl	8001b18 <generate_wave_cycle>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000004 	.word	0x20000004

08001190 <amp_selected_push>:

void amp_selected_push()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	select_wave();
 8001194:	f000 f88e 	bl	80012b4 <select_wave>
	ui_global_state.init();
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <amp_selected_push+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4798      	blx	r3
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200008c8 	.word	0x200008c8

080011a8 <select_amp>:

void select_amp()
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
	ui_global_state.init = amp_selected_init;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <select_amp+0x2c>)
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <select_amp+0x30>)
 80011b0:	601a      	str	r2, [r3, #0]
	ui_global_state.cw_rotation = amp_selected_cw;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <select_amp+0x2c>)
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <select_amp+0x34>)
 80011b6:	605a      	str	r2, [r3, #4]
	ui_global_state.ccw_rotation = amp_selected_ccw;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <select_amp+0x2c>)
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <select_amp+0x38>)
 80011bc:	609a      	str	r2, [r3, #8]
	ui_global_state.push = amp_selected_push;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <select_amp+0x2c>)
 80011c0:	4a08      	ldr	r2, [pc, #32]	; (80011e4 <select_amp+0x3c>)
 80011c2:	60da      	str	r2, [r3, #12]
	ui_global_state.selected = UI_SELECTED_AMP;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <select_amp+0x2c>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	611a      	str	r2, [r3, #16]
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	200008c8 	.word	0x200008c8
 80011d8:	08001135 	.word	0x08001135
 80011dc:	08001141 	.word	0x08001141
 80011e0:	08001169 	.word	0x08001169
 80011e4:	08001191 	.word	0x08001191

080011e8 <wave_selected_init>:

void wave_selected_init()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	update_ui();
 80011ec:	f7ff fe42 	bl	8000e74 <update_ui>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <wave_selected_cw>:

void wave_selected_cw()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	switch(waveform)
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <wave_selected_cw+0x50>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d81b      	bhi.n	8001238 <wave_selected_cw+0x44>
 8001200:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <wave_selected_cw+0x14>)
 8001202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001206:	bf00      	nop
 8001208:	08001219 	.word	0x08001219
 800120c:	08001221 	.word	0x08001221
 8001210:	08001229 	.word	0x08001229
 8001214:	08001231 	.word	0x08001231
	{
	case WAVEFORM_SIN:
		waveform = WAVEFORM_SQUARE;
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <wave_selected_cw+0x50>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
		break;
 800121e:	e00b      	b.n	8001238 <wave_selected_cw+0x44>
	case WAVEFORM_SQUARE:
		waveform = WAVEFORM_TRIANGLE;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <wave_selected_cw+0x50>)
 8001222:	2202      	movs	r2, #2
 8001224:	601a      	str	r2, [r3, #0]
		break;
 8001226:	e007      	b.n	8001238 <wave_selected_cw+0x44>
	case WAVEFORM_TRIANGLE:
		waveform = WAVEFORM_SAW;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <wave_selected_cw+0x50>)
 800122a:	2203      	movs	r2, #3
 800122c:	601a      	str	r2, [r3, #0]
		break;
 800122e:	e003      	b.n	8001238 <wave_selected_cw+0x44>
	case WAVEFORM_SAW:
		waveform = WAVEFORM_SIN;
 8001230:	4b04      	ldr	r3, [pc, #16]	; (8001244 <wave_selected_cw+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
		break;
 8001236:	bf00      	nop
	}
	update_ui();
 8001238:	f7ff fe1c 	bl	8000e74 <update_ui>
	generate_wave_cycle();
 800123c:	f000 fc6c 	bl	8001b18 <generate_wave_cycle>
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200000a4 	.word	0x200000a4

08001248 <wave_selected_ccw>:

void wave_selected_ccw()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	switch(waveform)
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <wave_selected_ccw+0x50>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2b03      	cmp	r3, #3
 8001252:	d81b      	bhi.n	800128c <wave_selected_ccw+0x44>
 8001254:	a201      	add	r2, pc, #4	; (adr r2, 800125c <wave_selected_ccw+0x14>)
 8001256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125a:	bf00      	nop
 800125c:	0800126d 	.word	0x0800126d
 8001260:	08001275 	.word	0x08001275
 8001264:	0800127d 	.word	0x0800127d
 8001268:	08001285 	.word	0x08001285
	{
		case WAVEFORM_SIN:
			waveform = WAVEFORM_SAW;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <wave_selected_ccw+0x50>)
 800126e:	2203      	movs	r2, #3
 8001270:	601a      	str	r2, [r3, #0]
			break;
 8001272:	e00b      	b.n	800128c <wave_selected_ccw+0x44>
		case WAVEFORM_SQUARE:
			waveform = WAVEFORM_SIN;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <wave_selected_ccw+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
			break;
 800127a:	e007      	b.n	800128c <wave_selected_ccw+0x44>
		case WAVEFORM_TRIANGLE:
			waveform = WAVEFORM_SQUARE;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <wave_selected_ccw+0x50>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
			break;
 8001282:	e003      	b.n	800128c <wave_selected_ccw+0x44>
		case WAVEFORM_SAW:
			waveform = WAVEFORM_TRIANGLE;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <wave_selected_ccw+0x50>)
 8001286:	2202      	movs	r2, #2
 8001288:	601a      	str	r2, [r3, #0]
			break;
 800128a:	bf00      	nop
	}
	update_ui();
 800128c:	f7ff fdf2 	bl	8000e74 <update_ui>
	generate_wave_cycle();
 8001290:	f000 fc42 	bl	8001b18 <generate_wave_cycle>
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000a4 	.word	0x200000a4

0800129c <wave_selected_push>:

void wave_selected_push()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
	select_harm();
 80012a0:	f000 f862 	bl	8001368 <select_harm>
	ui_global_state.init();
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <wave_selected_push+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4798      	blx	r3
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	200008c8 	.word	0x200008c8

080012b4 <select_wave>:

void select_wave()
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
	ui_global_state.init = wave_selected_init;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <select_wave+0x2c>)
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <select_wave+0x30>)
 80012bc:	601a      	str	r2, [r3, #0]
	ui_global_state.cw_rotation = wave_selected_cw;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <select_wave+0x2c>)
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <select_wave+0x34>)
 80012c2:	605a      	str	r2, [r3, #4]
	ui_global_state.ccw_rotation = wave_selected_ccw;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <select_wave+0x2c>)
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <select_wave+0x38>)
 80012c8:	609a      	str	r2, [r3, #8]
	ui_global_state.push = wave_selected_push;
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <select_wave+0x2c>)
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <select_wave+0x3c>)
 80012ce:	60da      	str	r2, [r3, #12]
	ui_global_state.selected = UI_SELECTED_WAVE;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <select_wave+0x2c>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	611a      	str	r2, [r3, #16]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	200008c8 	.word	0x200008c8
 80012e4:	080011e9 	.word	0x080011e9
 80012e8:	080011f5 	.word	0x080011f5
 80012ec:	08001249 	.word	0x08001249
 80012f0:	0800129d 	.word	0x0800129d

080012f4 <harm_selected_init>:

void harm_selected_init()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	update_ui();
 80012f8:	f7ff fdbc 	bl	8000e74 <update_ui>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <harm_selected_cw>:

void harm_selected_cw()
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	if(harmonics < 100) harmonics += 1;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <harm_selected_cw+0x24>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b63      	cmp	r3, #99	; 0x63
 800130a:	dc04      	bgt.n	8001316 <harm_selected_cw+0x16>
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <harm_selected_cw+0x24>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <harm_selected_cw+0x24>)
 8001314:	6013      	str	r3, [r2, #0]
	update_ui();
 8001316:	f7ff fdad 	bl	8000e74 <update_ui>
	generate_wave_cycle();
 800131a:	f000 fbfd 	bl	8001b18 <generate_wave_cycle>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008

08001328 <harm_selected_ccw>:

void harm_selected_ccw()
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	if(harmonics > 1) harmonics -= 1;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <harm_selected_ccw+0x24>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b01      	cmp	r3, #1
 8001332:	dd04      	ble.n	800133e <harm_selected_ccw+0x16>
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <harm_selected_ccw+0x24>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3b01      	subs	r3, #1
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <harm_selected_ccw+0x24>)
 800133c:	6013      	str	r3, [r2, #0]
	update_ui();
 800133e:	f7ff fd99 	bl	8000e74 <update_ui>
	generate_wave_cycle();
 8001342:	f000 fbe9 	bl	8001b18 <generate_wave_cycle>
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008

08001350 <harm_selected_push>:

void harm_selected_push()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	select_freq();
 8001354:	f7ff fece 	bl	80010f4 <select_freq>
	ui_global_state.init();
 8001358:	4b02      	ldr	r3, [pc, #8]	; (8001364 <harm_selected_push+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4798      	blx	r3
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200008c8 	.word	0x200008c8

08001368 <select_harm>:

void select_harm()
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	ui_global_state.init = harm_selected_init;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <select_harm+0x2c>)
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <select_harm+0x30>)
 8001370:	601a      	str	r2, [r3, #0]
	ui_global_state.cw_rotation = harm_selected_cw;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <select_harm+0x2c>)
 8001374:	4a09      	ldr	r2, [pc, #36]	; (800139c <select_harm+0x34>)
 8001376:	605a      	str	r2, [r3, #4]
	ui_global_state.ccw_rotation = harm_selected_ccw;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <select_harm+0x2c>)
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <select_harm+0x38>)
 800137c:	609a      	str	r2, [r3, #8]
	ui_global_state.push = harm_selected_push;
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <select_harm+0x2c>)
 8001380:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <select_harm+0x3c>)
 8001382:	60da      	str	r2, [r3, #12]
	ui_global_state.selected = UI_SELECTED_HARM;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <select_harm+0x2c>)
 8001386:	2203      	movs	r2, #3
 8001388:	611a      	str	r2, [r3, #16]
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	200008c8 	.word	0x200008c8
 8001398:	080012f5 	.word	0x080012f5
 800139c:	08001301 	.word	0x08001301
 80013a0:	08001329 	.word	0x08001329
 80013a4:	08001351 	.word	0x08001351

080013a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ac:	f001 f844 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013b0:	f000 f86e 	bl	8001490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b4:	f000 f93e 	bl	8001634 <MX_GPIO_Init>
  MX_DMA_Init();
 80013b8:	f000 f91c 	bl	80015f4 <MX_DMA_Init>
  MX_I2S2_Init();
 80013bc:	f000 f8ec 	bl	8001598 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  //CONFIGURE LCD
  HAL_GPIO_WritePin(LCD_VCC_GPIO_Port, LCD_VCC_Pin, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2110      	movs	r1, #16
 80013c4:	4828      	ldr	r0, [pc, #160]	; (8001468 <main+0xc0>)
 80013c6:	f001 feeb 	bl	80031a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	2108      	movs	r1, #8
 80013ce:	4826      	ldr	r0, [pc, #152]	; (8001468 <main+0xc0>)
 80013d0:	f001 fee6 	bl	80031a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_GND_GPIO_Port, LCD_GND_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4824      	ldr	r0, [pc, #144]	; (800146c <main+0xc4>)
 80013dc:	f001 fee0 	bl	80031a0 <HAL_GPIO_WritePin>

  LCD_setCE(LCD_CE_GPIO_Port, LCD_CE_Pin);
 80013e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e4:	4820      	ldr	r0, [pc, #128]	; (8001468 <main+0xc0>)
 80013e6:	f000 fcc7 	bl	8001d78 <LCD_setCE>
  LCD_setCLK(LCD_CLK_GPIO_Port, LCD_CLK_Pin);
 80013ea:	2120      	movs	r1, #32
 80013ec:	481e      	ldr	r0, [pc, #120]	; (8001468 <main+0xc0>)
 80013ee:	f000 fcff 	bl	8001df0 <LCD_setCLK>
  LCD_setDC(LCD_DC_GPIO_Port, LCD_DC_Pin);
 80013f2:	2180      	movs	r1, #128	; 0x80
 80013f4:	481c      	ldr	r0, [pc, #112]	; (8001468 <main+0xc0>)
 80013f6:	f000 fcd3 	bl	8001da0 <LCD_setDC>
  LCD_setDIN(LCD_DIN_GPIO_Port, LCD_DIN_Pin);
 80013fa:	2140      	movs	r1, #64	; 0x40
 80013fc:	481a      	ldr	r0, [pc, #104]	; (8001468 <main+0xc0>)
 80013fe:	f000 fce3 	bl	8001dc8 <LCD_setDIN>
  LCD_setRST(LCD_RST_GPIO_Port, LCD_RST_Pin);
 8001402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001406:	4818      	ldr	r0, [pc, #96]	; (8001468 <main+0xc0>)
 8001408:	f000 fca2 	bl	8001d50 <LCD_setRST>
  LCD_init();
 800140c:	f000 fd88 	bl	8001f20 <LCD_init>

  LCD_print("SIGNAL", 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	4816      	ldr	r0, [pc, #88]	; (8001470 <main+0xc8>)
 8001416:	f000 fdfb 	bl	8002010 <LCD_print>
  LCD_print("GENERATOR", 0, 1);
 800141a:	2201      	movs	r2, #1
 800141c:	2100      	movs	r1, #0
 800141e:	4815      	ldr	r0, [pc, #84]	; (8001474 <main+0xcc>)
 8001420:	f000 fdf6 	bl	8002010 <LCD_print>
  LCD_print("By Filipe", 0, 3);
 8001424:	2203      	movs	r2, #3
 8001426:	2100      	movs	r1, #0
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <main+0xd0>)
 800142a:	f000 fdf1 	bl	8002010 <LCD_print>
  LCD_print("Chagas", 0, 4);
 800142e:	2204      	movs	r2, #4
 8001430:	2100      	movs	r1, #0
 8001432:	4812      	ldr	r0, [pc, #72]	; (800147c <main+0xd4>)
 8001434:	f000 fdec 	bl	8002010 <LCD_print>
  LCD_print("SEP/2021", 0, 5);
 8001438:	2205      	movs	r2, #5
 800143a:	2100      	movs	r1, #0
 800143c:	4810      	ldr	r0, [pc, #64]	; (8001480 <main+0xd8>)
 800143e:	f000 fde7 	bl	8002010 <LCD_print>
  HAL_Delay(3000);
 8001442:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001446:	f001 f869 	bl	800251c <HAL_Delay>
  select_freq();
 800144a:	f7ff fe53 	bl	80010f4 <select_freq>
  ui_global_state.init();
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <main+0xdc>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4798      	blx	r3
  generate_wave_cycle();
 8001454:	f000 fb60 	bl	8001b18 <generate_wave_cycle>
  HAL_I2S_Transmit_DMA(&hi2s2, txbuff, 1024);
 8001458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145c:	490a      	ldr	r1, [pc, #40]	; (8001488 <main+0xe0>)
 800145e:	480b      	ldr	r0, [pc, #44]	; (800148c <main+0xe4>)
 8001460:	f002 f81c 	bl	800349c <HAL_I2S_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001464:	e7fe      	b.n	8001464 <main+0xbc>
 8001466:	bf00      	nop
 8001468:	40020400 	.word	0x40020400
 800146c:	40020000 	.word	0x40020000
 8001470:	080061d0 	.word	0x080061d0
 8001474:	080061d8 	.word	0x080061d8
 8001478:	080061e4 	.word	0x080061e4
 800147c:	080061f0 	.word	0x080061f0
 8001480:	080061f8 	.word	0x080061f8
 8001484:	200008c8 	.word	0x200008c8
 8001488:	200000c0 	.word	0x200000c0
 800148c:	20000d44 	.word	0x20000d44

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b09a      	sub	sp, #104	; 0x68
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800149a:	2230      	movs	r2, #48	; 0x30
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 f9e6 	bl	8004870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <SystemClock_Config+0x100>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a30      	ldr	r2, [pc, #192]	; (8001590 <SystemClock_Config+0x100>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b2e      	ldr	r3, [pc, #184]	; (8001590 <SystemClock_Config+0x100>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <SystemClock_Config+0x104>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a2a      	ldr	r2, [pc, #168]	; (8001594 <SystemClock_Config+0x104>)
 80014ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <SystemClock_Config+0x104>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fe:	2302      	movs	r3, #2
 8001500:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001502:	2301      	movs	r3, #1
 8001504:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001506:	2310      	movs	r3, #16
 8001508:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150a:	2302      	movs	r3, #2
 800150c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800150e:	2300      	movs	r3, #0
 8001510:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001512:	2308      	movs	r3, #8
 8001514:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001516:	2364      	movs	r3, #100	; 0x64
 8001518:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151a:	2302      	movs	r3, #2
 800151c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800151e:	2304      	movs	r3, #4
 8001520:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001522:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fc14 	bl	8003d54 <HAL_RCC_OscConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001532:	f000 fc07 	bl	8001d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001536:	230f      	movs	r3, #15
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153a:	2302      	movs	r3, #2
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800154c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001550:	2103      	movs	r1, #3
 8001552:	4618      	mov	r0, r3
 8001554:	f002 fe76 	bl	8004244 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800155e:	f000 fbf1 	bl	8001d44 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001562:	2301      	movs	r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001566:	23c8      	movs	r3, #200	; 0xc8
 8001568:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800156a:	2310      	movs	r3, #16
 800156c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001572:	f107 030c 	add.w	r3, r7, #12
 8001576:	4618      	mov	r0, r3
 8001578:	f003 f800 	bl	800457c <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001582:	f000 fbdf 	bl	8001d44 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	3768      	adds	r7, #104	; 0x68
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000

08001598 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <MX_I2S2_Init+0x54>)
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <MX_I2S2_Init+0x58>)
 80015a0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_I2S2_Init+0x54>)
 80015a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80015aa:	4b10      	ldr	r3, [pc, #64]	; (80015ec <MX_I2S2_Init+0x54>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_I2S2_Init+0x54>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <MX_I2S2_Init+0x54>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <MX_I2S2_Init+0x54>)
 80015be:	f64a 4244 	movw	r2, #44100	; 0xac44
 80015c2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <MX_I2S2_Init+0x54>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MX_I2S2_Init+0x54>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_I2S2_Init+0x54>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	; (80015ec <MX_I2S2_Init+0x54>)
 80015d8:	f001 fe20 	bl	800321c <HAL_I2S_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80015e2:	f000 fbaf 	bl	8001d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000d44 	.word	0x20000d44
 80015f0:	40003800 	.word	0x40003800

080015f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_DMA_Init+0x3c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <MX_DMA_Init+0x3c>)
 8001604:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_DMA_Init+0x3c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 1, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2101      	movs	r1, #1
 800161a:	200f      	movs	r0, #15
 800161c:	f001 f87d 	bl	800271a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001620:	200f      	movs	r0, #15
 8001622:	f001 f896 	bl	8002752 <HAL_NVIC_EnableIRQ>

}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <MX_GPIO_Init+0x110>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	4a3c      	ldr	r2, [pc, #240]	; (8001744 <MX_GPIO_Init+0x110>)
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	6313      	str	r3, [r2, #48]	; 0x30
 800165a:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <MX_GPIO_Init+0x110>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b36      	ldr	r3, [pc, #216]	; (8001744 <MX_GPIO_Init+0x110>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a35      	ldr	r2, [pc, #212]	; (8001744 <MX_GPIO_Init+0x110>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <MX_GPIO_Init+0x110>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_GND_GPIO_Port, LCD_GND_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001688:	482f      	ldr	r0, [pc, #188]	; (8001748 <MX_GPIO_Init+0x114>)
 800168a:	f001 fd89 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|LCD_VCC_Pin|LCD_CLK_Pin|LCD_DIN_Pin
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8001694:	482d      	ldr	r0, [pc, #180]	; (800174c <MX_GPIO_Init+0x118>)
 8001696:	f001 fd83 	bl	80031a0 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ENC_CLK_Pin ENC_DT_Pin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DT_Pin;
 800169a:	2303      	movs	r3, #3
 800169c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800169e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80016a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4619      	mov	r1, r3
 80016ae:	4827      	ldr	r0, [pc, #156]	; (800174c <MX_GPIO_Init+0x118>)
 80016b0:	f001 fbda 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_SW_Pin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 80016b4:	2304      	movs	r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016be:	2301      	movs	r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4619      	mov	r1, r3
 80016c8:	4820      	ldr	r0, [pc, #128]	; (800174c <MX_GPIO_Init+0x118>)
 80016ca:	f001 fbcd 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_GND_Pin */
  GPIO_InitStruct.Pin = LCD_GND_Pin;
 80016ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_GND_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 030c 	add.w	r3, r7, #12
 80016e4:	4619      	mov	r1, r3
 80016e6:	4818      	ldr	r0, [pc, #96]	; (8001748 <MX_GPIO_Init+0x114>)
 80016e8:	f001 fbbe 	bl	8002e68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_VCC_Pin LCD_CLK_Pin LCD_DIN_Pin
                           LCD_DC_Pin LCD_CE_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_VCC_Pin|LCD_CLK_Pin|LCD_DIN_Pin
 80016ec:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80016f0:	60fb      	str	r3, [r7, #12]
                          |LCD_DC_Pin|LCD_CE_Pin|LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	f107 030c 	add.w	r3, r7, #12
 8001702:	4619      	mov	r1, r3
 8001704:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_GPIO_Init+0x118>)
 8001706:	f001 fbaf 	bl	8002e68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2006      	movs	r0, #6
 8001710:	f001 f803 	bl	800271a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001714:	2006      	movs	r0, #6
 8001716:	f001 f81c 	bl	8002752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	2007      	movs	r0, #7
 8001720:	f000 fffb 	bl	800271a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001724:	2007      	movs	r0, #7
 8001726:	f001 f814 	bl	8002752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2008      	movs	r0, #8
 8001730:	f000 fff3 	bl	800271a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001734:	2008      	movs	r0, #8
 8001736:	f001 f80c 	bl	8002752 <HAL_NVIC_EnableIRQ>

}
 800173a:	bf00      	nop
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000
 800174c:	40020400 	.word	0x40020400

08001750 <encoder_callback>:
/* USER CODE BEGIN 4 */
int dt_state_array[2];
int clk_state_array[2];

void encoder_callback()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	dt_state_array[1] = !HAL_GPIO_ReadPin(ENC_DT_GPIO_Port, ENC_DT_Pin);
 8001754:	2102      	movs	r1, #2
 8001756:	4824      	ldr	r0, [pc, #144]	; (80017e8 <encoder_callback+0x98>)
 8001758:	f001 fd0a 	bl	8003170 <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf0c      	ite	eq
 8001762:	2301      	moveq	r3, #1
 8001764:	2300      	movne	r3, #0
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	4b20      	ldr	r3, [pc, #128]	; (80017ec <encoder_callback+0x9c>)
 800176c:	605a      	str	r2, [r3, #4]
	clk_state_array[1] = !HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port, ENC_CLK_Pin);
 800176e:	2101      	movs	r1, #1
 8001770:	481d      	ldr	r0, [pc, #116]	; (80017e8 <encoder_callback+0x98>)
 8001772:	f001 fcfd 	bl	8003170 <HAL_GPIO_ReadPin>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <encoder_callback+0xa0>)
 8001786:	605a      	str	r2, [r3, #4]
		  Similarly only the following encoder output transitions are valid for Anti-Clockwise rotation:
	      (01 > 00), (00 > 10), (10 > 11), and (11 > 01)"
	      Source: https://www.best-microcontroller-projects.com/rotary-encoder.html
	 */

	if((clk_state_array[0] == 1 && dt_state_array[0] == 1 && clk_state_array[1] == 1 && dt_state_array[1] == 0) ||
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <encoder_callback+0xa0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d10e      	bne.n	80017ae <encoder_callback+0x5e>
 8001790:	4b16      	ldr	r3, [pc, #88]	; (80017ec <encoder_callback+0x9c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d10a      	bne.n	80017ae <encoder_callback+0x5e>
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <encoder_callback+0xa0>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d106      	bne.n	80017ae <encoder_callback+0x5e>
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <encoder_callback+0x9c>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <encoder_callback+0x5e>
		//(clk_state_array[0] == 1 && dt_state_array[0] == 0 && clk_state_array[1] == 0 && dt_state_array[1] == 0) ||
		//(clk_state_array[0] == 0 && dt_state_array[0] == 0 && clk_state_array[1] == 1 && dt_state_array[1] == 0) ||
		//(clk_state_array[0] == 0 && dt_state_array[0] == 1 && clk_state_array[1] == 1 && dt_state_array[1] == 1) ||
		0)
	{
		ui_global_state.ccw_rotation();
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <encoder_callback+0xa4>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4798      	blx	r3
	}

	if((clk_state_array[0] == 0 && dt_state_array[0] == 1 && clk_state_array[1] == 0 && dt_state_array[1] == 0) ||
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <encoder_callback+0xa0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10e      	bne.n	80017d4 <encoder_callback+0x84>
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <encoder_callback+0x9c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10a      	bne.n	80017d4 <encoder_callback+0x84>
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <encoder_callback+0xa0>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d106      	bne.n	80017d4 <encoder_callback+0x84>
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <encoder_callback+0x9c>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <encoder_callback+0x84>
		//(clk_state_array[0] == 0 && dt_state_array[0] == 0 && clk_state_array[1] == 1 && dt_state_array[1] == 0) ||
		//(clk_state_array[0] == 1 && dt_state_array[0] == 0 && clk_state_array[1] == 1 && dt_state_array[1] == 1) ||
		//(clk_state_array[0] == 1 && dt_state_array[0] == 1 && clk_state_array[1] == 0 && dt_state_array[1] == 1) ||
		0)
	{
		ui_global_state.cw_rotation();
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <encoder_callback+0xa4>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4798      	blx	r3
	}

	dt_state_array[0] = dt_state_array[1];
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <encoder_callback+0x9c>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <encoder_callback+0x9c>)
 80017da:	6013      	str	r3, [r2, #0]
	clk_state_array[0] = clk_state_array[1];
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <encoder_callback+0xa0>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <encoder_callback+0xa0>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40020400 	.word	0x40020400
 80017ec:	20000cdc 	.word	0x20000cdc
 80017f0:	200008c0 	.word	0x200008c0
 80017f4:	200008c8 	.word	0x200008c8

080017f8 <switch_callback>:

void switch_callback()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
	int new_enc_sw_state = !HAL_GPIO_ReadPin(ENC_SW_GPIO_Port, ENC_SW_Pin);
 80017fe:	2104      	movs	r1, #4
 8001800:	4817      	ldr	r0, [pc, #92]	; (8001860 <switch_callback+0x68>)
 8001802:	f001 fcb5 	bl	8003170 <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf0c      	ite	eq
 800180c:	2301      	moveq	r3, #1
 800180e:	2300      	movne	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	60fb      	str	r3, [r7, #12]
	int new_enc_dt_state = !HAL_GPIO_ReadPin(ENC_DT_GPIO_Port, ENC_DT_Pin);
 8001814:	2102      	movs	r1, #2
 8001816:	4812      	ldr	r0, [pc, #72]	; (8001860 <switch_callback+0x68>)
 8001818:	f001 fcaa 	bl	8003170 <HAL_GPIO_ReadPin>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf0c      	ite	eq
 8001822:	2301      	moveq	r3, #1
 8001824:	2300      	movne	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	60bb      	str	r3, [r7, #8]
	int new_enc_clk_state = !HAL_GPIO_ReadPin(ENC_CLK_GPIO_Port, ENC_CLK_Pin);
 800182a:	2101      	movs	r1, #1
 800182c:	480c      	ldr	r0, [pc, #48]	; (8001860 <switch_callback+0x68>)
 800182e:	f001 fc9f 	bl	8003170 <HAL_GPIO_ReadPin>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf0c      	ite	eq
 8001838:	2301      	moveq	r3, #1
 800183a:	2300      	movne	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	607b      	str	r3, [r7, #4]

	if(new_enc_clk_state == 0 && new_enc_dt_state == 0 && new_enc_sw_state == 1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d108      	bne.n	8001858 <switch_callback+0x60>
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <switch_callback+0x60>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d102      	bne.n	8001858 <switch_callback+0x60>
		ui_global_state.push();
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <switch_callback+0x6c>)
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	4798      	blx	r3
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40020400 	.word	0x40020400
 8001864:	200008c8 	.word	0x200008c8

08001868 <square_wave>:

double square_wave(double x)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	ed87 0b00 	vstr	d0, [r7]
	double y = 0;
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	f04f 0300 	mov.w	r3, #0
 800187a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int k = 1; k <= harmonics; k++)
 800187e:	2301      	movs	r3, #1
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e037      	b.n	80018f4 <square_wave+0x8c>
	{
		y += ((double)4/PI)*(sin(x*(2*k-1))/(2*k-1));
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	3b01      	subs	r3, #1
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe4a 	bl	8000524 <__aeabi_i2d>
 8001890:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001894:	f7fe feb0 	bl	80005f8 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	ec43 2b17 	vmov	d7, r2, r3
 80018a0:	eeb0 0a47 	vmov.f32	s0, s14
 80018a4:	eef0 0a67 	vmov.f32	s1, s15
 80018a8:	f003 fc1a 	bl	80050e0 <sin>
 80018ac:	ec55 4b10 	vmov	r4, r5, d0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	3b01      	subs	r3, #1
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fe34 	bl	8000524 <__aeabi_i2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe ffc2 	bl	800084c <__aeabi_ddiv>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	a312      	add	r3, pc, #72	; (adr r3, 800191c <square_wave+0xb4>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fe8f 	bl	80005f8 <__aeabi_dmul>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018e2:	f7fe fcd3 	bl	800028c <__adddf3>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int k = 1; k <= harmonics; k++)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <square_wave+0xb0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	ddc2      	ble.n	8001884 <square_wave+0x1c>
	}
	return y;
 80018fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001902:	ec43 2b17 	vmov	d7, r2, r3
}
 8001906:	eeb0 0a47 	vmov.f32	s0, s14
 800190a:	eef0 0a67 	vmov.f32	s1, s15
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bdb0      	pop	{r4, r5, r7, pc}
 8001914:	f3af 8000 	nop.w
 8001918:	20000008 	.word	0x20000008
 800191c:	6dc9c883 	.word	0x6dc9c883
 8001920:	3ff45f30 	.word	0x3ff45f30
 8001924:	00000000 	.word	0x00000000

08001928 <triangle_wave>:

double triangle_wave(double x)
{
 8001928:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	ed87 0b00 	vstr	d0, [r7]
	double y = 0;
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int k = 1; k <= harmonics; k++)
 8001940:	2301      	movs	r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e058      	b.n	80019f8 <triangle_wave+0xd0>
	{
		y += ((double)8/(PI*PI))*sin((double)(k*PI)/2)*(sin(k*x)/(k*k));
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f7fe fdec 	bl	8000524 <__aeabi_i2d>
 800194c:	a335      	add	r3, pc, #212	; (adr r3, 8001a24 <triangle_wave+0xfc>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fe51 	bl	80005f8 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001966:	f7fe ff71 	bl	800084c <__aeabi_ddiv>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	ec43 2b17 	vmov	d7, r2, r3
 8001972:	eeb0 0a47 	vmov.f32	s0, s14
 8001976:	eef0 0a67 	vmov.f32	s1, s15
 800197a:	f003 fbb1 	bl	80050e0 <sin>
 800197e:	ec51 0b10 	vmov	r0, r1, d0
 8001982:	a32a      	add	r3, pc, #168	; (adr r3, 8001a2c <triangle_wave+0x104>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe fe36 	bl	80005f8 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4614      	mov	r4, r2
 8001992:	461d      	mov	r5, r3
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7fe fdc5 	bl	8000524 <__aeabi_i2d>
 800199a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800199e:	f7fe fe2b 	bl	80005f8 <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	ec43 2b17 	vmov	d7, r2, r3
 80019aa:	eeb0 0a47 	vmov.f32	s0, s14
 80019ae:	eef0 0a67 	vmov.f32	s1, s15
 80019b2:	f003 fb95 	bl	80050e0 <sin>
 80019b6:	ec59 8b10 	vmov	r8, r9, d0
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	fb03 f303 	mul.w	r3, r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdaf 	bl	8000524 <__aeabi_i2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4640      	mov	r0, r8
 80019cc:	4649      	mov	r1, r9
 80019ce:	f7fe ff3d 	bl	800084c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4620      	mov	r0, r4
 80019d8:	4629      	mov	r1, r5
 80019da:	f7fe fe0d 	bl	80005f8 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019e6:	f7fe fc51 	bl	800028c <__adddf3>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int k = 1; k <= harmonics; k++)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <triangle_wave+0xf8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dda1      	ble.n	8001946 <triangle_wave+0x1e>
	}
	return y;
 8001a02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001a06:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0e:	eef0 0a67 	vmov.f32	s1, s15
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w
 8001a20:	20000008 	.word	0x20000008
 8001a24:	54442d18 	.word	0x54442d18
 8001a28:	400921fb 	.word	0x400921fb
 8001a2c:	6222c720 	.word	0x6222c720
 8001a30:	3fe9f02f 	.word	0x3fe9f02f
 8001a34:	00000000 	.word	0x00000000

08001a38 <saw_wave>:

double saw_wave(double x)
{
 8001a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	ed87 0b00 	vstr	d0, [r7]
	double y = 0;
 8001a44:	f04f 0200 	mov.w	r2, #0
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int k = 1; k <= harmonics; k++)
 8001a50:	2301      	movs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e043      	b.n	8001ade <saw_wave+0xa6>
	{
		y += ((double)2/PI)*(k % 2 == 0 ? 1 : -1)*(sin(k*x)/k);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d103      	bne.n	8001a68 <saw_wave+0x30>
 8001a60:	f04f 0000 	mov.w	r0, #0
 8001a64:	4928      	ldr	r1, [pc, #160]	; (8001b08 <saw_wave+0xd0>)
 8001a66:	e002      	b.n	8001a6e <saw_wave+0x36>
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	4927      	ldr	r1, [pc, #156]	; (8001b0c <saw_wave+0xd4>)
 8001a6e:	a324      	add	r3, pc, #144	; (adr r3, 8001b00 <saw_wave+0xc8>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fdc0 	bl	80005f8 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7fe fd4f 	bl	8000524 <__aeabi_i2d>
 8001a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a8a:	f7fe fdb5 	bl	80005f8 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	ec43 2b17 	vmov	d7, r2, r3
 8001a96:	eeb0 0a47 	vmov.f32	s0, s14
 8001a9a:	eef0 0a67 	vmov.f32	s1, s15
 8001a9e:	f003 fb1f 	bl	80050e0 <sin>
 8001aa2:	ec59 8b10 	vmov	r8, r9, d0
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7fe fd3c 	bl	8000524 <__aeabi_i2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4640      	mov	r0, r8
 8001ab2:	4649      	mov	r1, r9
 8001ab4:	f7fe feca 	bl	800084c <__aeabi_ddiv>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4620      	mov	r0, r4
 8001abe:	4629      	mov	r1, r5
 8001ac0:	f7fe fd9a 	bl	80005f8 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001acc:	f7fe fbde 	bl	800028c <__adddf3>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int k = 1; k <= harmonics; k++)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	3301      	adds	r3, #1
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <saw_wave+0xd8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	ddb6      	ble.n	8001a56 <saw_wave+0x1e>
	}
	return y;
 8001ae8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001af0:	eeb0 0a47 	vmov.f32	s0, s14
 8001af4:	eef0 0a67 	vmov.f32	s1, s15
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b00:	6dc9c883 	.word	0x6dc9c883
 8001b04:	3fe45f30 	.word	0x3fe45f30
 8001b08:	3ff00000 	.word	0x3ff00000
 8001b0c:	bff00000 	.word	0xbff00000
 8001b10:	20000008 	.word	0x20000008
 8001b14:	00000000 	.word	0x00000000

08001b18 <generate_wave_cycle>:
uint16_t cycle_buff[TXBUFF_LEN/2];
int cycle_len = 0;
int cycle_buff_lock = 0;

double generate_wave_cycle()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
	cycle_buff_lock = 1;
 8001b1e:	4b5c      	ldr	r3, [pc, #368]	; (8001c90 <generate_wave_cycle+0x178>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

	double t = 0;
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double (*wf)(double);
	switch(waveform)
 8001b30:	4b58      	ldr	r3, [pc, #352]	; (8001c94 <generate_wave_cycle+0x17c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d817      	bhi.n	8001b68 <generate_wave_cycle+0x50>
 8001b38:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <generate_wave_cycle+0x28>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b57 	.word	0x08001b57
 8001b48:	08001b5d 	.word	0x08001b5d
 8001b4c:	08001b63 	.word	0x08001b63
	{
	case WAVEFORM_SIN:
		wf = sin;
 8001b50:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <generate_wave_cycle+0x180>)
 8001b52:	60fb      	str	r3, [r7, #12]
		break;
 8001b54:	e008      	b.n	8001b68 <generate_wave_cycle+0x50>
	case WAVEFORM_SQUARE:
		wf = square_wave;
 8001b56:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <generate_wave_cycle+0x184>)
 8001b58:	60fb      	str	r3, [r7, #12]
		break;
 8001b5a:	e005      	b.n	8001b68 <generate_wave_cycle+0x50>
	case WAVEFORM_TRIANGLE:
		wf = triangle_wave;
 8001b5c:	4b50      	ldr	r3, [pc, #320]	; (8001ca0 <generate_wave_cycle+0x188>)
 8001b5e:	60fb      	str	r3, [r7, #12]
		break;
 8001b60:	e002      	b.n	8001b68 <generate_wave_cycle+0x50>
	case WAVEFORM_SAW:
		wf = saw_wave;
 8001b62:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <generate_wave_cycle+0x18c>)
 8001b64:	60fb      	str	r3, [r7, #12]
		break;
 8001b66:	bf00      	nop
	}

	double A = (double)amplitude/100;
 8001b68:	4b4f      	ldr	r3, [pc, #316]	; (8001ca8 <generate_wave_cycle+0x190>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fcd9 	bl	8000524 <__aeabi_i2d>
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b4d      	ldr	r3, [pc, #308]	; (8001cac <generate_wave_cycle+0x194>)
 8001b78:	f7fe fe68 	bl	800084c <__aeabi_ddiv>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	e9c7 2300 	strd	r2, r3, [r7]
	int i = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
	while(t <= (double)1/frequency)
 8001b88:	e056      	b.n	8001c38 <generate_wave_cycle+0x120>
	{
		cycle_buff[i] = (int)(AMPLITUDE_FACTOR*((A*wf(frequency*TAU*t)+A)/2));
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <generate_wave_cycle+0x198>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fcc8 	bl	8000524 <__aeabi_i2d>
 8001b94:	a33a      	add	r3, pc, #232	; (adr r3, 8001c80 <generate_wave_cycle+0x168>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	f7fe fd2d 	bl	80005f8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001baa:	f7fe fd25 	bl	80005f8 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	ec43 2b17 	vmov	d7, r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bbc:	eef0 0a67 	vmov.f32	s1, s15
 8001bc0:	4798      	blx	r3
 8001bc2:	ec51 0b10 	vmov	r0, r1, d0
 8001bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bca:	f7fe fd15 	bl	80005f8 <__aeabi_dmul>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bda:	f7fe fb57 	bl	800028c <__adddf3>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bee:	f7fe fe2d 	bl	800084c <__aeabi_ddiv>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	a323      	add	r3, pc, #140	; (adr r3, 8001c88 <generate_wave_cycle+0x170>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fcfa 	bl	80005f8 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	f7fe ff8e 	bl	8000b2c <__aeabi_d2iz>
 8001c10:	4603      	mov	r3, r0
 8001c12:	b299      	uxth	r1, r3
 8001c14:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <generate_wave_cycle+0x19c>)
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		i += 1;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	60bb      	str	r3, [r7, #8]
		t += t_step;
 8001c22:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <generate_wave_cycle+0x1a0>)
 8001c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c2c:	f7fe fb2e 	bl	800028c <__adddf3>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2304 	strd	r2, r3, [r7, #16]
	while(t <= (double)1/frequency)
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <generate_wave_cycle+0x198>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fc71 	bl	8000524 <__aeabi_i2d>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	f04f 0000 	mov.w	r0, #0
 8001c4a:	491c      	ldr	r1, [pc, #112]	; (8001cbc <generate_wave_cycle+0x1a4>)
 8001c4c:	f7fe fdfe 	bl	800084c <__aeabi_ddiv>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c58:	f7fe ff4a 	bl	8000af0 <__aeabi_dcmple>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d193      	bne.n	8001b8a <generate_wave_cycle+0x72>
	}

	cycle_len = i-1;
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <generate_wave_cycle+0x1a8>)
 8001c68:	6013      	str	r3, [r2, #0]
	cycle_buff_lock = 0;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <generate_wave_cycle+0x178>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
}
 8001c70:	bf00      	nop
 8001c72:	eeb0 0a47 	vmov.f32	s0, s14
 8001c76:	eef0 0a67 	vmov.f32	s1, s15
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	54442d18 	.word	0x54442d18
 8001c84:	401921fb 	.word	0x401921fb
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40dbd500 	.word	0x40dbd500
 8001c90:	200000ac 	.word	0x200000ac
 8001c94:	200000a4 	.word	0x200000a4
 8001c98:	080050e1 	.word	0x080050e1
 8001c9c:	08001869 	.word	0x08001869
 8001ca0:	08001929 	.word	0x08001929
 8001ca4:	08001a39 	.word	0x08001a39
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	40590000 	.word	0x40590000
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	200008dc 	.word	0x200008dc
 8001cb8:	20000010 	.word	0x20000010
 8001cbc:	3ff00000 	.word	0x3ff00000
 8001cc0:	200000a8 	.word	0x200000a8

08001cc4 <HAL_I2S_TxCpltCallback>:
	}
}
*/

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	if(cycle_buff_lock == 0)
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_I2S_TxCpltCallback+0x6c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d127      	bne.n	8001d24 <HAL_I2S_TxCpltCallback+0x60>
	{
		for(int i = 0; i < TXBUFF_LEN; i+=2)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e020      	b.n	8001d1c <HAL_I2S_TxCpltCallback+0x58>
		{
			txbuff[i] = cycle_buff[j % cycle_len];
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_I2S_TxCpltCallback+0x70>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a16      	ldr	r2, [pc, #88]	; (8001d38 <HAL_I2S_TxCpltCallback+0x74>)
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ce6:	fb02 f201 	mul.w	r2, r2, r1
 8001cea:	1a9b      	subs	r3, r3, r2
 8001cec:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <HAL_I2S_TxCpltCallback+0x78>)
 8001cee:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001cf2:	4a13      	ldr	r2, [pc, #76]	; (8001d40 <HAL_I2S_TxCpltCallback+0x7c>)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			txbuff[i+1] = txbuff[i];
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4910      	ldr	r1, [pc, #64]	; (8001d40 <HAL_I2S_TxCpltCallback+0x7c>)
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_I2S_TxCpltCallback+0x7c>)
 8001d08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			j += 1;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_I2S_TxCpltCallback+0x70>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_I2S_TxCpltCallback+0x70>)
 8001d14:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < TXBUFF_LEN; i+=2)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3302      	adds	r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d22:	dbda      	blt.n	8001cda <HAL_I2S_TxCpltCallback+0x16>
		}
	}
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	200000ac 	.word	0x200000ac
 8001d34:	200000b0 	.word	0x200000b0
 8001d38:	200000a8 	.word	0x200000a8
 8001d3c:	200008dc 	.word	0x200008dc
 8001d40:	200000c0 	.word	0x200000c0

08001d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d48:	b672      	cpsid	i
}
 8001d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <Error_Handler+0x8>
	...

08001d50 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 8001d5c:	4a05      	ldr	r2, [pc, #20]	; (8001d74 <LCD_setRST+0x24>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8001d62:	4a04      	ldr	r2, [pc, #16]	; (8001d74 <LCD_setRST+0x24>)
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	8093      	strh	r3, [r2, #4]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	20000d8c 	.word	0x20000d8c

08001d78 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8001d84:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <LCD_setCE+0x24>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	; (8001d9c <LCD_setCE+0x24>)
 8001d8c:	887b      	ldrh	r3, [r7, #2]
 8001d8e:	8193      	strh	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20000d8c 	.word	0x20000d8c

08001da0 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <LCD_setDC+0x24>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <LCD_setDC+0x24>)
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	8293      	strh	r3, [r2, #20]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	20000d8c 	.word	0x20000d8c

08001dc8 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8001dd4:	4a05      	ldr	r2, [pc, #20]	; (8001dec <LCD_setDIN+0x24>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <LCD_setDIN+0x24>)
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	8393      	strh	r3, [r2, #28]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	20000d8c 	.word	0x20000d8c

08001df0 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8001dfc:	4a05      	ldr	r2, [pc, #20]	; (8001e14 <LCD_setCLK+0x24>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8001e02:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <LCD_setCLK+0x24>)
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	20000d8c 	.word	0x20000d8c

08001e18 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]
 8001e26:	e026      	b.n	8001e76 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <LCD_send+0x70>)
 8001e2a:	6998      	ldr	r0, [r3, #24]
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <LCD_send+0x70>)
 8001e2e:	8b99      	ldrh	r1, [r3, #28]
 8001e30:	79fa      	ldrb	r2, [r7, #7]
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	f1c3 0307 	rsb	r3, r3, #7
 8001e38:	fa42 f303 	asr.w	r3, r2, r3
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f001 f9a8 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <LCD_send+0x70>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a0c      	ldr	r2, [pc, #48]	; (8001e88 <LCD_send+0x70>)
 8001e56:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 f9a0 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <LCD_send+0x70>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <LCD_send+0x70>)
 8001e66:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001e68:	2200      	movs	r2, #0
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 f998 	bl	80031a0 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	3301      	adds	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b07      	cmp	r3, #7
 8001e7a:	d9d5      	bls.n	8001e28 <LCD_send+0x10>
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000d8c 	.word	0x20000d8c

08001e8c <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	460a      	mov	r2, r1
 8001e96:	71fb      	strb	r3, [r7, #7]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 8001e9c:	79bb      	ldrb	r3, [r7, #6]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d11c      	bne.n	8001edc <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <LCD_write+0x90>)
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <LCD_write+0x90>)
 8001ea8:	8a91      	ldrh	r1, [r2, #20]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 f977 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <LCD_write+0x90>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <LCD_write+0x90>)
 8001eb8:	8991      	ldrh	r1, [r2, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 f96f 	bl	80031a0 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ffa7 	bl	8001e18 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <LCD_write+0x90>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	4a13      	ldr	r2, [pc, #76]	; (8001f1c <LCD_write+0x90>)
 8001ed0:	8991      	ldrh	r1, [r2, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 f963 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8001eda:	e01b      	b.n	8001f14 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <LCD_write+0x90>)
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <LCD_write+0x90>)
 8001ee2:	8a91      	ldrh	r1, [r2, #20]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 f95a 	bl	80031a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <LCD_write+0x90>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <LCD_write+0x90>)
 8001ef2:	8991      	ldrh	r1, [r2, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 f952 	bl	80031a0 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff8a 	bl	8001e18 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <LCD_write+0x90>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <LCD_write+0x90>)
 8001f0a:	8991      	ldrh	r1, [r2, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 f946 	bl	80031a0 <HAL_GPIO_WritePin>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000d8c 	.word	0x20000d8c

08001f20 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <LCD_init+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <LCD_init+0x64>)
 8001f2a:	8891      	ldrh	r1, [r2, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 f936 	bl	80031a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <LCD_init+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <LCD_init+0x64>)
 8001f3a:	8891      	ldrh	r1, [r2, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f001 f92e 	bl	80031a0 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8001f44:	2100      	movs	r1, #0
 8001f46:	2021      	movs	r0, #33	; 0x21
 8001f48:	f7ff ffa0 	bl	8001e8c <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	20b8      	movs	r0, #184	; 0xb8
 8001f50:	f7ff ff9c 	bl	8001e8c <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8001f54:	2100      	movs	r1, #0
 8001f56:	2004      	movs	r0, #4
 8001f58:	f7ff ff98 	bl	8001e8c <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2014      	movs	r0, #20
 8001f60:	f7ff ff94 	bl	8001e8c <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8001f64:	2100      	movs	r1, #0
 8001f66:	2020      	movs	r0, #32
 8001f68:	f7ff ff90 	bl	8001e8c <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	200c      	movs	r0, #12
 8001f70:	f7ff ff8c 	bl	8001e8c <LCD_write>
  LCD_clrScr();
 8001f74:	f000 f86c 	bl	8002050 <LCD_clrScr>
  lcd.inverttext = false;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <LCD_init+0x68>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000d8c 	.word	0x20000d8c
 8001f88:	20000db4 	.word	0x20000db4

08001f8c <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e02d      	b.n	8001ff8 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 8001f9c:	4b1a      	ldr	r3, [pc, #104]	; (8002008 <LCD_putChar+0x7c>)
 8001f9e:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8001fa2:	f083 0301 	eor.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d010      	beq.n	8001fce <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f1a3 0220 	sub.w	r2, r3, #32
 8001fb2:	4916      	ldr	r1, [pc, #88]	; (800200c <LCD_putChar+0x80>)
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	18ca      	adds	r2, r1, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff ff60 	bl	8001e8c <LCD_write>
 8001fcc:	e011      	b.n	8001ff2 <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f1a3 0220 	sub.w	r2, r3, #32
 8001fd4:	490d      	ldr	r1, [pc, #52]	; (800200c <LCD_putChar+0x80>)
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	18ca      	adds	r2, r1, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2101      	movs	r1, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff4d 	bl	8001e8c <LCD_write>
  for(int i = 0; i < 6; i++){
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b05      	cmp	r3, #5
 8001ffc:	ddce      	ble.n	8001f9c <LCD_putChar+0x10>
  }
}
 8001ffe:	bf00      	nop
 8002000:	bf00      	nop
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20000db4 	.word	0x20000db4
 800200c:	08006244 	.word	0x08006244

08002010 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	70fb      	strb	r3, [r7, #3]
 800201c:	4613      	mov	r3, r2
 800201e:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8002020:	78ba      	ldrb	r2, [r7, #2]
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f830 	bl	800208c <LCD_goXY>
  while(*str){
 800202c:	e006      	b.n	800203c <LCD_print+0x2c>
    LCD_putChar(*str++);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ffa8 	bl	8001f8c <LCD_putChar>
  while(*str){
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f4      	bne.n	800202e <LCD_print+0x1e>
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8002056:	2300      	movs	r3, #0
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	e00b      	b.n	8002074 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 800205c:	2101      	movs	r1, #1
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff ff14 	bl	8001e8c <LCD_write>
    lcd.buffer[i] = 0;
 8002064:	4a08      	ldr	r2, [pc, #32]	; (8002088 <LCD_clrScr+0x38>)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	2200      	movs	r2, #0
 800206c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3301      	adds	r3, #1
 8002072:	607b      	str	r3, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800207a:	dbef      	blt.n	800205c <LCD_clrScr+0xc>
  }
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000db4 	.word	0x20000db4

0800208c <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	460a      	mov	r2, r1
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	4613      	mov	r3, r2
 800209a:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff fef0 	bl	8001e8c <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 80020ac:	79bb      	ldrb	r3, [r7, #6]
 80020ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2100      	movs	r1, #0
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff fee8 	bl	8001e8c <LCD_write>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <HAL_MspInit+0x4c>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_MspInit+0x4c>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <HAL_MspInit+0x4c>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	607b      	str	r3, [r7, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <HAL_MspInit+0x4c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <HAL_MspInit+0x4c>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_MspInit+0x4c>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40023800 	.word	0x40023800

08002114 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a31      	ldr	r2, [pc, #196]	; (80021f8 <HAL_I2S_MspInit+0xe4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d15c      	bne.n	80021f0 <HAL_I2S_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HAL_I2S_MspInit+0xe8>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <HAL_I2S_MspInit+0xe8>)
 8002140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b2d      	ldr	r3, [pc, #180]	; (80021fc <HAL_I2S_MspInit+0xe8>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_I2S_MspInit+0xe8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a28      	ldr	r2, [pc, #160]	; (80021fc <HAL_I2S_MspInit+0xe8>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_I2S_MspInit+0xe8>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|I2S2_OUT_Pin;
 800216e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002180:	2305      	movs	r3, #5
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	481d      	ldr	r0, [pc, #116]	; (8002200 <HAL_I2S_MspInit+0xec>)
 800218c:	f000 fe6c 	bl	8002e68 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_I2S_MspInit+0xf4>)
 8002194:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 8002198:	2200      	movs	r2, #0
 800219a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 800219e:	2240      	movs	r2, #64	; 0x40
 80021a0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a2:	4b18      	ldr	r3, [pc, #96]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ae:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021b8:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021be:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021ce:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80021d4:	480b      	ldr	r0, [pc, #44]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021d6:	f000 fad7 	bl	8002788 <HAL_DMA_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_I2S_MspInit+0xd0>
    {
      Error_Handler();
 80021e0:	f7ff fdb0 	bl	8001d44 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021e8:	639a      	str	r2, [r3, #56]	; 0x38
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_I2S_MspInit+0xf0>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	3728      	adds	r7, #40	; 0x28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40003800 	.word	0x40003800
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020400 	.word	0x40020400
 8002204:	20000ce4 	.word	0x20000ce4
 8002208:	40026070 	.word	0x40026070

0800220c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	LCD_clrScr();
 8002210:	f7ff ff1e 	bl	8002050 <LCD_clrScr>
	LCD_print("NMI", 0, 0);
 8002214:	2200      	movs	r2, #0
 8002216:	2100      	movs	r1, #0
 8002218:	4804      	ldr	r0, [pc, #16]	; (800222c <NMI_Handler+0x20>)
 800221a:	f7ff fef9 	bl	8002010 <LCD_print>
	LCD_print("EXCEPTION", 0, 1);
 800221e:	2201      	movs	r2, #1
 8002220:	2100      	movs	r1, #0
 8002222:	4803      	ldr	r0, [pc, #12]	; (8002230 <NMI_Handler+0x24>)
 8002224:	f7ff fef4 	bl	8002010 <LCD_print>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <NMI_Handler+0x1c>
 800222a:	bf00      	nop
 800222c:	08006204 	.word	0x08006204
 8002230:	08006208 	.word	0x08006208

08002234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	LCD_clrScr();
 8002238:	f7ff ff0a 	bl	8002050 <LCD_clrScr>
	LCD_print("HardFault", 0, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <HardFault_Handler+0x20>)
 8002242:	f7ff fee5 	bl	8002010 <LCD_print>
	LCD_print("EXCEPTION", 0, 1);
 8002246:	2201      	movs	r2, #1
 8002248:	2100      	movs	r1, #0
 800224a:	4803      	ldr	r0, [pc, #12]	; (8002258 <HardFault_Handler+0x24>)
 800224c:	f7ff fee0 	bl	8002010 <LCD_print>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <HardFault_Handler+0x1c>
 8002252:	bf00      	nop
 8002254:	08006214 	.word	0x08006214
 8002258:	08006208 	.word	0x08006208

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	LCD_clrScr();
 8002260:	f7ff fef6 	bl	8002050 <LCD_clrScr>
	LCD_print("MemManage", 0, 0);
 8002264:	2200      	movs	r2, #0
 8002266:	2100      	movs	r1, #0
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <MemManage_Handler+0x20>)
 800226a:	f7ff fed1 	bl	8002010 <LCD_print>
	LCD_print("EXCEPTION", 0, 1);
 800226e:	2201      	movs	r2, #1
 8002270:	2100      	movs	r1, #0
 8002272:	4803      	ldr	r0, [pc, #12]	; (8002280 <MemManage_Handler+0x24>)
 8002274:	f7ff fecc 	bl	8002010 <LCD_print>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <MemManage_Handler+0x1c>
 800227a:	bf00      	nop
 800227c:	08006220 	.word	0x08006220
 8002280:	08006208 	.word	0x08006208

08002284 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	LCD_clrScr();
 8002288:	f7ff fee2 	bl	8002050 <LCD_clrScr>
	LCD_print("BusFault", 0, 0);
 800228c:	2200      	movs	r2, #0
 800228e:	2100      	movs	r1, #0
 8002290:	4804      	ldr	r0, [pc, #16]	; (80022a4 <BusFault_Handler+0x20>)
 8002292:	f7ff febd 	bl	8002010 <LCD_print>
	LCD_print("EXCEPTION", 0, 1);
 8002296:	2201      	movs	r2, #1
 8002298:	2100      	movs	r1, #0
 800229a:	4803      	ldr	r0, [pc, #12]	; (80022a8 <BusFault_Handler+0x24>)
 800229c:	f7ff feb8 	bl	8002010 <LCD_print>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <BusFault_Handler+0x1c>
 80022a2:	bf00      	nop
 80022a4:	0800622c 	.word	0x0800622c
 80022a8:	08006208 	.word	0x08006208

080022ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	LCD_clrScr();
 80022b0:	f7ff fece 	bl	8002050 <LCD_clrScr>
	LCD_print("UsageFault", 0, 0);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	4804      	ldr	r0, [pc, #16]	; (80022cc <UsageFault_Handler+0x20>)
 80022ba:	f7ff fea9 	bl	8002010 <LCD_print>
	LCD_print("EXCEPTION", 0, 1);
 80022be:	2201      	movs	r2, #1
 80022c0:	2100      	movs	r1, #0
 80022c2:	4803      	ldr	r0, [pc, #12]	; (80022d0 <UsageFault_Handler+0x24>)
 80022c4:	f7ff fea4 	bl	8002010 <LCD_print>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x1c>
 80022ca:	bf00      	nop
 80022cc:	08006238 	.word	0x08006238
 80022d0:	08006208 	.word	0x08006208

080022d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002302:	f000 f8eb 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}

0800230a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  encoder_callback();
 800230e:	f7ff fa1f 	bl	8001750 <encoder_callback>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 ff5e 	bl	80031d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  encoder_callback();
 8002320:	f7ff fa16 	bl	8001750 <encoder_callback>
  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002324:	2002      	movs	r0, #2
 8002326:	f000 ff55 	bl	80031d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}

0800232e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
  switch_callback();
 8002332:	f7ff fa61 	bl	80017f8 <switch_callback>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002336:	2004      	movs	r0, #4
 8002338:	f000 ff4c 	bl	80031d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <DMA1_Stream4_IRQHandler+0x10>)
 8002346:	f000 fb25 	bl	8002994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000ce4 	.word	0x20000ce4

08002354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <_sbrk+0x5c>)
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <_sbrk+0x60>)
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <_sbrk+0x64>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <_sbrk+0x68>)
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d207      	bcs.n	8002394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002384:	f002 fa4a 	bl	800481c <__errno>
 8002388:	4603      	mov	r3, r0
 800238a:	220c      	movs	r2, #12
 800238c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002392:	e009      	b.n	80023a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <_sbrk+0x64>)
 80023a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20020000 	.word	0x20020000
 80023b4:	00000400 	.word	0x00000400
 80023b8:	200000b4 	.word	0x200000b4
 80023bc:	20000fc8 	.word	0x20000fc8

080023c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <SystemInit+0x20>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <SystemInit+0x20>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800241c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e8:	480d      	ldr	r0, [pc, #52]	; (8002420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ea:	490e      	ldr	r1, [pc, #56]	; (8002424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002400:	4c0b      	ldr	r4, [pc, #44]	; (8002430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800240e:	f7ff ffd7 	bl	80023c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002412:	f002 fa09 	bl	8004828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002416:	f7fe ffc7 	bl	80013a8 <main>
  bx  lr    
 800241a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800241c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002424:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002428:	080066b8 	.word	0x080066b8
  ldr r2, =_sbss
 800242c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002430:	20000fc4 	.word	0x20000fc4

08002434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_Init+0x40>)
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_Init+0x40>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_Init+0x40>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 f94f 	bl	8002704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f808 	bl	800247c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7ff fe2a 	bl	80020c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x54>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x58>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f967 	bl	800276e <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b8:	f000 f92f 	bl	800271a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_InitTick+0x5c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000018 	.word	0x20000018
 80024d4:	20000020 	.word	0x20000020
 80024d8:	2000001c 	.word	0x2000001c

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000020 	.word	0x20000020
 8002500:	20000fb0 	.word	0x20000fb0

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	20000fb0 	.word	0x20000fb0

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_Delay+0x44>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000020 	.word	0x20000020

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	db0b      	blt.n	80025f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <__NVIC_EnableIRQ+0x38>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2001      	movs	r0, #1
 80025ea:	fa00 f202 	lsl.w	r2, r0, r2
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000e100 	.word	0xe000e100

08002604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	2b00      	cmp	r3, #0
 8002616:	db0a      	blt.n	800262e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	490c      	ldr	r1, [pc, #48]	; (8002650 <__NVIC_SetPriority+0x4c>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	440b      	add	r3, r1
 8002628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800262c:	e00a      	b.n	8002644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4908      	ldr	r1, [pc, #32]	; (8002654 <__NVIC_SetPriority+0x50>)
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	3b04      	subs	r3, #4
 800263c:	0112      	lsls	r2, r2, #4
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	440b      	add	r3, r1
 8002642:	761a      	strb	r2, [r3, #24]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f1c3 0307 	rsb	r3, r3, #7
 8002672:	2b04      	cmp	r3, #4
 8002674:	bf28      	it	cs
 8002676:	2304      	movcs	r3, #4
 8002678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3304      	adds	r3, #4
 800267e:	2b06      	cmp	r3, #6
 8002680:	d902      	bls.n	8002688 <NVIC_EncodePriority+0x30>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3b03      	subs	r3, #3
 8002686:	e000      	b.n	800268a <NVIC_EncodePriority+0x32>
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	43d9      	mvns	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	4313      	orrs	r3, r2
         );
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d0:	d301      	bcc.n	80026d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00f      	b.n	80026f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <SysTick_Config+0x40>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026de:	210f      	movs	r1, #15
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e4:	f7ff ff8e 	bl	8002604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <SysTick_Config+0x40>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <SysTick_Config+0x40>)
 80026f0:	2207      	movs	r2, #7
 80026f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	e000e010 	.word	0xe000e010

08002704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff29 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800272c:	f7ff ff3e 	bl	80025ac <__NVIC_GetPriorityGrouping>
 8002730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	6978      	ldr	r0, [r7, #20]
 8002738:	f7ff ff8e 	bl	8002658 <NVIC_EncodePriority>
 800273c:	4602      	mov	r2, r0
 800273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff5d 	bl	8002604 <__NVIC_SetPriority>
}
 800274a:	bf00      	nop
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff31 	bl	80025c8 <__NVIC_EnableIRQ>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ffa2 	bl	80026c0 <SysTick_Config>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff feb6 	bl	8002504 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e099      	b.n	80028d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c4:	e00f      	b.n	80027e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c6:	f7ff fe9d 	bl	8002504 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d908      	bls.n	80027e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e078      	b.n	80028d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1e8      	bne.n	80027c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <HAL_DMA_Init+0x158>)
 8002800:	4013      	ands	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002812:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2b04      	cmp	r3, #4
 800283e:	d107      	bne.n	8002850 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002848:	4313      	orrs	r3, r2
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f023 0307 	bic.w	r3, r3, #7
 8002866:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2b04      	cmp	r3, #4
 8002878:	d117      	bne.n	80028aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00e      	beq.n	80028aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 fa6f 	bl	8002d70 <DMA_CheckFifoParam>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028a6:	2301      	movs	r3, #1
 80028a8:	e016      	b.n	80028d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fa26 	bl	8002d04 <DMA_CalcBaseAndBitshift>
 80028b8:	4603      	mov	r3, r0
 80028ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	223f      	movs	r2, #63	; 0x3f
 80028c2:	409a      	lsls	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	f010803f 	.word	0xf010803f

080028e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_DMA_Start_IT+0x26>
 8002906:	2302      	movs	r3, #2
 8002908:	e040      	b.n	800298c <HAL_DMA_Start_IT+0xa8>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d12f      	bne.n	800297e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2202      	movs	r2, #2
 8002922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f9b8 	bl	8002ca8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	223f      	movs	r2, #63	; 0x3f
 800293e:	409a      	lsls	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0216 	orr.w	r2, r2, #22
 8002952:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0208 	orr.w	r2, r2, #8
 800296a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	e005      	b.n	800298a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029a0:	4b92      	ldr	r3, [pc, #584]	; (8002bec <HAL_DMA_IRQHandler+0x258>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a92      	ldr	r2, [pc, #584]	; (8002bf0 <HAL_DMA_IRQHandler+0x25c>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0a9b      	lsrs	r3, r3, #10
 80029ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	2208      	movs	r2, #8
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4013      	ands	r3, r2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d01a      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d013      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0204 	bic.w	r2, r2, #4
 80029e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2208      	movs	r2, #8
 80029ee:	409a      	lsls	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	2201      	movs	r2, #1
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	2201      	movs	r2, #1
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d012      	beq.n	8002a6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2204      	movs	r2, #4
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a64:	f043 0204 	orr.w	r2, r3, #4
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	2210      	movs	r2, #16
 8002a72:	409a      	lsls	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d043      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d03c      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8e:	2210      	movs	r2, #16
 8002a90:	409a      	lsls	r2, r3
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d018      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d024      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
 8002ac2:	e01f      	b.n	8002b04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
 8002ad4:	e016      	b.n	8002b04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0208 	bic.w	r2, r2, #8
 8002af2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	2220      	movs	r2, #32
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 808e 	beq.w	8002c32 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8086 	beq.w	8002c32 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b05      	cmp	r3, #5
 8002b3c:	d136      	bne.n	8002bac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0216 	bic.w	r2, r2, #22
 8002b4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <HAL_DMA_IRQHandler+0x1da>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d007      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0208 	bic.w	r2, r2, #8
 8002b7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b82:	223f      	movs	r2, #63	; 0x3f
 8002b84:	409a      	lsls	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d07d      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
        }
        return;
 8002baa:	e078      	b.n	8002c9e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01c      	beq.n	8002bf4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d108      	bne.n	8002bda <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d030      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	4798      	blx	r3
 8002bd8:	e02b      	b.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d027      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	4798      	blx	r3
 8002bea:	e022      	b.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
 8002bec:	20000018 	.word	0x20000018
 8002bf0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10f      	bne.n	8002c22 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0210 	bic.w	r2, r2, #16
 8002c10:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d032      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d022      	beq.n	8002c8c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2205      	movs	r2, #5
 8002c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0201 	bic.w	r2, r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	3301      	adds	r3, #1
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d307      	bcc.n	8002c7a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1f2      	bne.n	8002c5e <HAL_DMA_IRQHandler+0x2ca>
 8002c78:	e000      	b.n	8002c7c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c7a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d005      	beq.n	8002ca0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e000      	b.n	8002ca0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c9e:	bf00      	nop
    }
  }
}
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop

08002ca8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d108      	bne.n	8002ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ce6:	e007      	b.n	8002cf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	60da      	str	r2, [r3, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	3b10      	subs	r3, #16
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <DMA_CalcBaseAndBitshift+0x64>)
 8002d16:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d1e:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <DMA_CalcBaseAndBitshift+0x68>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4413      	add	r3, r2
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d909      	bls.n	8002d46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d3a:	f023 0303 	bic.w	r3, r3, #3
 8002d3e:	1d1a      	adds	r2, r3, #4
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58
 8002d44:	e007      	b.n	8002d56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d4e:	f023 0303 	bic.w	r3, r3, #3
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	aaaaaaab 	.word	0xaaaaaaab
 8002d6c:	08006494 	.word	0x08006494

08002d70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d11f      	bne.n	8002dca <DMA_CheckFifoParam+0x5a>
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d856      	bhi.n	8002e3e <DMA_CheckFifoParam+0xce>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <DMA_CheckFifoParam+0x28>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002da9 	.word	0x08002da9
 8002d9c:	08002dbb 	.word	0x08002dbb
 8002da0:	08002da9 	.word	0x08002da9
 8002da4:	08002e3f 	.word	0x08002e3f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d046      	beq.n	8002e42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db8:	e043      	b.n	8002e42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dc2:	d140      	bne.n	8002e46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc8:	e03d      	b.n	8002e46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd2:	d121      	bne.n	8002e18 <DMA_CheckFifoParam+0xa8>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d837      	bhi.n	8002e4a <DMA_CheckFifoParam+0xda>
 8002dda:	a201      	add	r2, pc, #4	; (adr r2, 8002de0 <DMA_CheckFifoParam+0x70>)
 8002ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de0:	08002df1 	.word	0x08002df1
 8002de4:	08002df7 	.word	0x08002df7
 8002de8:	08002df1 	.word	0x08002df1
 8002dec:	08002e09 	.word	0x08002e09
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
      break;
 8002df4:	e030      	b.n	8002e58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d025      	beq.n	8002e4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e06:	e022      	b.n	8002e4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e10:	d11f      	bne.n	8002e52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e16:	e01c      	b.n	8002e52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d903      	bls.n	8002e26 <DMA_CheckFifoParam+0xb6>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b03      	cmp	r3, #3
 8002e22:	d003      	beq.n	8002e2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e24:	e018      	b.n	8002e58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2a:	e015      	b.n	8002e58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d00e      	beq.n	8002e56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e3c:	e00b      	b.n	8002e56 <DMA_CheckFifoParam+0xe6>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e00a      	b.n	8002e58 <DMA_CheckFifoParam+0xe8>
      break;
 8002e42:	bf00      	nop
 8002e44:	e008      	b.n	8002e58 <DMA_CheckFifoParam+0xe8>
      break;
 8002e46:	bf00      	nop
 8002e48:	e006      	b.n	8002e58 <DMA_CheckFifoParam+0xe8>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e004      	b.n	8002e58 <DMA_CheckFifoParam+0xe8>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e002      	b.n	8002e58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e52:	bf00      	nop
 8002e54:	e000      	b.n	8002e58 <DMA_CheckFifoParam+0xe8>
      break;
 8002e56:	bf00      	nop
    }
  } 
  
  return status; 
 8002e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop

08002e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e159      	b.n	8003138 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e84:	2201      	movs	r2, #1
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f040 8148 	bne.w	8003132 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d005      	beq.n	8002eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d130      	bne.n	8002f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	091b      	lsrs	r3, r3, #4
 8002f06:	f003 0201 	and.w	r2, r3, #1
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0303 	and.w	r3, r3, #3
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d017      	beq.n	8002f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	2203      	movs	r2, #3
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d123      	bne.n	8002fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	08da      	lsrs	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3208      	adds	r2, #8
 8002f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	220f      	movs	r2, #15
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	43db      	mvns	r3, r3
 8002f82:	69ba      	ldr	r2, [r7, #24]
 8002f84:	4013      	ands	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	08da      	lsrs	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3208      	adds	r2, #8
 8002fa6:	69b9      	ldr	r1, [r7, #24]
 8002fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0203 	and.w	r2, r3, #3
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80a2 	beq.w	8003132 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	4b57      	ldr	r3, [pc, #348]	; (8003150 <HAL_GPIO_Init+0x2e8>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	4a56      	ldr	r2, [pc, #344]	; (8003150 <HAL_GPIO_Init+0x2e8>)
 8002ff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ffe:	4b54      	ldr	r3, [pc, #336]	; (8003150 <HAL_GPIO_Init+0x2e8>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800300a:	4a52      	ldr	r2, [pc, #328]	; (8003154 <HAL_GPIO_Init+0x2ec>)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	3302      	adds	r3, #2
 8003012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	220f      	movs	r2, #15
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a49      	ldr	r2, [pc, #292]	; (8003158 <HAL_GPIO_Init+0x2f0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d019      	beq.n	800306a <HAL_GPIO_Init+0x202>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a48      	ldr	r2, [pc, #288]	; (800315c <HAL_GPIO_Init+0x2f4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d013      	beq.n	8003066 <HAL_GPIO_Init+0x1fe>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a47      	ldr	r2, [pc, #284]	; (8003160 <HAL_GPIO_Init+0x2f8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d00d      	beq.n	8003062 <HAL_GPIO_Init+0x1fa>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a46      	ldr	r2, [pc, #280]	; (8003164 <HAL_GPIO_Init+0x2fc>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d007      	beq.n	800305e <HAL_GPIO_Init+0x1f6>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a45      	ldr	r2, [pc, #276]	; (8003168 <HAL_GPIO_Init+0x300>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d101      	bne.n	800305a <HAL_GPIO_Init+0x1f2>
 8003056:	2304      	movs	r3, #4
 8003058:	e008      	b.n	800306c <HAL_GPIO_Init+0x204>
 800305a:	2307      	movs	r3, #7
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x204>
 800305e:	2303      	movs	r3, #3
 8003060:	e004      	b.n	800306c <HAL_GPIO_Init+0x204>
 8003062:	2302      	movs	r3, #2
 8003064:	e002      	b.n	800306c <HAL_GPIO_Init+0x204>
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <HAL_GPIO_Init+0x204>
 800306a:	2300      	movs	r3, #0
 800306c:	69fa      	ldr	r2, [r7, #28]
 800306e:	f002 0203 	and.w	r2, r2, #3
 8003072:	0092      	lsls	r2, r2, #2
 8003074:	4093      	lsls	r3, r2
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800307c:	4935      	ldr	r1, [pc, #212]	; (8003154 <HAL_GPIO_Init+0x2ec>)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	089b      	lsrs	r3, r3, #2
 8003082:	3302      	adds	r3, #2
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800308a:	4b38      	ldr	r3, [pc, #224]	; (800316c <HAL_GPIO_Init+0x304>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030ae:	4a2f      	ldr	r2, [pc, #188]	; (800316c <HAL_GPIO_Init+0x304>)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030b4:	4b2d      	ldr	r3, [pc, #180]	; (800316c <HAL_GPIO_Init+0x304>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d8:	4a24      	ldr	r2, [pc, #144]	; (800316c <HAL_GPIO_Init+0x304>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030de:	4b23      	ldr	r3, [pc, #140]	; (800316c <HAL_GPIO_Init+0x304>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003102:	4a1a      	ldr	r2, [pc, #104]	; (800316c <HAL_GPIO_Init+0x304>)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003108:	4b18      	ldr	r3, [pc, #96]	; (800316c <HAL_GPIO_Init+0x304>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800312c:	4a0f      	ldr	r2, [pc, #60]	; (800316c <HAL_GPIO_Init+0x304>)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	3301      	adds	r3, #1
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	2b0f      	cmp	r3, #15
 800313c:	f67f aea2 	bls.w	8002e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003140:	bf00      	nop
 8003142:	bf00      	nop
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	40013800 	.word	0x40013800
 8003158:	40020000 	.word	0x40020000
 800315c:	40020400 	.word	0x40020400
 8003160:	40020800 	.word	0x40020800
 8003164:	40020c00 	.word	0x40020c00
 8003168:	40021000 	.word	0x40021000
 800316c:	40013c00 	.word	0x40013c00

08003170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003170:	b480      	push	{r7}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	887b      	ldrh	r3, [r7, #2]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
 800318c:	e001      	b.n	8003192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
 80031ac:	4613      	mov	r3, r2
 80031ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b0:	787b      	ldrb	r3, [r7, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031bc:	e003      	b.n	80031c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	041a      	lsls	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	619a      	str	r2, [r3, #24]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031de:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d006      	beq.n	80031f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f806 	bl	8003204 <HAL_GPIO_EXTI_Callback>
  }
}
 80031f8:	bf00      	nop
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40013c00 	.word	0x40013c00

08003204 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
	...

0800321c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e128      	b.n	8003480 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a90      	ldr	r2, [pc, #576]	; (8003488 <HAL_I2S_Init+0x26c>)
 8003246:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fe ff63 	bl	8002114 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003264:	f023 030f 	bic.w	r3, r3, #15
 8003268:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2202      	movs	r2, #2
 8003270:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d060      	beq.n	800333c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d102      	bne.n	8003288 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003282:	2310      	movs	r3, #16
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e001      	b.n	800328c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003288:	2320      	movs	r3, #32
 800328a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b20      	cmp	r3, #32
 8003292:	d802      	bhi.n	800329a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800329a:	2001      	movs	r0, #1
 800329c:	f001 fa5e 	bl	800475c <HAL_RCCEx_GetPeriphCLKFreq>
 80032a0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032aa:	d125      	bne.n	80032f8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d010      	beq.n	80032d6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d0:	3305      	adds	r3, #5
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	e01f      	b.n	8003316 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e0:	4613      	mov	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	461a      	mov	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	3305      	adds	r3, #5
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	e00e      	b.n	8003316 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	461a      	mov	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	3305      	adds	r3, #5
 8003314:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4a5c      	ldr	r2, [pc, #368]	; (800348c <HAL_I2S_Init+0x270>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	08db      	lsrs	r3, r3, #3
 8003320:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e003      	b.n	8003344 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800333c:	2302      	movs	r3, #2
 800333e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d902      	bls.n	8003350 <HAL_I2S_Init+0x134>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	2bff      	cmp	r3, #255	; 0xff
 800334e:	d907      	bls.n	8003360 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	f043 0210 	orr.w	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e08f      	b.n	8003480 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	ea42 0103 	orr.w	r1, r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	430a      	orrs	r2, r1
 8003372:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800337e:	f023 030f 	bic.w	r3, r3, #15
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6851      	ldr	r1, [r2, #4]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6892      	ldr	r2, [r2, #8]
 800338a:	4311      	orrs	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	68d2      	ldr	r2, [r2, #12]
 8003390:	4311      	orrs	r1, r2
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	6992      	ldr	r2, [r2, #24]
 8003396:	430a      	orrs	r2, r1
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d161      	bne.n	8003470 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a38      	ldr	r2, [pc, #224]	; (8003490 <HAL_I2S_Init+0x274>)
 80033b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a37      	ldr	r2, [pc, #220]	; (8003494 <HAL_I2S_Init+0x278>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_I2S_Init+0x1a4>
 80033bc:	4b36      	ldr	r3, [pc, #216]	; (8003498 <HAL_I2S_Init+0x27c>)
 80033be:	e001      	b.n	80033c4 <HAL_I2S_Init+0x1a8>
 80033c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6812      	ldr	r2, [r2, #0]
 80033ca:	4932      	ldr	r1, [pc, #200]	; (8003494 <HAL_I2S_Init+0x278>)
 80033cc:	428a      	cmp	r2, r1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2S_Init+0x1b8>
 80033d0:	4a31      	ldr	r2, [pc, #196]	; (8003498 <HAL_I2S_Init+0x27c>)
 80033d2:	e001      	b.n	80033d8 <HAL_I2S_Init+0x1bc>
 80033d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033dc:	f023 030f 	bic.w	r3, r3, #15
 80033e0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <HAL_I2S_Init+0x278>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_I2S_Init+0x1d4>
 80033ec:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <HAL_I2S_Init+0x27c>)
 80033ee:	e001      	b.n	80033f4 <HAL_I2S_Init+0x1d8>
 80033f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f4:	2202      	movs	r2, #2
 80033f6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a25      	ldr	r2, [pc, #148]	; (8003494 <HAL_I2S_Init+0x278>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d101      	bne.n	8003406 <HAL_I2S_Init+0x1ea>
 8003402:	4b25      	ldr	r3, [pc, #148]	; (8003498 <HAL_I2S_Init+0x27c>)
 8003404:	e001      	b.n	800340a <HAL_I2S_Init+0x1ee>
 8003406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003416:	d003      	beq.n	8003420 <HAL_I2S_Init+0x204>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d103      	bne.n	8003428 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	e001      	b.n	800342c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003436:	4313      	orrs	r3, r2
 8003438:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003440:	4313      	orrs	r3, r2
 8003442:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800344a:	4313      	orrs	r3, r2
 800344c:	b29a      	uxth	r2, r3
 800344e:	897b      	ldrh	r3, [r7, #10]
 8003450:	4313      	orrs	r3, r2
 8003452:	b29b      	uxth	r3, r3
 8003454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003458:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <HAL_I2S_Init+0x278>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d101      	bne.n	8003468 <HAL_I2S_Init+0x24c>
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <HAL_I2S_Init+0x27c>)
 8003466:	e001      	b.n	800346c <HAL_I2S_Init+0x250>
 8003468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800346c:	897a      	ldrh	r2, [r7, #10]
 800346e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3720      	adds	r7, #32
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	0800378d 	.word	0x0800378d
 800348c:	cccccccd 	.word	0xcccccccd
 8003490:	080038a1 	.word	0x080038a1
 8003494:	40003800 	.word	0x40003800
 8003498:	40003400 	.word	0x40003400

0800349c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_I2S_Transmit_DMA+0x1a>
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e08e      	b.n	80035d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_I2S_Transmit_DMA+0x2e>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e086      	b.n	80035d8 <HAL_I2S_Transmit_DMA+0x13c>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d005      	beq.n	80034ea <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
 80034e8:	e076      	b.n	80035d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d002      	beq.n	8003516 <HAL_I2S_Transmit_DMA+0x7a>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b05      	cmp	r3, #5
 8003514:	d10a      	bne.n	800352c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8003516:	88fb      	ldrh	r3, [r7, #6]
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	; 0x2a
 800352a:	e005      	b.n	8003538 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	88fa      	ldrh	r2, [r7, #6]
 8003530:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	88fa      	ldrh	r2, [r7, #6]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	4a28      	ldr	r2, [pc, #160]	; (80035e0 <HAL_I2S_Transmit_DMA+0x144>)
 800353e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	4a27      	ldr	r2, [pc, #156]	; (80035e4 <HAL_I2S_Transmit_DMA+0x148>)
 8003546:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	4a26      	ldr	r2, [pc, #152]	; (80035e8 <HAL_I2S_Transmit_DMA+0x14c>)
 800354e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003558:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003560:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003568:	f7ff f9bc 	bl	80028e4 <HAL_DMA_Start_IT>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00f      	beq.n	8003592 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	f043 0208 	orr.w	r2, r3, #8
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e022      	b.n	80035d8 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d107      	bne.n	80035b0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ae:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0202 	orr.w	r2, r2, #2
 80035cc:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	0800366b 	.word	0x0800366b
 80035e4:	08003629 	.word	0x08003629
 80035e8:	08003687 	.word	0x08003687

080035ec <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10e      	bne.n	800365c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685a      	ldr	r2, [r3, #4]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0202 	bic.w	r2, r2, #2
 800364c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7fe fb31 	bl	8001cc4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f7ff ffb7 	bl	80035ec <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800367e:	bf00      	nop
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0203 	bic.w	r2, r2, #3
 80036a2:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2200      	movs	r2, #0
 80036ae:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	f043 0208 	orr.w	r2, r3, #8
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff ffa5 	bl	8003614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	881a      	ldrh	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	1c9a      	adds	r2, r3, #2
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10e      	bne.n	8003726 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003716:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7fe facf 	bl	8001cc4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	b292      	uxth	r2, r2
 8003742:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	1c9a      	adds	r2, r3, #2
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10e      	bne.n	8003784 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003774:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ff3e 	bl	8003600 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	d13a      	bne.n	800381e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d109      	bne.n	80037c6 <I2S_IRQHandler+0x3a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037bc:	2b40      	cmp	r3, #64	; 0x40
 80037be:	d102      	bne.n	80037c6 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff ffb4 	bl	800372e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d126      	bne.n	800381e <I2S_IRQHandler+0x92>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b20      	cmp	r3, #32
 80037dc:	d11f      	bne.n	800381e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037ec:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003810:	f043 0202 	orr.w	r2, r3, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fefb 	bl	8003614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b03      	cmp	r3, #3
 8003828:	d136      	bne.n	8003898 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d109      	bne.n	8003848 <I2S_IRQHandler+0xbc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d102      	bne.n	8003848 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff ff45 	bl	80036d2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b08      	cmp	r3, #8
 8003850:	d122      	bne.n	8003898 <I2S_IRQHandler+0x10c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b20      	cmp	r3, #32
 800385e:	d11b      	bne.n	8003898 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800386e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f043 0204 	orr.w	r2, r3, #4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff febe 	bl	8003614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003898:	bf00      	nop
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4aa2      	ldr	r2, [pc, #648]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80038ba:	4ba2      	ldr	r3, [pc, #648]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038bc:	e001      	b.n	80038c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80038be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a9b      	ldr	r2, [pc, #620]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80038d8:	4b9a      	ldr	r3, [pc, #616]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038da:	e001      	b.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ec:	d004      	beq.n	80038f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 8099 	bne.w	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d107      	bne.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f925 	bl	8003b5c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d107      	bne.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f9c8 	bl	8003cbc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d13a      	bne.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d035      	beq.n	80039ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a7e      	ldr	r2, [pc, #504]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800394a:	4b7e      	ldr	r3, [pc, #504]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800394c:	e001      	b.n	8003952 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800394e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4979      	ldr	r1, [pc, #484]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800395a:	428b      	cmp	r3, r1
 800395c:	d101      	bne.n	8003962 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800395e:	4b79      	ldr	r3, [pc, #484]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003960:	e001      	b.n	8003966 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003966:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800396a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800397a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f043 0202 	orr.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff fe34 	bl	8003614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	f040 80be 	bne.w	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80b8 	beq.w	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a59      	ldr	r2, [pc, #356]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d101      	bne.n	80039e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039de:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039e0:	e001      	b.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4954      	ldr	r1, [pc, #336]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039ee:	428b      	cmp	r3, r1
 80039f0:	d101      	bne.n	80039f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039f2:	4b54      	ldr	r3, [pc, #336]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039f4:	e001      	b.n	80039fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0204 	orr.w	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff fdf6 	bl	8003614 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a28:	e084      	b.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f8be 	bl	8003bc0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f8fd 	bl	8003c58 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d12f      	bne.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02a      	beq.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a80:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2e      	ldr	r2, [pc, #184]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a8c:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a8e:	e001      	b.n	8003a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4929      	ldr	r1, [pc, #164]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003aa0:	4b28      	ldr	r3, [pc, #160]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003aa2:	e001      	b.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	f043 0202 	orr.w	r2, r3, #2
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff fda6 	bl	8003614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d131      	bne.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d02c      	beq.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ae6:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ae8:	e001      	b.n	8003aee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4912      	ldr	r1, [pc, #72]	; (8003b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003af6:	428b      	cmp	r3, r1
 8003af8:	d101      	bne.n	8003afe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003afc:	e001      	b.n	8003b02 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003afe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b16:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f043 0204 	orr.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff fd71 	bl	8003614 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b32:	e000      	b.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b34:	bf00      	nop
}
 8003b36:	bf00      	nop
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40003800 	.word	0x40003800
 8003b44:	40003400 	.word	0x40003400

08003b48 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c99      	adds	r1, r3, #2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6251      	str	r1, [r2, #36]	; 0x24
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d113      	bne.n	8003bb6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ffc9 	bl	8003b48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	1c99      	adds	r1, r3, #2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6251      	str	r1, [r2, #36]	; 0x24
 8003bd2:	8819      	ldrh	r1, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a1d      	ldr	r2, [pc, #116]	; (8003c50 <I2SEx_TxISR_I2SExt+0x90>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <I2SEx_TxISR_I2SExt+0x22>
 8003bde:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <I2SEx_TxISR_I2SExt+0x94>)
 8003be0:	e001      	b.n	8003be6 <I2SEx_TxISR_I2SExt+0x26>
 8003be2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003be6:	460a      	mov	r2, r1
 8003be8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d121      	bne.n	8003c46 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a12      	ldr	r2, [pc, #72]	; (8003c50 <I2SEx_TxISR_I2SExt+0x90>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d101      	bne.n	8003c10 <I2SEx_TxISR_I2SExt+0x50>
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <I2SEx_TxISR_I2SExt+0x94>)
 8003c0e:	e001      	b.n	8003c14 <I2SEx_TxISR_I2SExt+0x54>
 8003c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	490d      	ldr	r1, [pc, #52]	; (8003c50 <I2SEx_TxISR_I2SExt+0x90>)
 8003c1c:	428b      	cmp	r3, r1
 8003c1e:	d101      	bne.n	8003c24 <I2SEx_TxISR_I2SExt+0x64>
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <I2SEx_TxISR_I2SExt+0x94>)
 8003c22:	e001      	b.n	8003c28 <I2SEx_TxISR_I2SExt+0x68>
 8003c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff81 	bl	8003b48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40003800 	.word	0x40003800
 8003c54:	40003400 	.word	0x40003400

08003c58 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68d8      	ldr	r0, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	1c99      	adds	r1, r3, #2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c70:	b282      	uxth	r2, r0
 8003c72:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d113      	bne.n	8003cb4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c9a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff4a 	bl	8003b48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <I2SEx_RxISR_I2SExt+0x90>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d101      	bne.n	8003cd2 <I2SEx_RxISR_I2SExt+0x16>
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <I2SEx_RxISR_I2SExt+0x94>)
 8003cd0:	e001      	b.n	8003cd6 <I2SEx_RxISR_I2SExt+0x1a>
 8003cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd6:	68d8      	ldr	r0, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	1c99      	adds	r1, r3, #2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ce2:	b282      	uxth	r2, r0
 8003ce4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d121      	bne.n	8003d42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <I2SEx_RxISR_I2SExt+0x90>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d101      	bne.n	8003d0c <I2SEx_RxISR_I2SExt+0x50>
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <I2SEx_RxISR_I2SExt+0x94>)
 8003d0a:	e001      	b.n	8003d10 <I2SEx_RxISR_I2SExt+0x54>
 8003d0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	490d      	ldr	r1, [pc, #52]	; (8003d4c <I2SEx_RxISR_I2SExt+0x90>)
 8003d18:	428b      	cmp	r3, r1
 8003d1a:	d101      	bne.n	8003d20 <I2SEx_RxISR_I2SExt+0x64>
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <I2SEx_RxISR_I2SExt+0x94>)
 8003d1e:	e001      	b.n	8003d24 <I2SEx_RxISR_I2SExt+0x68>
 8003d20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d106      	bne.n	8003d42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff03 	bl	8003b48 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40003800 	.word	0x40003800
 8003d50:	40003400 	.word	0x40003400

08003d54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e264      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d075      	beq.n	8003e5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d72:	4ba3      	ldr	r3, [pc, #652]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d00c      	beq.n	8003d98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7e:	4ba0      	ldr	r3, [pc, #640]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d112      	bne.n	8003db0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d8a:	4b9d      	ldr	r3, [pc, #628]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d96:	d10b      	bne.n	8003db0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	4b99      	ldr	r3, [pc, #612]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d05b      	beq.n	8003e5c <HAL_RCC_OscConfig+0x108>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d157      	bne.n	8003e5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e23f      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x74>
 8003dba:	4b91      	ldr	r3, [pc, #580]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a90      	ldr	r2, [pc, #576]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e01d      	b.n	8003e04 <HAL_RCC_OscConfig+0xb0>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd0:	d10c      	bne.n	8003dec <HAL_RCC_OscConfig+0x98>
 8003dd2:	4b8b      	ldr	r3, [pc, #556]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a8a      	ldr	r2, [pc, #552]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a87      	ldr	r2, [pc, #540]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e00b      	b.n	8003e04 <HAL_RCC_OscConfig+0xb0>
 8003dec:	4b84      	ldr	r3, [pc, #528]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a83      	ldr	r2, [pc, #524]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a80      	ldr	r2, [pc, #512]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d013      	beq.n	8003e34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0c:	f7fe fb7a 	bl	8002504 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e14:	f7fe fb76 	bl	8002504 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e204      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCC_OscConfig+0xc0>
 8003e32:	e014      	b.n	8003e5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe fb66 	bl	8002504 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fb62 	bl	8002504 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	; 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e1f0      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e4e:	4b6c      	ldr	r3, [pc, #432]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0xe8>
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d063      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e6a:	4b65      	ldr	r3, [pc, #404]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e76:	4b62      	ldr	r3, [pc, #392]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d11c      	bne.n	8003ebc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e82:	4b5f      	ldr	r3, [pc, #380]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d116      	bne.n	8003ebc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x152>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d001      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e1c4      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b56      	ldr	r3, [pc, #344]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4952      	ldr	r1, [pc, #328]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eba:	e03a      	b.n	8003f32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d020      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec4:	4b4f      	ldr	r3, [pc, #316]	; (8004004 <HAL_RCC_OscConfig+0x2b0>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fe fb1b 	bl	8002504 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fe fb17 	bl	8002504 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e1a5      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee4:	4b46      	ldr	r3, [pc, #280]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b43      	ldr	r3, [pc, #268]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4940      	ldr	r1, [pc, #256]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	600b      	str	r3, [r1, #0]
 8003f04:	e015      	b.n	8003f32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b3f      	ldr	r3, [pc, #252]	; (8004004 <HAL_RCC_OscConfig+0x2b0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fafa 	bl	8002504 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f14:	f7fe faf6 	bl	8002504 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e184      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f26:	4b36      	ldr	r3, [pc, #216]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d030      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d016      	beq.n	8003f74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f46:	4b30      	ldr	r3, [pc, #192]	; (8004008 <HAL_RCC_OscConfig+0x2b4>)
 8003f48:	2201      	movs	r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4c:	f7fe fada 	bl	8002504 <HAL_GetTick>
 8003f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f54:	f7fe fad6 	bl	8002504 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e164      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f66:	4b26      	ldr	r3, [pc, #152]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x200>
 8003f72:	e015      	b.n	8003fa0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <HAL_RCC_OscConfig+0x2b4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7a:	f7fe fac3 	bl	8002504 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f82:	f7fe fabf 	bl	8002504 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e14d      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f0      	bne.n	8003f82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 80a0 	beq.w	80040ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fce:	4b0c      	ldr	r3, [pc, #48]	; (8004000 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_OscConfig+0x2b8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d121      	bne.n	800402e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_RCC_OscConfig+0x2b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a07      	ldr	r2, [pc, #28]	; (800400c <HAL_RCC_OscConfig+0x2b8>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe fa85 	bl	8002504 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	e011      	b.n	8004022 <HAL_RCC_OscConfig+0x2ce>
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800
 8004004:	42470000 	.word	0x42470000
 8004008:	42470e80 	.word	0x42470e80
 800400c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004010:	f7fe fa78 	bl	8002504 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e106      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004022:	4b85      	ldr	r3, [pc, #532]	; (8004238 <HAL_RCC_OscConfig+0x4e4>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x2f0>
 8004036:	4b81      	ldr	r3, [pc, #516]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	4a80      	ldr	r2, [pc, #512]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6713      	str	r3, [r2, #112]	; 0x70
 8004042:	e01c      	b.n	800407e <HAL_RCC_OscConfig+0x32a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b05      	cmp	r3, #5
 800404a:	d10c      	bne.n	8004066 <HAL_RCC_OscConfig+0x312>
 800404c:	4b7b      	ldr	r3, [pc, #492]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	4a7a      	ldr	r2, [pc, #488]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004052:	f043 0304 	orr.w	r3, r3, #4
 8004056:	6713      	str	r3, [r2, #112]	; 0x70
 8004058:	4b78      	ldr	r3, [pc, #480]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405c:	4a77      	ldr	r2, [pc, #476]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6713      	str	r3, [r2, #112]	; 0x70
 8004064:	e00b      	b.n	800407e <HAL_RCC_OscConfig+0x32a>
 8004066:	4b75      	ldr	r3, [pc, #468]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	4a74      	ldr	r2, [pc, #464]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	6713      	str	r3, [r2, #112]	; 0x70
 8004072:	4b72      	ldr	r3, [pc, #456]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	4a71      	ldr	r2, [pc, #452]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004078:	f023 0304 	bic.w	r3, r3, #4
 800407c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d015      	beq.n	80040b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fe fa3d 	bl	8002504 <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fe fa39 	bl	8002504 <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0c5      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0ee      	beq.n	800408e <HAL_RCC_OscConfig+0x33a>
 80040b0:	e014      	b.n	80040dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040b2:	f7fe fa27 	bl	8002504 <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040b8:	e00a      	b.n	80040d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ba:	f7fe fa23 	bl	8002504 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e0af      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d0:	4b5a      	ldr	r3, [pc, #360]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1ee      	bne.n	80040ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d105      	bne.n	80040ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e2:	4b56      	ldr	r3, [pc, #344]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	4a55      	ldr	r2, [pc, #340]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 809b 	beq.w	800422e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 030c 	and.w	r3, r3, #12
 8004100:	2b08      	cmp	r3, #8
 8004102:	d05c      	beq.n	80041be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d141      	bne.n	8004190 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410c:	4b4c      	ldr	r3, [pc, #304]	; (8004240 <HAL_RCC_OscConfig+0x4ec>)
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fe f9f7 	bl	8002504 <HAL_GetTick>
 8004116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004118:	e008      	b.n	800412c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411a:	f7fe f9f3 	bl	8002504 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e081      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412c:	4b43      	ldr	r3, [pc, #268]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1f0      	bne.n	800411a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	431a      	orrs	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	019b      	lsls	r3, r3, #6
 8004148:	431a      	orrs	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	3b01      	subs	r3, #1
 8004152:	041b      	lsls	r3, r3, #16
 8004154:	431a      	orrs	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800415a:	061b      	lsls	r3, r3, #24
 800415c:	4937      	ldr	r1, [pc, #220]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004162:	4b37      	ldr	r3, [pc, #220]	; (8004240 <HAL_RCC_OscConfig+0x4ec>)
 8004164:	2201      	movs	r2, #1
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fe f9cc 	bl	8002504 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004170:	f7fe f9c8 	bl	8002504 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e056      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b2e      	ldr	r3, [pc, #184]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0f0      	beq.n	8004170 <HAL_RCC_OscConfig+0x41c>
 800418e:	e04e      	b.n	800422e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004190:	4b2b      	ldr	r3, [pc, #172]	; (8004240 <HAL_RCC_OscConfig+0x4ec>)
 8004192:	2200      	movs	r2, #0
 8004194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004196:	f7fe f9b5 	bl	8002504 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800419e:	f7fe f9b1 	bl	8002504 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e03f      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b0:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCC_OscConfig+0x44a>
 80041bc:	e037      	b.n	800422e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e032      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_RCC_OscConfig+0x4e8>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d028      	beq.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d121      	bne.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d11a      	bne.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041fa:	4013      	ands	r3, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004200:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004202:	4293      	cmp	r3, r2
 8004204:	d111      	bne.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d107      	bne.n	800422a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40007000 	.word	0x40007000
 800423c:	40023800 	.word	0x40023800
 8004240:	42470060 	.word	0x42470060

08004244 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0cc      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004258:	4b68      	ldr	r3, [pc, #416]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d90c      	bls.n	8004280 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b65      	ldr	r3, [pc, #404]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0b8      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004298:	4b59      	ldr	r3, [pc, #356]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4a58      	ldr	r2, [pc, #352]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b0:	4b53      	ldr	r3, [pc, #332]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4a52      	ldr	r2, [pc, #328]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042bc:	4b50      	ldr	r3, [pc, #320]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	494d      	ldr	r1, [pc, #308]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d044      	beq.n	8004364 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d119      	bne.n	8004322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e07f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d003      	beq.n	8004302 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d107      	bne.n	8004312 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004302:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e06f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004312:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e067      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004322:	4b37      	ldr	r3, [pc, #220]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f023 0203 	bic.w	r2, r3, #3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	4934      	ldr	r1, [pc, #208]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	4313      	orrs	r3, r2
 8004332:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004334:	f7fe f8e6 	bl	8002504 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433a:	e00a      	b.n	8004352 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433c:	f7fe f8e2 	bl	8002504 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f241 3288 	movw	r2, #5000	; 0x1388
 800434a:	4293      	cmp	r3, r2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e04f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004352:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 020c 	and.w	r2, r3, #12
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	429a      	cmp	r2, r3
 8004362:	d1eb      	bne.n	800433c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004364:	4b25      	ldr	r3, [pc, #148]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d20c      	bcs.n	800438c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004372:	4b22      	ldr	r3, [pc, #136]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_RCC_ClockConfig+0x1b8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e032      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4916      	ldr	r1, [pc, #88]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	490e      	ldr	r1, [pc, #56]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043ca:	f000 f821 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80043ce:	4602      	mov	r2, r0
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	490a      	ldr	r1, [pc, #40]	; (8004404 <HAL_RCC_ClockConfig+0x1c0>)
 80043dc:	5ccb      	ldrb	r3, [r1, r3]
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <HAL_RCC_ClockConfig+0x1c4>)
 80043e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_ClockConfig+0x1c8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe f846 	bl	800247c <HAL_InitTick>

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40023c00 	.word	0x40023c00
 8004400:	40023800 	.word	0x40023800
 8004404:	08006484 	.word	0x08006484
 8004408:	20000018 	.word	0x20000018
 800440c:	2000001c 	.word	0x2000001c

08004410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004410:	b5b0      	push	{r4, r5, r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004416:	2100      	movs	r1, #0
 8004418:	6079      	str	r1, [r7, #4]
 800441a:	2100      	movs	r1, #0
 800441c:	60f9      	str	r1, [r7, #12]
 800441e:	2100      	movs	r1, #0
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004422:	2100      	movs	r1, #0
 8004424:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004426:	4952      	ldr	r1, [pc, #328]	; (8004570 <HAL_RCC_GetSysClockFreq+0x160>)
 8004428:	6889      	ldr	r1, [r1, #8]
 800442a:	f001 010c 	and.w	r1, r1, #12
 800442e:	2908      	cmp	r1, #8
 8004430:	d00d      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x3e>
 8004432:	2908      	cmp	r1, #8
 8004434:	f200 8094 	bhi.w	8004560 <HAL_RCC_GetSysClockFreq+0x150>
 8004438:	2900      	cmp	r1, #0
 800443a:	d002      	beq.n	8004442 <HAL_RCC_GetSysClockFreq+0x32>
 800443c:	2904      	cmp	r1, #4
 800443e:	d003      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x38>
 8004440:	e08e      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004442:	4b4c      	ldr	r3, [pc, #304]	; (8004574 <HAL_RCC_GetSysClockFreq+0x164>)
 8004444:	60bb      	str	r3, [r7, #8]
       break;
 8004446:	e08e      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004448:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <HAL_RCC_GetSysClockFreq+0x168>)
 800444a:	60bb      	str	r3, [r7, #8]
      break;
 800444c:	e08b      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800444e:	4948      	ldr	r1, [pc, #288]	; (8004570 <HAL_RCC_GetSysClockFreq+0x160>)
 8004450:	6849      	ldr	r1, [r1, #4]
 8004452:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004456:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004458:	4945      	ldr	r1, [pc, #276]	; (8004570 <HAL_RCC_GetSysClockFreq+0x160>)
 800445a:	6849      	ldr	r1, [r1, #4]
 800445c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004460:	2900      	cmp	r1, #0
 8004462:	d024      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004464:	4942      	ldr	r1, [pc, #264]	; (8004570 <HAL_RCC_GetSysClockFreq+0x160>)
 8004466:	6849      	ldr	r1, [r1, #4]
 8004468:	0989      	lsrs	r1, r1, #6
 800446a:	4608      	mov	r0, r1
 800446c:	f04f 0100 	mov.w	r1, #0
 8004470:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004474:	f04f 0500 	mov.w	r5, #0
 8004478:	ea00 0204 	and.w	r2, r0, r4
 800447c:	ea01 0305 	and.w	r3, r1, r5
 8004480:	493d      	ldr	r1, [pc, #244]	; (8004578 <HAL_RCC_GetSysClockFreq+0x168>)
 8004482:	fb01 f003 	mul.w	r0, r1, r3
 8004486:	2100      	movs	r1, #0
 8004488:	fb01 f102 	mul.w	r1, r1, r2
 800448c:	1844      	adds	r4, r0, r1
 800448e:	493a      	ldr	r1, [pc, #232]	; (8004578 <HAL_RCC_GetSysClockFreq+0x168>)
 8004490:	fba2 0101 	umull	r0, r1, r2, r1
 8004494:	1863      	adds	r3, r4, r1
 8004496:	4619      	mov	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	461a      	mov	r2, r3
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	f7fc fb6c 	bl	8000b7c <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4613      	mov	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	e04a      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b30      	ldr	r3, [pc, #192]	; (8004570 <HAL_RCC_GetSysClockFreq+0x160>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	461a      	mov	r2, r3
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044be:	f04f 0100 	mov.w	r1, #0
 80044c2:	ea02 0400 	and.w	r4, r2, r0
 80044c6:	ea03 0501 	and.w	r5, r3, r1
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	014b      	lsls	r3, r1, #5
 80044d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80044dc:	0142      	lsls	r2, r0, #5
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	1b00      	subs	r0, r0, r4
 80044e4:	eb61 0105 	sbc.w	r1, r1, r5
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	f04f 0300 	mov.w	r3, #0
 80044f0:	018b      	lsls	r3, r1, #6
 80044f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80044f6:	0182      	lsls	r2, r0, #6
 80044f8:	1a12      	subs	r2, r2, r0
 80044fa:	eb63 0301 	sbc.w	r3, r3, r1
 80044fe:	f04f 0000 	mov.w	r0, #0
 8004502:	f04f 0100 	mov.w	r1, #0
 8004506:	00d9      	lsls	r1, r3, #3
 8004508:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800450c:	00d0      	lsls	r0, r2, #3
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	1912      	adds	r2, r2, r4
 8004514:	eb45 0303 	adc.w	r3, r5, r3
 8004518:	f04f 0000 	mov.w	r0, #0
 800451c:	f04f 0100 	mov.w	r1, #0
 8004520:	0299      	lsls	r1, r3, #10
 8004522:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004526:	0290      	lsls	r0, r2, #10
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4610      	mov	r0, r2
 800452e:	4619      	mov	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	461a      	mov	r2, r3
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	f7fc fb20 	bl	8000b7c <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4613      	mov	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_RCC_GetSysClockFreq+0x160>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	3301      	adds	r3, #1
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
 800455c:	60bb      	str	r3, [r7, #8]
      break;
 800455e:	e002      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004560:	4b04      	ldr	r3, [pc, #16]	; (8004574 <HAL_RCC_GetSysClockFreq+0x164>)
 8004562:	60bb      	str	r3, [r7, #8]
      break;
 8004564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004566:	68bb      	ldr	r3, [r7, #8]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bdb0      	pop	{r4, r5, r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	00f42400 	.word	0x00f42400
 8004578:	017d7840 	.word	0x017d7840

0800457c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d105      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d038      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045aa:	f7fd ffab 	bl	8002504 <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045b0:	e008      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045b2:	f7fd ffa7 	bl	8002504 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e0bd      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045c4:	4b61      	ldr	r3, [pc, #388]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f0      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	019b      	lsls	r3, r3, #6
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	071b      	lsls	r3, r3, #28
 80045e2:	495a      	ldr	r1, [pc, #360]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045ea:	4b57      	ldr	r3, [pc, #348]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045f0:	f7fd ff88 	bl	8002504 <HAL_GetTick>
 80045f4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045f8:	f7fd ff84 	bl	8002504 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e09a      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800460a:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 8083 	beq.w	800472a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	4b48      	ldr	r3, [pc, #288]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	4a47      	ldr	r2, [pc, #284]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004632:	6413      	str	r3, [r2, #64]	; 0x40
 8004634:	4b45      	ldr	r3, [pc, #276]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004640:	4b43      	ldr	r3, [pc, #268]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a42      	ldr	r2, [pc, #264]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800464c:	f7fd ff5a 	bl	8002504 <HAL_GetTick>
 8004650:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fd ff56 	bl	8002504 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e06c      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004666:	4b3a      	ldr	r3, [pc, #232]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004672:	4b36      	ldr	r3, [pc, #216]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d02f      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	429a      	cmp	r2, r3
 800468e:	d028      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004690:	4b2e      	ldr	r3, [pc, #184]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004698:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800469a:	4b2e      	ldr	r3, [pc, #184]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800469c:	2201      	movs	r2, #1
 800469e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046a0:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046a6:	4a29      	ldr	r2, [pc, #164]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d114      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fd ff24 	bl	8002504 <HAL_GetTick>
 80046bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046be:	e00a      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c0:	f7fd ff20 	bl	8002504 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e034      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d6:	4b1d      	ldr	r3, [pc, #116]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0ee      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ee:	d10d      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x190>
 80046f0:	4b16      	ldr	r3, [pc, #88]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004704:	4911      	ldr	r1, [pc, #68]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	4313      	orrs	r3, r2
 8004708:	608b      	str	r3, [r1, #8]
 800470a:	e005      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a0e      	ldr	r2, [pc, #56]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004716:	6093      	str	r3, [r2, #8]
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004724:	4909      	ldr	r1, [pc, #36]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	7d1a      	ldrb	r2, [r3, #20]
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800473c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	42470068 	.word	0x42470068
 800474c:	40023800 	.word	0x40023800
 8004750:	40007000 	.word	0x40007000
 8004754:	42470e40 	.word	0x42470e40
 8004758:	424711e0 	.word	0x424711e0

0800475c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004764:	2300      	movs	r3, #0
 8004766:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d140      	bne.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d005      	beq.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d131      	bne.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004790:	4b1f      	ldr	r3, [pc, #124]	; (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004792:	617b      	str	r3, [r7, #20]
          break;
 8004794:	e031      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004796:	4b1d      	ldr	r3, [pc, #116]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047a2:	d109      	bne.n	80047b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047a4:	4b19      	ldr	r3, [pc, #100]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ae:	4a19      	ldr	r2, [pc, #100]	; (8004814 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e008      	b.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80047b8:	4b14      	ldr	r3, [pc, #80]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047c2:	4a15      	ldr	r2, [pc, #84]	; (8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047ca:	4b10      	ldr	r3, [pc, #64]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d0:	099b      	lsrs	r3, r3, #6
 80047d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	fb02 f303 	mul.w	r3, r2, r3
 80047dc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047de:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	0f1b      	lsrs	r3, r3, #28
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]
          break;
 80047f2:	e002      	b.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
          break;
 80047f8:	bf00      	nop
        }
      }
      break;
 80047fa:	bf00      	nop
    }
  }
  return frequency;
 80047fc:	697b      	ldr	r3, [r7, #20]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
 8004810:	00bb8000 	.word	0x00bb8000
 8004814:	017d7840 	.word	0x017d7840
 8004818:	00f42400 	.word	0x00f42400

0800481c <__errno>:
 800481c:	4b01      	ldr	r3, [pc, #4]	; (8004824 <__errno+0x8>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000024 	.word	0x20000024

08004828 <__libc_init_array>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4d0d      	ldr	r5, [pc, #52]	; (8004860 <__libc_init_array+0x38>)
 800482c:	4c0d      	ldr	r4, [pc, #52]	; (8004864 <__libc_init_array+0x3c>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	2600      	movs	r6, #0
 8004834:	42a6      	cmp	r6, r4
 8004836:	d109      	bne.n	800484c <__libc_init_array+0x24>
 8004838:	4d0b      	ldr	r5, [pc, #44]	; (8004868 <__libc_init_array+0x40>)
 800483a:	4c0c      	ldr	r4, [pc, #48]	; (800486c <__libc_init_array+0x44>)
 800483c:	f001 fc86 	bl	800614c <_init>
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	2600      	movs	r6, #0
 8004846:	42a6      	cmp	r6, r4
 8004848:	d105      	bne.n	8004856 <__libc_init_array+0x2e>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004850:	4798      	blx	r3
 8004852:	3601      	adds	r6, #1
 8004854:	e7ee      	b.n	8004834 <__libc_init_array+0xc>
 8004856:	f855 3b04 	ldr.w	r3, [r5], #4
 800485a:	4798      	blx	r3
 800485c:	3601      	adds	r6, #1
 800485e:	e7f2      	b.n	8004846 <__libc_init_array+0x1e>
 8004860:	080066b0 	.word	0x080066b0
 8004864:	080066b0 	.word	0x080066b0
 8004868:	080066b0 	.word	0x080066b0
 800486c:	080066b4 	.word	0x080066b4

08004870 <memset>:
 8004870:	4402      	add	r2, r0
 8004872:	4603      	mov	r3, r0
 8004874:	4293      	cmp	r3, r2
 8004876:	d100      	bne.n	800487a <memset+0xa>
 8004878:	4770      	bx	lr
 800487a:	f803 1b01 	strb.w	r1, [r3], #1
 800487e:	e7f9      	b.n	8004874 <memset+0x4>

08004880 <siprintf>:
 8004880:	b40e      	push	{r1, r2, r3}
 8004882:	b500      	push	{lr}
 8004884:	b09c      	sub	sp, #112	; 0x70
 8004886:	ab1d      	add	r3, sp, #116	; 0x74
 8004888:	9002      	str	r0, [sp, #8]
 800488a:	9006      	str	r0, [sp, #24]
 800488c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004890:	4809      	ldr	r0, [pc, #36]	; (80048b8 <siprintf+0x38>)
 8004892:	9107      	str	r1, [sp, #28]
 8004894:	9104      	str	r1, [sp, #16]
 8004896:	4909      	ldr	r1, [pc, #36]	; (80048bc <siprintf+0x3c>)
 8004898:	f853 2b04 	ldr.w	r2, [r3], #4
 800489c:	9105      	str	r1, [sp, #20]
 800489e:	6800      	ldr	r0, [r0, #0]
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	a902      	add	r1, sp, #8
 80048a4:	f000 f868 	bl	8004978 <_svfiprintf_r>
 80048a8:	9b02      	ldr	r3, [sp, #8]
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	b01c      	add	sp, #112	; 0x70
 80048b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80048b4:	b003      	add	sp, #12
 80048b6:	4770      	bx	lr
 80048b8:	20000024 	.word	0x20000024
 80048bc:	ffff0208 	.word	0xffff0208

080048c0 <__ssputs_r>:
 80048c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	688e      	ldr	r6, [r1, #8]
 80048c6:	429e      	cmp	r6, r3
 80048c8:	4682      	mov	sl, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	4690      	mov	r8, r2
 80048ce:	461f      	mov	r7, r3
 80048d0:	d838      	bhi.n	8004944 <__ssputs_r+0x84>
 80048d2:	898a      	ldrh	r2, [r1, #12]
 80048d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048d8:	d032      	beq.n	8004940 <__ssputs_r+0x80>
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	6909      	ldr	r1, [r1, #16]
 80048de:	eba5 0901 	sub.w	r9, r5, r1
 80048e2:	6965      	ldr	r5, [r4, #20]
 80048e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048ec:	3301      	adds	r3, #1
 80048ee:	444b      	add	r3, r9
 80048f0:	106d      	asrs	r5, r5, #1
 80048f2:	429d      	cmp	r5, r3
 80048f4:	bf38      	it	cc
 80048f6:	461d      	movcc	r5, r3
 80048f8:	0553      	lsls	r3, r2, #21
 80048fa:	d531      	bpl.n	8004960 <__ssputs_r+0xa0>
 80048fc:	4629      	mov	r1, r5
 80048fe:	f000 fb47 	bl	8004f90 <_malloc_r>
 8004902:	4606      	mov	r6, r0
 8004904:	b950      	cbnz	r0, 800491c <__ssputs_r+0x5c>
 8004906:	230c      	movs	r3, #12
 8004908:	f8ca 3000 	str.w	r3, [sl]
 800490c:	89a3      	ldrh	r3, [r4, #12]
 800490e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004912:	81a3      	strh	r3, [r4, #12]
 8004914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800491c:	6921      	ldr	r1, [r4, #16]
 800491e:	464a      	mov	r2, r9
 8004920:	f000 fabe 	bl	8004ea0 <memcpy>
 8004924:	89a3      	ldrh	r3, [r4, #12]
 8004926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800492a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	6126      	str	r6, [r4, #16]
 8004932:	6165      	str	r5, [r4, #20]
 8004934:	444e      	add	r6, r9
 8004936:	eba5 0509 	sub.w	r5, r5, r9
 800493a:	6026      	str	r6, [r4, #0]
 800493c:	60a5      	str	r5, [r4, #8]
 800493e:	463e      	mov	r6, r7
 8004940:	42be      	cmp	r6, r7
 8004942:	d900      	bls.n	8004946 <__ssputs_r+0x86>
 8004944:	463e      	mov	r6, r7
 8004946:	4632      	mov	r2, r6
 8004948:	6820      	ldr	r0, [r4, #0]
 800494a:	4641      	mov	r1, r8
 800494c:	f000 fab6 	bl	8004ebc <memmove>
 8004950:	68a3      	ldr	r3, [r4, #8]
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	1b9b      	subs	r3, r3, r6
 8004956:	4432      	add	r2, r6
 8004958:	60a3      	str	r3, [r4, #8]
 800495a:	6022      	str	r2, [r4, #0]
 800495c:	2000      	movs	r0, #0
 800495e:	e7db      	b.n	8004918 <__ssputs_r+0x58>
 8004960:	462a      	mov	r2, r5
 8004962:	f000 fb6f 	bl	8005044 <_realloc_r>
 8004966:	4606      	mov	r6, r0
 8004968:	2800      	cmp	r0, #0
 800496a:	d1e1      	bne.n	8004930 <__ssputs_r+0x70>
 800496c:	6921      	ldr	r1, [r4, #16]
 800496e:	4650      	mov	r0, sl
 8004970:	f000 fabe 	bl	8004ef0 <_free_r>
 8004974:	e7c7      	b.n	8004906 <__ssputs_r+0x46>
	...

08004978 <_svfiprintf_r>:
 8004978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800497c:	4698      	mov	r8, r3
 800497e:	898b      	ldrh	r3, [r1, #12]
 8004980:	061b      	lsls	r3, r3, #24
 8004982:	b09d      	sub	sp, #116	; 0x74
 8004984:	4607      	mov	r7, r0
 8004986:	460d      	mov	r5, r1
 8004988:	4614      	mov	r4, r2
 800498a:	d50e      	bpl.n	80049aa <_svfiprintf_r+0x32>
 800498c:	690b      	ldr	r3, [r1, #16]
 800498e:	b963      	cbnz	r3, 80049aa <_svfiprintf_r+0x32>
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	f000 fafd 	bl	8004f90 <_malloc_r>
 8004996:	6028      	str	r0, [r5, #0]
 8004998:	6128      	str	r0, [r5, #16]
 800499a:	b920      	cbnz	r0, 80049a6 <_svfiprintf_r+0x2e>
 800499c:	230c      	movs	r3, #12
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a4:	e0d1      	b.n	8004b4a <_svfiprintf_r+0x1d2>
 80049a6:	2340      	movs	r3, #64	; 0x40
 80049a8:	616b      	str	r3, [r5, #20]
 80049aa:	2300      	movs	r3, #0
 80049ac:	9309      	str	r3, [sp, #36]	; 0x24
 80049ae:	2320      	movs	r3, #32
 80049b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80049b8:	2330      	movs	r3, #48	; 0x30
 80049ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004b64 <_svfiprintf_r+0x1ec>
 80049be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049c2:	f04f 0901 	mov.w	r9, #1
 80049c6:	4623      	mov	r3, r4
 80049c8:	469a      	mov	sl, r3
 80049ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049ce:	b10a      	cbz	r2, 80049d4 <_svfiprintf_r+0x5c>
 80049d0:	2a25      	cmp	r2, #37	; 0x25
 80049d2:	d1f9      	bne.n	80049c8 <_svfiprintf_r+0x50>
 80049d4:	ebba 0b04 	subs.w	fp, sl, r4
 80049d8:	d00b      	beq.n	80049f2 <_svfiprintf_r+0x7a>
 80049da:	465b      	mov	r3, fp
 80049dc:	4622      	mov	r2, r4
 80049de:	4629      	mov	r1, r5
 80049e0:	4638      	mov	r0, r7
 80049e2:	f7ff ff6d 	bl	80048c0 <__ssputs_r>
 80049e6:	3001      	adds	r0, #1
 80049e8:	f000 80aa 	beq.w	8004b40 <_svfiprintf_r+0x1c8>
 80049ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049ee:	445a      	add	r2, fp
 80049f0:	9209      	str	r2, [sp, #36]	; 0x24
 80049f2:	f89a 3000 	ldrb.w	r3, [sl]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80a2 	beq.w	8004b40 <_svfiprintf_r+0x1c8>
 80049fc:	2300      	movs	r3, #0
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a06:	f10a 0a01 	add.w	sl, sl, #1
 8004a0a:	9304      	str	r3, [sp, #16]
 8004a0c:	9307      	str	r3, [sp, #28]
 8004a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a12:	931a      	str	r3, [sp, #104]	; 0x68
 8004a14:	4654      	mov	r4, sl
 8004a16:	2205      	movs	r2, #5
 8004a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a1c:	4851      	ldr	r0, [pc, #324]	; (8004b64 <_svfiprintf_r+0x1ec>)
 8004a1e:	f7fb fbdf 	bl	80001e0 <memchr>
 8004a22:	9a04      	ldr	r2, [sp, #16]
 8004a24:	b9d8      	cbnz	r0, 8004a5e <_svfiprintf_r+0xe6>
 8004a26:	06d0      	lsls	r0, r2, #27
 8004a28:	bf44      	itt	mi
 8004a2a:	2320      	movmi	r3, #32
 8004a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a30:	0711      	lsls	r1, r2, #28
 8004a32:	bf44      	itt	mi
 8004a34:	232b      	movmi	r3, #43	; 0x2b
 8004a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8004a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a40:	d015      	beq.n	8004a6e <_svfiprintf_r+0xf6>
 8004a42:	9a07      	ldr	r2, [sp, #28]
 8004a44:	4654      	mov	r4, sl
 8004a46:	2000      	movs	r0, #0
 8004a48:	f04f 0c0a 	mov.w	ip, #10
 8004a4c:	4621      	mov	r1, r4
 8004a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a52:	3b30      	subs	r3, #48	; 0x30
 8004a54:	2b09      	cmp	r3, #9
 8004a56:	d94e      	bls.n	8004af6 <_svfiprintf_r+0x17e>
 8004a58:	b1b0      	cbz	r0, 8004a88 <_svfiprintf_r+0x110>
 8004a5a:	9207      	str	r2, [sp, #28]
 8004a5c:	e014      	b.n	8004a88 <_svfiprintf_r+0x110>
 8004a5e:	eba0 0308 	sub.w	r3, r0, r8
 8004a62:	fa09 f303 	lsl.w	r3, r9, r3
 8004a66:	4313      	orrs	r3, r2
 8004a68:	9304      	str	r3, [sp, #16]
 8004a6a:	46a2      	mov	sl, r4
 8004a6c:	e7d2      	b.n	8004a14 <_svfiprintf_r+0x9c>
 8004a6e:	9b03      	ldr	r3, [sp, #12]
 8004a70:	1d19      	adds	r1, r3, #4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	9103      	str	r1, [sp, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bfbb      	ittet	lt
 8004a7a:	425b      	neglt	r3, r3
 8004a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8004a80:	9307      	strge	r3, [sp, #28]
 8004a82:	9307      	strlt	r3, [sp, #28]
 8004a84:	bfb8      	it	lt
 8004a86:	9204      	strlt	r2, [sp, #16]
 8004a88:	7823      	ldrb	r3, [r4, #0]
 8004a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a8c:	d10c      	bne.n	8004aa8 <_svfiprintf_r+0x130>
 8004a8e:	7863      	ldrb	r3, [r4, #1]
 8004a90:	2b2a      	cmp	r3, #42	; 0x2a
 8004a92:	d135      	bne.n	8004b00 <_svfiprintf_r+0x188>
 8004a94:	9b03      	ldr	r3, [sp, #12]
 8004a96:	1d1a      	adds	r2, r3, #4
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	9203      	str	r2, [sp, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bfb8      	it	lt
 8004aa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004aa4:	3402      	adds	r4, #2
 8004aa6:	9305      	str	r3, [sp, #20]
 8004aa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004b74 <_svfiprintf_r+0x1fc>
 8004aac:	7821      	ldrb	r1, [r4, #0]
 8004aae:	2203      	movs	r2, #3
 8004ab0:	4650      	mov	r0, sl
 8004ab2:	f7fb fb95 	bl	80001e0 <memchr>
 8004ab6:	b140      	cbz	r0, 8004aca <_svfiprintf_r+0x152>
 8004ab8:	2340      	movs	r3, #64	; 0x40
 8004aba:	eba0 000a 	sub.w	r0, r0, sl
 8004abe:	fa03 f000 	lsl.w	r0, r3, r0
 8004ac2:	9b04      	ldr	r3, [sp, #16]
 8004ac4:	4303      	orrs	r3, r0
 8004ac6:	3401      	adds	r4, #1
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ace:	4826      	ldr	r0, [pc, #152]	; (8004b68 <_svfiprintf_r+0x1f0>)
 8004ad0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ad4:	2206      	movs	r2, #6
 8004ad6:	f7fb fb83 	bl	80001e0 <memchr>
 8004ada:	2800      	cmp	r0, #0
 8004adc:	d038      	beq.n	8004b50 <_svfiprintf_r+0x1d8>
 8004ade:	4b23      	ldr	r3, [pc, #140]	; (8004b6c <_svfiprintf_r+0x1f4>)
 8004ae0:	bb1b      	cbnz	r3, 8004b2a <_svfiprintf_r+0x1b2>
 8004ae2:	9b03      	ldr	r3, [sp, #12]
 8004ae4:	3307      	adds	r3, #7
 8004ae6:	f023 0307 	bic.w	r3, r3, #7
 8004aea:	3308      	adds	r3, #8
 8004aec:	9303      	str	r3, [sp, #12]
 8004aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af0:	4433      	add	r3, r6
 8004af2:	9309      	str	r3, [sp, #36]	; 0x24
 8004af4:	e767      	b.n	80049c6 <_svfiprintf_r+0x4e>
 8004af6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004afa:	460c      	mov	r4, r1
 8004afc:	2001      	movs	r0, #1
 8004afe:	e7a5      	b.n	8004a4c <_svfiprintf_r+0xd4>
 8004b00:	2300      	movs	r3, #0
 8004b02:	3401      	adds	r4, #1
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	4619      	mov	r1, r3
 8004b08:	f04f 0c0a 	mov.w	ip, #10
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b12:	3a30      	subs	r2, #48	; 0x30
 8004b14:	2a09      	cmp	r2, #9
 8004b16:	d903      	bls.n	8004b20 <_svfiprintf_r+0x1a8>
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0c5      	beq.n	8004aa8 <_svfiprintf_r+0x130>
 8004b1c:	9105      	str	r1, [sp, #20]
 8004b1e:	e7c3      	b.n	8004aa8 <_svfiprintf_r+0x130>
 8004b20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b24:	4604      	mov	r4, r0
 8004b26:	2301      	movs	r3, #1
 8004b28:	e7f0      	b.n	8004b0c <_svfiprintf_r+0x194>
 8004b2a:	ab03      	add	r3, sp, #12
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	462a      	mov	r2, r5
 8004b30:	4b0f      	ldr	r3, [pc, #60]	; (8004b70 <_svfiprintf_r+0x1f8>)
 8004b32:	a904      	add	r1, sp, #16
 8004b34:	4638      	mov	r0, r7
 8004b36:	f3af 8000 	nop.w
 8004b3a:	1c42      	adds	r2, r0, #1
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	d1d6      	bne.n	8004aee <_svfiprintf_r+0x176>
 8004b40:	89ab      	ldrh	r3, [r5, #12]
 8004b42:	065b      	lsls	r3, r3, #25
 8004b44:	f53f af2c 	bmi.w	80049a0 <_svfiprintf_r+0x28>
 8004b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b4a:	b01d      	add	sp, #116	; 0x74
 8004b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b50:	ab03      	add	r3, sp, #12
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	462a      	mov	r2, r5
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <_svfiprintf_r+0x1f8>)
 8004b58:	a904      	add	r1, sp, #16
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f000 f87a 	bl	8004c54 <_printf_i>
 8004b60:	e7eb      	b.n	8004b3a <_svfiprintf_r+0x1c2>
 8004b62:	bf00      	nop
 8004b64:	0800649c 	.word	0x0800649c
 8004b68:	080064a6 	.word	0x080064a6
 8004b6c:	00000000 	.word	0x00000000
 8004b70:	080048c1 	.word	0x080048c1
 8004b74:	080064a2 	.word	0x080064a2

08004b78 <_printf_common>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	4699      	mov	r9, r3
 8004b80:	688a      	ldr	r2, [r1, #8]
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bfb8      	it	lt
 8004b8c:	4613      	movlt	r3, r2
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b94:	4607      	mov	r7, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b10a      	cbz	r2, 8004b9e <_printf_common+0x26>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	0699      	lsls	r1, r3, #26
 8004ba2:	bf42      	ittt	mi
 8004ba4:	6833      	ldrmi	r3, [r6, #0]
 8004ba6:	3302      	addmi	r3, #2
 8004ba8:	6033      	strmi	r3, [r6, #0]
 8004baa:	6825      	ldr	r5, [r4, #0]
 8004bac:	f015 0506 	ands.w	r5, r5, #6
 8004bb0:	d106      	bne.n	8004bc0 <_printf_common+0x48>
 8004bb2:	f104 0a19 	add.w	sl, r4, #25
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	6832      	ldr	r2, [r6, #0]
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dc26      	bgt.n	8004c0e <_printf_common+0x96>
 8004bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc4:	1e13      	subs	r3, r2, #0
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	0692      	lsls	r2, r2, #26
 8004bce:	d42b      	bmi.n	8004c28 <_printf_common+0xb0>
 8004bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c0      	blx	r8
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d01e      	beq.n	8004c1c <_printf_common+0xa4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	68e5      	ldr	r5, [r4, #12]
 8004be2:	6832      	ldr	r2, [r6, #0]
 8004be4:	f003 0306 	and.w	r3, r3, #6
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	bf08      	it	eq
 8004bec:	1aad      	subeq	r5, r5, r2
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	6922      	ldr	r2, [r4, #16]
 8004bf2:	bf0c      	ite	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	2500      	movne	r5, #0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bfc4      	itt	gt
 8004bfe:	1a9b      	subgt	r3, r3, r2
 8004c00:	18ed      	addgt	r5, r5, r3
 8004c02:	2600      	movs	r6, #0
 8004c04:	341a      	adds	r4, #26
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	d11a      	bne.n	8004c40 <_printf_common+0xc8>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e008      	b.n	8004c20 <_printf_common+0xa8>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4652      	mov	r2, sl
 8004c12:	4649      	mov	r1, r9
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c0      	blx	r8
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d103      	bne.n	8004c24 <_printf_common+0xac>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7c6      	b.n	8004bb6 <_printf_common+0x3e>
 8004c28:	18e1      	adds	r1, r4, r3
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	2030      	movs	r0, #48	; 0x30
 8004c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c32:	4422      	add	r2, r4
 8004c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	e7c7      	b.n	8004bd0 <_printf_common+0x58>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4622      	mov	r2, r4
 8004c44:	4649      	mov	r1, r9
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0e6      	beq.n	8004c1c <_printf_common+0xa4>
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7d9      	b.n	8004c06 <_printf_common+0x8e>
	...

08004c54 <_printf_i>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	460c      	mov	r4, r1
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	7e27      	ldrb	r7, [r4, #24]
 8004c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c60:	2f78      	cmp	r7, #120	; 0x78
 8004c62:	4680      	mov	r8, r0
 8004c64:	469a      	mov	sl, r3
 8004c66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c6a:	d807      	bhi.n	8004c7c <_printf_i+0x28>
 8004c6c:	2f62      	cmp	r7, #98	; 0x62
 8004c6e:	d80a      	bhi.n	8004c86 <_printf_i+0x32>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	f000 80d8 	beq.w	8004e26 <_printf_i+0x1d2>
 8004c76:	2f58      	cmp	r7, #88	; 0x58
 8004c78:	f000 80a3 	beq.w	8004dc2 <_printf_i+0x16e>
 8004c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c84:	e03a      	b.n	8004cfc <_printf_i+0xa8>
 8004c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c8a:	2b15      	cmp	r3, #21
 8004c8c:	d8f6      	bhi.n	8004c7c <_printf_i+0x28>
 8004c8e:	a001      	add	r0, pc, #4	; (adr r0, 8004c94 <_printf_i+0x40>)
 8004c90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004c7d 	.word	0x08004c7d
 8004ca0:	08004c7d 	.word	0x08004c7d
 8004ca4:	08004c7d 	.word	0x08004c7d
 8004ca8:	08004c7d 	.word	0x08004c7d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c7d 	.word	0x08004c7d
 8004cb4:	08004c7d 	.word	0x08004c7d
 8004cb8:	08004c7d 	.word	0x08004c7d
 8004cbc:	08004c7d 	.word	0x08004c7d
 8004cc0:	08004e0d 	.word	0x08004e0d
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004def 	.word	0x08004def
 8004ccc:	08004c7d 	.word	0x08004c7d
 8004cd0:	08004c7d 	.word	0x08004c7d
 8004cd4:	08004e2f 	.word	0x08004e2f
 8004cd8:	08004c7d 	.word	0x08004c7d
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004c7d 	.word	0x08004c7d
 8004ce4:	08004c7d 	.word	0x08004c7d
 8004ce8:	08004df7 	.word	0x08004df7
 8004cec:	680b      	ldr	r3, [r1, #0]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	600a      	str	r2, [r1, #0]
 8004cf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0a3      	b.n	8004e48 <_printf_i+0x1f4>
 8004d00:	6825      	ldr	r5, [r4, #0]
 8004d02:	6808      	ldr	r0, [r1, #0]
 8004d04:	062e      	lsls	r6, r5, #24
 8004d06:	f100 0304 	add.w	r3, r0, #4
 8004d0a:	d50a      	bpl.n	8004d22 <_printf_i+0xce>
 8004d0c:	6805      	ldr	r5, [r0, #0]
 8004d0e:	600b      	str	r3, [r1, #0]
 8004d10:	2d00      	cmp	r5, #0
 8004d12:	da03      	bge.n	8004d1c <_printf_i+0xc8>
 8004d14:	232d      	movs	r3, #45	; 0x2d
 8004d16:	426d      	negs	r5, r5
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	485e      	ldr	r0, [pc, #376]	; (8004e98 <_printf_i+0x244>)
 8004d1e:	230a      	movs	r3, #10
 8004d20:	e019      	b.n	8004d56 <_printf_i+0x102>
 8004d22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d26:	6805      	ldr	r5, [r0, #0]
 8004d28:	600b      	str	r3, [r1, #0]
 8004d2a:	bf18      	it	ne
 8004d2c:	b22d      	sxthne	r5, r5
 8004d2e:	e7ef      	b.n	8004d10 <_printf_i+0xbc>
 8004d30:	680b      	ldr	r3, [r1, #0]
 8004d32:	6825      	ldr	r5, [r4, #0]
 8004d34:	1d18      	adds	r0, r3, #4
 8004d36:	6008      	str	r0, [r1, #0]
 8004d38:	0628      	lsls	r0, r5, #24
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0xec>
 8004d3c:	681d      	ldr	r5, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0xf2>
 8004d40:	0669      	lsls	r1, r5, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0xe8>
 8004d44:	881d      	ldrh	r5, [r3, #0]
 8004d46:	4854      	ldr	r0, [pc, #336]	; (8004e98 <_printf_i+0x244>)
 8004d48:	2f6f      	cmp	r7, #111	; 0x6f
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2308      	moveq	r3, #8
 8004d4e:	230a      	movne	r3, #10
 8004d50:	2100      	movs	r1, #0
 8004d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d56:	6866      	ldr	r6, [r4, #4]
 8004d58:	60a6      	str	r6, [r4, #8]
 8004d5a:	2e00      	cmp	r6, #0
 8004d5c:	bfa2      	ittt	ge
 8004d5e:	6821      	ldrge	r1, [r4, #0]
 8004d60:	f021 0104 	bicge.w	r1, r1, #4
 8004d64:	6021      	strge	r1, [r4, #0]
 8004d66:	b90d      	cbnz	r5, 8004d6c <_printf_i+0x118>
 8004d68:	2e00      	cmp	r6, #0
 8004d6a:	d04d      	beq.n	8004e08 <_printf_i+0x1b4>
 8004d6c:	4616      	mov	r6, r2
 8004d6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d72:	fb03 5711 	mls	r7, r3, r1, r5
 8004d76:	5dc7      	ldrb	r7, [r0, r7]
 8004d78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d7c:	462f      	mov	r7, r5
 8004d7e:	42bb      	cmp	r3, r7
 8004d80:	460d      	mov	r5, r1
 8004d82:	d9f4      	bls.n	8004d6e <_printf_i+0x11a>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d10b      	bne.n	8004da0 <_printf_i+0x14c>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	07df      	lsls	r7, r3, #31
 8004d8c:	d508      	bpl.n	8004da0 <_printf_i+0x14c>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	6861      	ldr	r1, [r4, #4]
 8004d92:	4299      	cmp	r1, r3
 8004d94:	bfde      	ittt	le
 8004d96:	2330      	movle	r3, #48	; 0x30
 8004d98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d9c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004da0:	1b92      	subs	r2, r2, r6
 8004da2:	6122      	str	r2, [r4, #16]
 8004da4:	f8cd a000 	str.w	sl, [sp]
 8004da8:	464b      	mov	r3, r9
 8004daa:	aa03      	add	r2, sp, #12
 8004dac:	4621      	mov	r1, r4
 8004dae:	4640      	mov	r0, r8
 8004db0:	f7ff fee2 	bl	8004b78 <_printf_common>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d14c      	bne.n	8004e52 <_printf_i+0x1fe>
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dbc:	b004      	add	sp, #16
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	4835      	ldr	r0, [pc, #212]	; (8004e98 <_printf_i+0x244>)
 8004dc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	680e      	ldr	r6, [r1, #0]
 8004dcc:	061f      	lsls	r7, r3, #24
 8004dce:	f856 5b04 	ldr.w	r5, [r6], #4
 8004dd2:	600e      	str	r6, [r1, #0]
 8004dd4:	d514      	bpl.n	8004e00 <_printf_i+0x1ac>
 8004dd6:	07d9      	lsls	r1, r3, #31
 8004dd8:	bf44      	itt	mi
 8004dda:	f043 0320 	orrmi.w	r3, r3, #32
 8004dde:	6023      	strmi	r3, [r4, #0]
 8004de0:	b91d      	cbnz	r5, 8004dea <_printf_i+0x196>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f023 0320 	bic.w	r3, r3, #32
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	2310      	movs	r3, #16
 8004dec:	e7b0      	b.n	8004d50 <_printf_i+0xfc>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	2378      	movs	r3, #120	; 0x78
 8004df8:	4828      	ldr	r0, [pc, #160]	; (8004e9c <_printf_i+0x248>)
 8004dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dfe:	e7e3      	b.n	8004dc8 <_printf_i+0x174>
 8004e00:	065e      	lsls	r6, r3, #25
 8004e02:	bf48      	it	mi
 8004e04:	b2ad      	uxthmi	r5, r5
 8004e06:	e7e6      	b.n	8004dd6 <_printf_i+0x182>
 8004e08:	4616      	mov	r6, r2
 8004e0a:	e7bb      	b.n	8004d84 <_printf_i+0x130>
 8004e0c:	680b      	ldr	r3, [r1, #0]
 8004e0e:	6826      	ldr	r6, [r4, #0]
 8004e10:	6960      	ldr	r0, [r4, #20]
 8004e12:	1d1d      	adds	r5, r3, #4
 8004e14:	600d      	str	r5, [r1, #0]
 8004e16:	0635      	lsls	r5, r6, #24
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0x1cc>
 8004e1c:	6018      	str	r0, [r3, #0]
 8004e1e:	e002      	b.n	8004e26 <_printf_i+0x1d2>
 8004e20:	0671      	lsls	r1, r6, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0x1c8>
 8004e24:	8018      	strh	r0, [r3, #0]
 8004e26:	2300      	movs	r3, #0
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	4616      	mov	r6, r2
 8004e2c:	e7ba      	b.n	8004da4 <_printf_i+0x150>
 8004e2e:	680b      	ldr	r3, [r1, #0]
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	600a      	str	r2, [r1, #0]
 8004e34:	681e      	ldr	r6, [r3, #0]
 8004e36:	6862      	ldr	r2, [r4, #4]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	f7fb f9d0 	bl	80001e0 <memchr>
 8004e40:	b108      	cbz	r0, 8004e46 <_printf_i+0x1f2>
 8004e42:	1b80      	subs	r0, r0, r6
 8004e44:	6060      	str	r0, [r4, #4]
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e50:	e7a8      	b.n	8004da4 <_printf_i+0x150>
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	4632      	mov	r2, r6
 8004e56:	4649      	mov	r1, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	47d0      	blx	sl
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d0ab      	beq.n	8004db8 <_printf_i+0x164>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	079b      	lsls	r3, r3, #30
 8004e64:	d413      	bmi.n	8004e8e <_printf_i+0x23a>
 8004e66:	68e0      	ldr	r0, [r4, #12]
 8004e68:	9b03      	ldr	r3, [sp, #12]
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	bfb8      	it	lt
 8004e6e:	4618      	movlt	r0, r3
 8004e70:	e7a4      	b.n	8004dbc <_printf_i+0x168>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4632      	mov	r2, r6
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	47d0      	blx	sl
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d09b      	beq.n	8004db8 <_printf_i+0x164>
 8004e80:	3501      	adds	r5, #1
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	9903      	ldr	r1, [sp, #12]
 8004e86:	1a5b      	subs	r3, r3, r1
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dcf2      	bgt.n	8004e72 <_printf_i+0x21e>
 8004e8c:	e7eb      	b.n	8004e66 <_printf_i+0x212>
 8004e8e:	2500      	movs	r5, #0
 8004e90:	f104 0619 	add.w	r6, r4, #25
 8004e94:	e7f5      	b.n	8004e82 <_printf_i+0x22e>
 8004e96:	bf00      	nop
 8004e98:	080064ad 	.word	0x080064ad
 8004e9c:	080064be 	.word	0x080064be

08004ea0 <memcpy>:
 8004ea0:	440a      	add	r2, r1
 8004ea2:	4291      	cmp	r1, r2
 8004ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004ea8:	d100      	bne.n	8004eac <memcpy+0xc>
 8004eaa:	4770      	bx	lr
 8004eac:	b510      	push	{r4, lr}
 8004eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eb6:	4291      	cmp	r1, r2
 8004eb8:	d1f9      	bne.n	8004eae <memcpy+0xe>
 8004eba:	bd10      	pop	{r4, pc}

08004ebc <memmove>:
 8004ebc:	4288      	cmp	r0, r1
 8004ebe:	b510      	push	{r4, lr}
 8004ec0:	eb01 0402 	add.w	r4, r1, r2
 8004ec4:	d902      	bls.n	8004ecc <memmove+0x10>
 8004ec6:	4284      	cmp	r4, r0
 8004ec8:	4623      	mov	r3, r4
 8004eca:	d807      	bhi.n	8004edc <memmove+0x20>
 8004ecc:	1e43      	subs	r3, r0, #1
 8004ece:	42a1      	cmp	r1, r4
 8004ed0:	d008      	beq.n	8004ee4 <memmove+0x28>
 8004ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eda:	e7f8      	b.n	8004ece <memmove+0x12>
 8004edc:	4402      	add	r2, r0
 8004ede:	4601      	mov	r1, r0
 8004ee0:	428a      	cmp	r2, r1
 8004ee2:	d100      	bne.n	8004ee6 <memmove+0x2a>
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eee:	e7f7      	b.n	8004ee0 <memmove+0x24>

08004ef0 <_free_r>:
 8004ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d048      	beq.n	8004f88 <_free_r+0x98>
 8004ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004efa:	9001      	str	r0, [sp, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f1a1 0404 	sub.w	r4, r1, #4
 8004f02:	bfb8      	it	lt
 8004f04:	18e4      	addlt	r4, r4, r3
 8004f06:	f000 f8d3 	bl	80050b0 <__malloc_lock>
 8004f0a:	4a20      	ldr	r2, [pc, #128]	; (8004f8c <_free_r+0x9c>)
 8004f0c:	9801      	ldr	r0, [sp, #4]
 8004f0e:	6813      	ldr	r3, [r2, #0]
 8004f10:	4615      	mov	r5, r2
 8004f12:	b933      	cbnz	r3, 8004f22 <_free_r+0x32>
 8004f14:	6063      	str	r3, [r4, #4]
 8004f16:	6014      	str	r4, [r2, #0]
 8004f18:	b003      	add	sp, #12
 8004f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f1e:	f000 b8cd 	b.w	80050bc <__malloc_unlock>
 8004f22:	42a3      	cmp	r3, r4
 8004f24:	d90b      	bls.n	8004f3e <_free_r+0x4e>
 8004f26:	6821      	ldr	r1, [r4, #0]
 8004f28:	1862      	adds	r2, r4, r1
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	bf04      	itt	eq
 8004f2e:	681a      	ldreq	r2, [r3, #0]
 8004f30:	685b      	ldreq	r3, [r3, #4]
 8004f32:	6063      	str	r3, [r4, #4]
 8004f34:	bf04      	itt	eq
 8004f36:	1852      	addeq	r2, r2, r1
 8004f38:	6022      	streq	r2, [r4, #0]
 8004f3a:	602c      	str	r4, [r5, #0]
 8004f3c:	e7ec      	b.n	8004f18 <_free_r+0x28>
 8004f3e:	461a      	mov	r2, r3
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	b10b      	cbz	r3, 8004f48 <_free_r+0x58>
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d9fa      	bls.n	8004f3e <_free_r+0x4e>
 8004f48:	6811      	ldr	r1, [r2, #0]
 8004f4a:	1855      	adds	r5, r2, r1
 8004f4c:	42a5      	cmp	r5, r4
 8004f4e:	d10b      	bne.n	8004f68 <_free_r+0x78>
 8004f50:	6824      	ldr	r4, [r4, #0]
 8004f52:	4421      	add	r1, r4
 8004f54:	1854      	adds	r4, r2, r1
 8004f56:	42a3      	cmp	r3, r4
 8004f58:	6011      	str	r1, [r2, #0]
 8004f5a:	d1dd      	bne.n	8004f18 <_free_r+0x28>
 8004f5c:	681c      	ldr	r4, [r3, #0]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	6053      	str	r3, [r2, #4]
 8004f62:	4421      	add	r1, r4
 8004f64:	6011      	str	r1, [r2, #0]
 8004f66:	e7d7      	b.n	8004f18 <_free_r+0x28>
 8004f68:	d902      	bls.n	8004f70 <_free_r+0x80>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	6003      	str	r3, [r0, #0]
 8004f6e:	e7d3      	b.n	8004f18 <_free_r+0x28>
 8004f70:	6825      	ldr	r5, [r4, #0]
 8004f72:	1961      	adds	r1, r4, r5
 8004f74:	428b      	cmp	r3, r1
 8004f76:	bf04      	itt	eq
 8004f78:	6819      	ldreq	r1, [r3, #0]
 8004f7a:	685b      	ldreq	r3, [r3, #4]
 8004f7c:	6063      	str	r3, [r4, #4]
 8004f7e:	bf04      	itt	eq
 8004f80:	1949      	addeq	r1, r1, r5
 8004f82:	6021      	streq	r1, [r4, #0]
 8004f84:	6054      	str	r4, [r2, #4]
 8004f86:	e7c7      	b.n	8004f18 <_free_r+0x28>
 8004f88:	b003      	add	sp, #12
 8004f8a:	bd30      	pop	{r4, r5, pc}
 8004f8c:	200000b8 	.word	0x200000b8

08004f90 <_malloc_r>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	1ccd      	adds	r5, r1, #3
 8004f94:	f025 0503 	bic.w	r5, r5, #3
 8004f98:	3508      	adds	r5, #8
 8004f9a:	2d0c      	cmp	r5, #12
 8004f9c:	bf38      	it	cc
 8004f9e:	250c      	movcc	r5, #12
 8004fa0:	2d00      	cmp	r5, #0
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	db01      	blt.n	8004faa <_malloc_r+0x1a>
 8004fa6:	42a9      	cmp	r1, r5
 8004fa8:	d903      	bls.n	8004fb2 <_malloc_r+0x22>
 8004faa:	230c      	movs	r3, #12
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	2000      	movs	r0, #0
 8004fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb2:	f000 f87d 	bl	80050b0 <__malloc_lock>
 8004fb6:	4921      	ldr	r1, [pc, #132]	; (800503c <_malloc_r+0xac>)
 8004fb8:	680a      	ldr	r2, [r1, #0]
 8004fba:	4614      	mov	r4, r2
 8004fbc:	b99c      	cbnz	r4, 8004fe6 <_malloc_r+0x56>
 8004fbe:	4f20      	ldr	r7, [pc, #128]	; (8005040 <_malloc_r+0xb0>)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	b923      	cbnz	r3, 8004fce <_malloc_r+0x3e>
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 f862 	bl	8005090 <_sbrk_r>
 8004fcc:	6038      	str	r0, [r7, #0]
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f000 f85d 	bl	8005090 <_sbrk_r>
 8004fd6:	1c43      	adds	r3, r0, #1
 8004fd8:	d123      	bne.n	8005022 <_malloc_r+0x92>
 8004fda:	230c      	movs	r3, #12
 8004fdc:	6033      	str	r3, [r6, #0]
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f000 f86c 	bl	80050bc <__malloc_unlock>
 8004fe4:	e7e3      	b.n	8004fae <_malloc_r+0x1e>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	1b5b      	subs	r3, r3, r5
 8004fea:	d417      	bmi.n	800501c <_malloc_r+0x8c>
 8004fec:	2b0b      	cmp	r3, #11
 8004fee:	d903      	bls.n	8004ff8 <_malloc_r+0x68>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	441c      	add	r4, r3
 8004ff4:	6025      	str	r5, [r4, #0]
 8004ff6:	e004      	b.n	8005002 <_malloc_r+0x72>
 8004ff8:	6863      	ldr	r3, [r4, #4]
 8004ffa:	42a2      	cmp	r2, r4
 8004ffc:	bf0c      	ite	eq
 8004ffe:	600b      	streq	r3, [r1, #0]
 8005000:	6053      	strne	r3, [r2, #4]
 8005002:	4630      	mov	r0, r6
 8005004:	f000 f85a 	bl	80050bc <__malloc_unlock>
 8005008:	f104 000b 	add.w	r0, r4, #11
 800500c:	1d23      	adds	r3, r4, #4
 800500e:	f020 0007 	bic.w	r0, r0, #7
 8005012:	1ac2      	subs	r2, r0, r3
 8005014:	d0cc      	beq.n	8004fb0 <_malloc_r+0x20>
 8005016:	1a1b      	subs	r3, r3, r0
 8005018:	50a3      	str	r3, [r4, r2]
 800501a:	e7c9      	b.n	8004fb0 <_malloc_r+0x20>
 800501c:	4622      	mov	r2, r4
 800501e:	6864      	ldr	r4, [r4, #4]
 8005020:	e7cc      	b.n	8004fbc <_malloc_r+0x2c>
 8005022:	1cc4      	adds	r4, r0, #3
 8005024:	f024 0403 	bic.w	r4, r4, #3
 8005028:	42a0      	cmp	r0, r4
 800502a:	d0e3      	beq.n	8004ff4 <_malloc_r+0x64>
 800502c:	1a21      	subs	r1, r4, r0
 800502e:	4630      	mov	r0, r6
 8005030:	f000 f82e 	bl	8005090 <_sbrk_r>
 8005034:	3001      	adds	r0, #1
 8005036:	d1dd      	bne.n	8004ff4 <_malloc_r+0x64>
 8005038:	e7cf      	b.n	8004fda <_malloc_r+0x4a>
 800503a:	bf00      	nop
 800503c:	200000b8 	.word	0x200000b8
 8005040:	200000bc 	.word	0x200000bc

08005044 <_realloc_r>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	4607      	mov	r7, r0
 8005048:	4614      	mov	r4, r2
 800504a:	460e      	mov	r6, r1
 800504c:	b921      	cbnz	r1, 8005058 <_realloc_r+0x14>
 800504e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005052:	4611      	mov	r1, r2
 8005054:	f7ff bf9c 	b.w	8004f90 <_malloc_r>
 8005058:	b922      	cbnz	r2, 8005064 <_realloc_r+0x20>
 800505a:	f7ff ff49 	bl	8004ef0 <_free_r>
 800505e:	4625      	mov	r5, r4
 8005060:	4628      	mov	r0, r5
 8005062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005064:	f000 f830 	bl	80050c8 <_malloc_usable_size_r>
 8005068:	42a0      	cmp	r0, r4
 800506a:	d20f      	bcs.n	800508c <_realloc_r+0x48>
 800506c:	4621      	mov	r1, r4
 800506e:	4638      	mov	r0, r7
 8005070:	f7ff ff8e 	bl	8004f90 <_malloc_r>
 8005074:	4605      	mov	r5, r0
 8005076:	2800      	cmp	r0, #0
 8005078:	d0f2      	beq.n	8005060 <_realloc_r+0x1c>
 800507a:	4631      	mov	r1, r6
 800507c:	4622      	mov	r2, r4
 800507e:	f7ff ff0f 	bl	8004ea0 <memcpy>
 8005082:	4631      	mov	r1, r6
 8005084:	4638      	mov	r0, r7
 8005086:	f7ff ff33 	bl	8004ef0 <_free_r>
 800508a:	e7e9      	b.n	8005060 <_realloc_r+0x1c>
 800508c:	4635      	mov	r5, r6
 800508e:	e7e7      	b.n	8005060 <_realloc_r+0x1c>

08005090 <_sbrk_r>:
 8005090:	b538      	push	{r3, r4, r5, lr}
 8005092:	4d06      	ldr	r5, [pc, #24]	; (80050ac <_sbrk_r+0x1c>)
 8005094:	2300      	movs	r3, #0
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	602b      	str	r3, [r5, #0]
 800509c:	f7fd f95a 	bl	8002354 <_sbrk>
 80050a0:	1c43      	adds	r3, r0, #1
 80050a2:	d102      	bne.n	80050aa <_sbrk_r+0x1a>
 80050a4:	682b      	ldr	r3, [r5, #0]
 80050a6:	b103      	cbz	r3, 80050aa <_sbrk_r+0x1a>
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	bd38      	pop	{r3, r4, r5, pc}
 80050ac:	20000fb4 	.word	0x20000fb4

080050b0 <__malloc_lock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__malloc_lock+0x8>)
 80050b2:	f000 b811 	b.w	80050d8 <__retarget_lock_acquire_recursive>
 80050b6:	bf00      	nop
 80050b8:	20000fbc 	.word	0x20000fbc

080050bc <__malloc_unlock>:
 80050bc:	4801      	ldr	r0, [pc, #4]	; (80050c4 <__malloc_unlock+0x8>)
 80050be:	f000 b80c 	b.w	80050da <__retarget_lock_release_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000fbc 	.word	0x20000fbc

080050c8 <_malloc_usable_size_r>:
 80050c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050cc:	1f18      	subs	r0, r3, #4
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	bfbc      	itt	lt
 80050d2:	580b      	ldrlt	r3, [r1, r0]
 80050d4:	18c0      	addlt	r0, r0, r3
 80050d6:	4770      	bx	lr

080050d8 <__retarget_lock_acquire_recursive>:
 80050d8:	4770      	bx	lr

080050da <__retarget_lock_release_recursive>:
 80050da:	4770      	bx	lr
 80050dc:	0000      	movs	r0, r0
	...

080050e0 <sin>:
 80050e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050e2:	ec53 2b10 	vmov	r2, r3, d0
 80050e6:	4826      	ldr	r0, [pc, #152]	; (8005180 <sin+0xa0>)
 80050e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80050ec:	4281      	cmp	r1, r0
 80050ee:	dc07      	bgt.n	8005100 <sin+0x20>
 80050f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8005178 <sin+0x98>
 80050f4:	2000      	movs	r0, #0
 80050f6:	f000 fe5b 	bl	8005db0 <__kernel_sin>
 80050fa:	ec51 0b10 	vmov	r0, r1, d0
 80050fe:	e007      	b.n	8005110 <sin+0x30>
 8005100:	4820      	ldr	r0, [pc, #128]	; (8005184 <sin+0xa4>)
 8005102:	4281      	cmp	r1, r0
 8005104:	dd09      	ble.n	800511a <sin+0x3a>
 8005106:	ee10 0a10 	vmov	r0, s0
 800510a:	4619      	mov	r1, r3
 800510c:	f7fb f8bc 	bl	8000288 <__aeabi_dsub>
 8005110:	ec41 0b10 	vmov	d0, r0, r1
 8005114:	b005      	add	sp, #20
 8005116:	f85d fb04 	ldr.w	pc, [sp], #4
 800511a:	4668      	mov	r0, sp
 800511c:	f000 f834 	bl	8005188 <__ieee754_rem_pio2>
 8005120:	f000 0003 	and.w	r0, r0, #3
 8005124:	2801      	cmp	r0, #1
 8005126:	d008      	beq.n	800513a <sin+0x5a>
 8005128:	2802      	cmp	r0, #2
 800512a:	d00d      	beq.n	8005148 <sin+0x68>
 800512c:	b9d0      	cbnz	r0, 8005164 <sin+0x84>
 800512e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005132:	ed9d 0b00 	vldr	d0, [sp]
 8005136:	2001      	movs	r0, #1
 8005138:	e7dd      	b.n	80050f6 <sin+0x16>
 800513a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800513e:	ed9d 0b00 	vldr	d0, [sp]
 8005142:	f000 fa2d 	bl	80055a0 <__kernel_cos>
 8005146:	e7d8      	b.n	80050fa <sin+0x1a>
 8005148:	ed9d 1b02 	vldr	d1, [sp, #8]
 800514c:	ed9d 0b00 	vldr	d0, [sp]
 8005150:	2001      	movs	r0, #1
 8005152:	f000 fe2d 	bl	8005db0 <__kernel_sin>
 8005156:	ec53 2b10 	vmov	r2, r3, d0
 800515a:	ee10 0a10 	vmov	r0, s0
 800515e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005162:	e7d5      	b.n	8005110 <sin+0x30>
 8005164:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005168:	ed9d 0b00 	vldr	d0, [sp]
 800516c:	f000 fa18 	bl	80055a0 <__kernel_cos>
 8005170:	e7f1      	b.n	8005156 <sin+0x76>
 8005172:	bf00      	nop
 8005174:	f3af 8000 	nop.w
	...
 8005180:	3fe921fb 	.word	0x3fe921fb
 8005184:	7fefffff 	.word	0x7fefffff

08005188 <__ieee754_rem_pio2>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	ed2d 8b02 	vpush	{d8}
 8005190:	ec55 4b10 	vmov	r4, r5, d0
 8005194:	4bca      	ldr	r3, [pc, #808]	; (80054c0 <__ieee754_rem_pio2+0x338>)
 8005196:	b08b      	sub	sp, #44	; 0x2c
 8005198:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800519c:	4598      	cmp	r8, r3
 800519e:	4682      	mov	sl, r0
 80051a0:	9502      	str	r5, [sp, #8]
 80051a2:	dc08      	bgt.n	80051b6 <__ieee754_rem_pio2+0x2e>
 80051a4:	2200      	movs	r2, #0
 80051a6:	2300      	movs	r3, #0
 80051a8:	ed80 0b00 	vstr	d0, [r0]
 80051ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80051b0:	f04f 0b00 	mov.w	fp, #0
 80051b4:	e028      	b.n	8005208 <__ieee754_rem_pio2+0x80>
 80051b6:	4bc3      	ldr	r3, [pc, #780]	; (80054c4 <__ieee754_rem_pio2+0x33c>)
 80051b8:	4598      	cmp	r8, r3
 80051ba:	dc78      	bgt.n	80052ae <__ieee754_rem_pio2+0x126>
 80051bc:	9b02      	ldr	r3, [sp, #8]
 80051be:	4ec2      	ldr	r6, [pc, #776]	; (80054c8 <__ieee754_rem_pio2+0x340>)
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	ee10 0a10 	vmov	r0, s0
 80051c6:	a3b0      	add	r3, pc, #704	; (adr r3, 8005488 <__ieee754_rem_pio2+0x300>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	4629      	mov	r1, r5
 80051ce:	dd39      	ble.n	8005244 <__ieee754_rem_pio2+0xbc>
 80051d0:	f7fb f85a 	bl	8000288 <__aeabi_dsub>
 80051d4:	45b0      	cmp	r8, r6
 80051d6:	4604      	mov	r4, r0
 80051d8:	460d      	mov	r5, r1
 80051da:	d01b      	beq.n	8005214 <__ieee754_rem_pio2+0x8c>
 80051dc:	a3ac      	add	r3, pc, #688	; (adr r3, 8005490 <__ieee754_rem_pio2+0x308>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	f7fb f851 	bl	8000288 <__aeabi_dsub>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	e9ca 2300 	strd	r2, r3, [sl]
 80051ee:	4620      	mov	r0, r4
 80051f0:	4629      	mov	r1, r5
 80051f2:	f7fb f849 	bl	8000288 <__aeabi_dsub>
 80051f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005490 <__ieee754_rem_pio2+0x308>)
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f7fb f844 	bl	8000288 <__aeabi_dsub>
 8005200:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005204:	f04f 0b01 	mov.w	fp, #1
 8005208:	4658      	mov	r0, fp
 800520a:	b00b      	add	sp, #44	; 0x2c
 800520c:	ecbd 8b02 	vpop	{d8}
 8005210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005214:	a3a0      	add	r3, pc, #640	; (adr r3, 8005498 <__ieee754_rem_pio2+0x310>)
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	f7fb f835 	bl	8000288 <__aeabi_dsub>
 800521e:	a3a0      	add	r3, pc, #640	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x318>)
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	4604      	mov	r4, r0
 8005226:	460d      	mov	r5, r1
 8005228:	f7fb f82e 	bl	8000288 <__aeabi_dsub>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9ca 2300 	strd	r2, r3, [sl]
 8005234:	4620      	mov	r0, r4
 8005236:	4629      	mov	r1, r5
 8005238:	f7fb f826 	bl	8000288 <__aeabi_dsub>
 800523c:	a398      	add	r3, pc, #608	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x318>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	e7db      	b.n	80051fc <__ieee754_rem_pio2+0x74>
 8005244:	f7fb f822 	bl	800028c <__adddf3>
 8005248:	45b0      	cmp	r8, r6
 800524a:	4604      	mov	r4, r0
 800524c:	460d      	mov	r5, r1
 800524e:	d016      	beq.n	800527e <__ieee754_rem_pio2+0xf6>
 8005250:	a38f      	add	r3, pc, #572	; (adr r3, 8005490 <__ieee754_rem_pio2+0x308>)
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f7fb f819 	bl	800028c <__adddf3>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	e9ca 2300 	strd	r2, r3, [sl]
 8005262:	4620      	mov	r0, r4
 8005264:	4629      	mov	r1, r5
 8005266:	f7fb f80f 	bl	8000288 <__aeabi_dsub>
 800526a:	a389      	add	r3, pc, #548	; (adr r3, 8005490 <__ieee754_rem_pio2+0x308>)
 800526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005270:	f7fb f80c 	bl	800028c <__adddf3>
 8005274:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005278:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800527c:	e7c4      	b.n	8005208 <__ieee754_rem_pio2+0x80>
 800527e:	a386      	add	r3, pc, #536	; (adr r3, 8005498 <__ieee754_rem_pio2+0x310>)
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	f7fb f802 	bl	800028c <__adddf3>
 8005288:	a385      	add	r3, pc, #532	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x318>)
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	4604      	mov	r4, r0
 8005290:	460d      	mov	r5, r1
 8005292:	f7fa fffb 	bl	800028c <__adddf3>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	e9ca 2300 	strd	r2, r3, [sl]
 800529e:	4620      	mov	r0, r4
 80052a0:	4629      	mov	r1, r5
 80052a2:	f7fa fff1 	bl	8000288 <__aeabi_dsub>
 80052a6:	a37e      	add	r3, pc, #504	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x318>)
 80052a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ac:	e7e0      	b.n	8005270 <__ieee754_rem_pio2+0xe8>
 80052ae:	4b87      	ldr	r3, [pc, #540]	; (80054cc <__ieee754_rem_pio2+0x344>)
 80052b0:	4598      	cmp	r8, r3
 80052b2:	f300 80d9 	bgt.w	8005468 <__ieee754_rem_pio2+0x2e0>
 80052b6:	f000 fe39 	bl	8005f2c <fabs>
 80052ba:	ec55 4b10 	vmov	r4, r5, d0
 80052be:	ee10 0a10 	vmov	r0, s0
 80052c2:	a379      	add	r3, pc, #484	; (adr r3, 80054a8 <__ieee754_rem_pio2+0x320>)
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	4629      	mov	r1, r5
 80052ca:	f7fb f995 	bl	80005f8 <__aeabi_dmul>
 80052ce:	4b80      	ldr	r3, [pc, #512]	; (80054d0 <__ieee754_rem_pio2+0x348>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	f7fa ffdb 	bl	800028c <__adddf3>
 80052d6:	f7fb fc29 	bl	8000b2c <__aeabi_d2iz>
 80052da:	4683      	mov	fp, r0
 80052dc:	f7fb f922 	bl	8000524 <__aeabi_i2d>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	ec43 2b18 	vmov	d8, r2, r3
 80052e8:	a367      	add	r3, pc, #412	; (adr r3, 8005488 <__ieee754_rem_pio2+0x300>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fb f983 	bl	80005f8 <__aeabi_dmul>
 80052f2:	4602      	mov	r2, r0
 80052f4:	460b      	mov	r3, r1
 80052f6:	4620      	mov	r0, r4
 80052f8:	4629      	mov	r1, r5
 80052fa:	f7fa ffc5 	bl	8000288 <__aeabi_dsub>
 80052fe:	a364      	add	r3, pc, #400	; (adr r3, 8005490 <__ieee754_rem_pio2+0x308>)
 8005300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005304:	4606      	mov	r6, r0
 8005306:	460f      	mov	r7, r1
 8005308:	ec51 0b18 	vmov	r0, r1, d8
 800530c:	f7fb f974 	bl	80005f8 <__aeabi_dmul>
 8005310:	f1bb 0f1f 	cmp.w	fp, #31
 8005314:	4604      	mov	r4, r0
 8005316:	460d      	mov	r5, r1
 8005318:	dc0d      	bgt.n	8005336 <__ieee754_rem_pio2+0x1ae>
 800531a:	4b6e      	ldr	r3, [pc, #440]	; (80054d4 <__ieee754_rem_pio2+0x34c>)
 800531c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8005320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005324:	4543      	cmp	r3, r8
 8005326:	d006      	beq.n	8005336 <__ieee754_rem_pio2+0x1ae>
 8005328:	4622      	mov	r2, r4
 800532a:	462b      	mov	r3, r5
 800532c:	4630      	mov	r0, r6
 800532e:	4639      	mov	r1, r7
 8005330:	f7fa ffaa 	bl	8000288 <__aeabi_dsub>
 8005334:	e00f      	b.n	8005356 <__ieee754_rem_pio2+0x1ce>
 8005336:	462b      	mov	r3, r5
 8005338:	4622      	mov	r2, r4
 800533a:	4630      	mov	r0, r6
 800533c:	4639      	mov	r1, r7
 800533e:	f7fa ffa3 	bl	8000288 <__aeabi_dsub>
 8005342:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005346:	9303      	str	r3, [sp, #12]
 8005348:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800534c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005350:	f1b8 0f10 	cmp.w	r8, #16
 8005354:	dc02      	bgt.n	800535c <__ieee754_rem_pio2+0x1d4>
 8005356:	e9ca 0100 	strd	r0, r1, [sl]
 800535a:	e039      	b.n	80053d0 <__ieee754_rem_pio2+0x248>
 800535c:	a34e      	add	r3, pc, #312	; (adr r3, 8005498 <__ieee754_rem_pio2+0x310>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	ec51 0b18 	vmov	r0, r1, d8
 8005366:	f7fb f947 	bl	80005f8 <__aeabi_dmul>
 800536a:	4604      	mov	r4, r0
 800536c:	460d      	mov	r5, r1
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4630      	mov	r0, r6
 8005374:	4639      	mov	r1, r7
 8005376:	f7fa ff87 	bl	8000288 <__aeabi_dsub>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4680      	mov	r8, r0
 8005380:	4689      	mov	r9, r1
 8005382:	4630      	mov	r0, r6
 8005384:	4639      	mov	r1, r7
 8005386:	f7fa ff7f 	bl	8000288 <__aeabi_dsub>
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	f7fa ff7b 	bl	8000288 <__aeabi_dsub>
 8005392:	a343      	add	r3, pc, #268	; (adr r3, 80054a0 <__ieee754_rem_pio2+0x318>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	4604      	mov	r4, r0
 800539a:	460d      	mov	r5, r1
 800539c:	ec51 0b18 	vmov	r0, r1, d8
 80053a0:	f7fb f92a 	bl	80005f8 <__aeabi_dmul>
 80053a4:	4622      	mov	r2, r4
 80053a6:	462b      	mov	r3, r5
 80053a8:	f7fa ff6e 	bl	8000288 <__aeabi_dsub>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4604      	mov	r4, r0
 80053b2:	460d      	mov	r5, r1
 80053b4:	4640      	mov	r0, r8
 80053b6:	4649      	mov	r1, r9
 80053b8:	f7fa ff66 	bl	8000288 <__aeabi_dsub>
 80053bc:	9a03      	ldr	r2, [sp, #12]
 80053be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b31      	cmp	r3, #49	; 0x31
 80053c6:	dc24      	bgt.n	8005412 <__ieee754_rem_pio2+0x28a>
 80053c8:	e9ca 0100 	strd	r0, r1, [sl]
 80053cc:	4646      	mov	r6, r8
 80053ce:	464f      	mov	r7, r9
 80053d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80053d4:	4630      	mov	r0, r6
 80053d6:	4642      	mov	r2, r8
 80053d8:	464b      	mov	r3, r9
 80053da:	4639      	mov	r1, r7
 80053dc:	f7fa ff54 	bl	8000288 <__aeabi_dsub>
 80053e0:	462b      	mov	r3, r5
 80053e2:	4622      	mov	r2, r4
 80053e4:	f7fa ff50 	bl	8000288 <__aeabi_dsub>
 80053e8:	9b02      	ldr	r3, [sp, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053f0:	f6bf af0a 	bge.w	8005208 <__ieee754_rem_pio2+0x80>
 80053f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80053f8:	f8ca 3004 	str.w	r3, [sl, #4]
 80053fc:	f8ca 8000 	str.w	r8, [sl]
 8005400:	f8ca 0008 	str.w	r0, [sl, #8]
 8005404:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005408:	f8ca 300c 	str.w	r3, [sl, #12]
 800540c:	f1cb 0b00 	rsb	fp, fp, #0
 8005410:	e6fa      	b.n	8005208 <__ieee754_rem_pio2+0x80>
 8005412:	a327      	add	r3, pc, #156	; (adr r3, 80054b0 <__ieee754_rem_pio2+0x328>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	ec51 0b18 	vmov	r0, r1, d8
 800541c:	f7fb f8ec 	bl	80005f8 <__aeabi_dmul>
 8005420:	4604      	mov	r4, r0
 8005422:	460d      	mov	r5, r1
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4640      	mov	r0, r8
 800542a:	4649      	mov	r1, r9
 800542c:	f7fa ff2c 	bl	8000288 <__aeabi_dsub>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4606      	mov	r6, r0
 8005436:	460f      	mov	r7, r1
 8005438:	4640      	mov	r0, r8
 800543a:	4649      	mov	r1, r9
 800543c:	f7fa ff24 	bl	8000288 <__aeabi_dsub>
 8005440:	4622      	mov	r2, r4
 8005442:	462b      	mov	r3, r5
 8005444:	f7fa ff20 	bl	8000288 <__aeabi_dsub>
 8005448:	a31b      	add	r3, pc, #108	; (adr r3, 80054b8 <__ieee754_rem_pio2+0x330>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	4604      	mov	r4, r0
 8005450:	460d      	mov	r5, r1
 8005452:	ec51 0b18 	vmov	r0, r1, d8
 8005456:	f7fb f8cf 	bl	80005f8 <__aeabi_dmul>
 800545a:	4622      	mov	r2, r4
 800545c:	462b      	mov	r3, r5
 800545e:	f7fa ff13 	bl	8000288 <__aeabi_dsub>
 8005462:	4604      	mov	r4, r0
 8005464:	460d      	mov	r5, r1
 8005466:	e75f      	b.n	8005328 <__ieee754_rem_pio2+0x1a0>
 8005468:	4b1b      	ldr	r3, [pc, #108]	; (80054d8 <__ieee754_rem_pio2+0x350>)
 800546a:	4598      	cmp	r8, r3
 800546c:	dd36      	ble.n	80054dc <__ieee754_rem_pio2+0x354>
 800546e:	ee10 2a10 	vmov	r2, s0
 8005472:	462b      	mov	r3, r5
 8005474:	4620      	mov	r0, r4
 8005476:	4629      	mov	r1, r5
 8005478:	f7fa ff06 	bl	8000288 <__aeabi_dsub>
 800547c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005480:	e9ca 0100 	strd	r0, r1, [sl]
 8005484:	e694      	b.n	80051b0 <__ieee754_rem_pio2+0x28>
 8005486:	bf00      	nop
 8005488:	54400000 	.word	0x54400000
 800548c:	3ff921fb 	.word	0x3ff921fb
 8005490:	1a626331 	.word	0x1a626331
 8005494:	3dd0b461 	.word	0x3dd0b461
 8005498:	1a600000 	.word	0x1a600000
 800549c:	3dd0b461 	.word	0x3dd0b461
 80054a0:	2e037073 	.word	0x2e037073
 80054a4:	3ba3198a 	.word	0x3ba3198a
 80054a8:	6dc9c883 	.word	0x6dc9c883
 80054ac:	3fe45f30 	.word	0x3fe45f30
 80054b0:	2e000000 	.word	0x2e000000
 80054b4:	3ba3198a 	.word	0x3ba3198a
 80054b8:	252049c1 	.word	0x252049c1
 80054bc:	397b839a 	.word	0x397b839a
 80054c0:	3fe921fb 	.word	0x3fe921fb
 80054c4:	4002d97b 	.word	0x4002d97b
 80054c8:	3ff921fb 	.word	0x3ff921fb
 80054cc:	413921fb 	.word	0x413921fb
 80054d0:	3fe00000 	.word	0x3fe00000
 80054d4:	080064d0 	.word	0x080064d0
 80054d8:	7fefffff 	.word	0x7fefffff
 80054dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80054e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80054e4:	ee10 0a10 	vmov	r0, s0
 80054e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80054ec:	ee10 6a10 	vmov	r6, s0
 80054f0:	460f      	mov	r7, r1
 80054f2:	f7fb fb1b 	bl	8000b2c <__aeabi_d2iz>
 80054f6:	f7fb f815 	bl	8000524 <__aeabi_i2d>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4630      	mov	r0, r6
 8005500:	4639      	mov	r1, r7
 8005502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005506:	f7fa febf 	bl	8000288 <__aeabi_dsub>
 800550a:	4b22      	ldr	r3, [pc, #136]	; (8005594 <__ieee754_rem_pio2+0x40c>)
 800550c:	2200      	movs	r2, #0
 800550e:	f7fb f873 	bl	80005f8 <__aeabi_dmul>
 8005512:	460f      	mov	r7, r1
 8005514:	4606      	mov	r6, r0
 8005516:	f7fb fb09 	bl	8000b2c <__aeabi_d2iz>
 800551a:	f7fb f803 	bl	8000524 <__aeabi_i2d>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4630      	mov	r0, r6
 8005524:	4639      	mov	r1, r7
 8005526:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800552a:	f7fa fead 	bl	8000288 <__aeabi_dsub>
 800552e:	4b19      	ldr	r3, [pc, #100]	; (8005594 <__ieee754_rem_pio2+0x40c>)
 8005530:	2200      	movs	r2, #0
 8005532:	f7fb f861 	bl	80005f8 <__aeabi_dmul>
 8005536:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800553a:	ad04      	add	r5, sp, #16
 800553c:	f04f 0803 	mov.w	r8, #3
 8005540:	46a9      	mov	r9, r5
 8005542:	2600      	movs	r6, #0
 8005544:	2700      	movs	r7, #0
 8005546:	4632      	mov	r2, r6
 8005548:	463b      	mov	r3, r7
 800554a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800554e:	46c3      	mov	fp, r8
 8005550:	3d08      	subs	r5, #8
 8005552:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005556:	f7fb fab7 	bl	8000ac8 <__aeabi_dcmpeq>
 800555a:	2800      	cmp	r0, #0
 800555c:	d1f3      	bne.n	8005546 <__ieee754_rem_pio2+0x3be>
 800555e:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <__ieee754_rem_pio2+0x410>)
 8005560:	9301      	str	r3, [sp, #4]
 8005562:	2302      	movs	r3, #2
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	4622      	mov	r2, r4
 8005568:	465b      	mov	r3, fp
 800556a:	4651      	mov	r1, sl
 800556c:	4648      	mov	r0, r9
 800556e:	f000 f8df 	bl	8005730 <__kernel_rem_pio2>
 8005572:	9b02      	ldr	r3, [sp, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	4683      	mov	fp, r0
 8005578:	f6bf ae46 	bge.w	8005208 <__ieee754_rem_pio2+0x80>
 800557c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005580:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005584:	f8ca 3004 	str.w	r3, [sl, #4]
 8005588:	f8da 300c 	ldr.w	r3, [sl, #12]
 800558c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005590:	e73a      	b.n	8005408 <__ieee754_rem_pio2+0x280>
 8005592:	bf00      	nop
 8005594:	41700000 	.word	0x41700000
 8005598:	08006550 	.word	0x08006550
 800559c:	00000000 	.word	0x00000000

080055a0 <__kernel_cos>:
 80055a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055a4:	ec57 6b10 	vmov	r6, r7, d0
 80055a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80055ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80055b0:	ed8d 1b00 	vstr	d1, [sp]
 80055b4:	da07      	bge.n	80055c6 <__kernel_cos+0x26>
 80055b6:	ee10 0a10 	vmov	r0, s0
 80055ba:	4639      	mov	r1, r7
 80055bc:	f7fb fab6 	bl	8000b2c <__aeabi_d2iz>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	f000 8088 	beq.w	80056d6 <__kernel_cos+0x136>
 80055c6:	4632      	mov	r2, r6
 80055c8:	463b      	mov	r3, r7
 80055ca:	4630      	mov	r0, r6
 80055cc:	4639      	mov	r1, r7
 80055ce:	f7fb f813 	bl	80005f8 <__aeabi_dmul>
 80055d2:	4b51      	ldr	r3, [pc, #324]	; (8005718 <__kernel_cos+0x178>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	4604      	mov	r4, r0
 80055d8:	460d      	mov	r5, r1
 80055da:	f7fb f80d 	bl	80005f8 <__aeabi_dmul>
 80055de:	a340      	add	r3, pc, #256	; (adr r3, 80056e0 <__kernel_cos+0x140>)
 80055e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e4:	4682      	mov	sl, r0
 80055e6:	468b      	mov	fp, r1
 80055e8:	4620      	mov	r0, r4
 80055ea:	4629      	mov	r1, r5
 80055ec:	f7fb f804 	bl	80005f8 <__aeabi_dmul>
 80055f0:	a33d      	add	r3, pc, #244	; (adr r3, 80056e8 <__kernel_cos+0x148>)
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f7fa fe49 	bl	800028c <__adddf3>
 80055fa:	4622      	mov	r2, r4
 80055fc:	462b      	mov	r3, r5
 80055fe:	f7fa fffb 	bl	80005f8 <__aeabi_dmul>
 8005602:	a33b      	add	r3, pc, #236	; (adr r3, 80056f0 <__kernel_cos+0x150>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fa fe3e 	bl	8000288 <__aeabi_dsub>
 800560c:	4622      	mov	r2, r4
 800560e:	462b      	mov	r3, r5
 8005610:	f7fa fff2 	bl	80005f8 <__aeabi_dmul>
 8005614:	a338      	add	r3, pc, #224	; (adr r3, 80056f8 <__kernel_cos+0x158>)
 8005616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561a:	f7fa fe37 	bl	800028c <__adddf3>
 800561e:	4622      	mov	r2, r4
 8005620:	462b      	mov	r3, r5
 8005622:	f7fa ffe9 	bl	80005f8 <__aeabi_dmul>
 8005626:	a336      	add	r3, pc, #216	; (adr r3, 8005700 <__kernel_cos+0x160>)
 8005628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562c:	f7fa fe2c 	bl	8000288 <__aeabi_dsub>
 8005630:	4622      	mov	r2, r4
 8005632:	462b      	mov	r3, r5
 8005634:	f7fa ffe0 	bl	80005f8 <__aeabi_dmul>
 8005638:	a333      	add	r3, pc, #204	; (adr r3, 8005708 <__kernel_cos+0x168>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fa fe25 	bl	800028c <__adddf3>
 8005642:	4622      	mov	r2, r4
 8005644:	462b      	mov	r3, r5
 8005646:	f7fa ffd7 	bl	80005f8 <__aeabi_dmul>
 800564a:	4622      	mov	r2, r4
 800564c:	462b      	mov	r3, r5
 800564e:	f7fa ffd3 	bl	80005f8 <__aeabi_dmul>
 8005652:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005656:	4604      	mov	r4, r0
 8005658:	460d      	mov	r5, r1
 800565a:	4630      	mov	r0, r6
 800565c:	4639      	mov	r1, r7
 800565e:	f7fa ffcb 	bl	80005f8 <__aeabi_dmul>
 8005662:	460b      	mov	r3, r1
 8005664:	4602      	mov	r2, r0
 8005666:	4629      	mov	r1, r5
 8005668:	4620      	mov	r0, r4
 800566a:	f7fa fe0d 	bl	8000288 <__aeabi_dsub>
 800566e:	4b2b      	ldr	r3, [pc, #172]	; (800571c <__kernel_cos+0x17c>)
 8005670:	4598      	cmp	r8, r3
 8005672:	4606      	mov	r6, r0
 8005674:	460f      	mov	r7, r1
 8005676:	dc10      	bgt.n	800569a <__kernel_cos+0xfa>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4650      	mov	r0, sl
 800567e:	4659      	mov	r1, fp
 8005680:	f7fa fe02 	bl	8000288 <__aeabi_dsub>
 8005684:	460b      	mov	r3, r1
 8005686:	4926      	ldr	r1, [pc, #152]	; (8005720 <__kernel_cos+0x180>)
 8005688:	4602      	mov	r2, r0
 800568a:	2000      	movs	r0, #0
 800568c:	f7fa fdfc 	bl	8000288 <__aeabi_dsub>
 8005690:	ec41 0b10 	vmov	d0, r0, r1
 8005694:	b003      	add	sp, #12
 8005696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569a:	4b22      	ldr	r3, [pc, #136]	; (8005724 <__kernel_cos+0x184>)
 800569c:	4920      	ldr	r1, [pc, #128]	; (8005720 <__kernel_cos+0x180>)
 800569e:	4598      	cmp	r8, r3
 80056a0:	bfcc      	ite	gt
 80056a2:	4d21      	ldrgt	r5, [pc, #132]	; (8005728 <__kernel_cos+0x188>)
 80056a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80056a8:	2400      	movs	r4, #0
 80056aa:	4622      	mov	r2, r4
 80056ac:	462b      	mov	r3, r5
 80056ae:	2000      	movs	r0, #0
 80056b0:	f7fa fdea 	bl	8000288 <__aeabi_dsub>
 80056b4:	4622      	mov	r2, r4
 80056b6:	4680      	mov	r8, r0
 80056b8:	4689      	mov	r9, r1
 80056ba:	462b      	mov	r3, r5
 80056bc:	4650      	mov	r0, sl
 80056be:	4659      	mov	r1, fp
 80056c0:	f7fa fde2 	bl	8000288 <__aeabi_dsub>
 80056c4:	4632      	mov	r2, r6
 80056c6:	463b      	mov	r3, r7
 80056c8:	f7fa fdde 	bl	8000288 <__aeabi_dsub>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	e7da      	b.n	800568c <__kernel_cos+0xec>
 80056d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005710 <__kernel_cos+0x170>
 80056da:	e7db      	b.n	8005694 <__kernel_cos+0xf4>
 80056dc:	f3af 8000 	nop.w
 80056e0:	be8838d4 	.word	0xbe8838d4
 80056e4:	bda8fae9 	.word	0xbda8fae9
 80056e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80056ec:	3e21ee9e 	.word	0x3e21ee9e
 80056f0:	809c52ad 	.word	0x809c52ad
 80056f4:	3e927e4f 	.word	0x3e927e4f
 80056f8:	19cb1590 	.word	0x19cb1590
 80056fc:	3efa01a0 	.word	0x3efa01a0
 8005700:	16c15177 	.word	0x16c15177
 8005704:	3f56c16c 	.word	0x3f56c16c
 8005708:	5555554c 	.word	0x5555554c
 800570c:	3fa55555 	.word	0x3fa55555
 8005710:	00000000 	.word	0x00000000
 8005714:	3ff00000 	.word	0x3ff00000
 8005718:	3fe00000 	.word	0x3fe00000
 800571c:	3fd33332 	.word	0x3fd33332
 8005720:	3ff00000 	.word	0x3ff00000
 8005724:	3fe90000 	.word	0x3fe90000
 8005728:	3fd20000 	.word	0x3fd20000
 800572c:	00000000 	.word	0x00000000

08005730 <__kernel_rem_pio2>:
 8005730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	ed2d 8b02 	vpush	{d8}
 8005738:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800573c:	f112 0f14 	cmn.w	r2, #20
 8005740:	9308      	str	r3, [sp, #32]
 8005742:	9101      	str	r1, [sp, #4]
 8005744:	4bc6      	ldr	r3, [pc, #792]	; (8005a60 <__kernel_rem_pio2+0x330>)
 8005746:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005748:	9009      	str	r0, [sp, #36]	; 0x24
 800574a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800574e:	9304      	str	r3, [sp, #16]
 8005750:	9b08      	ldr	r3, [sp, #32]
 8005752:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005756:	bfa8      	it	ge
 8005758:	1ed4      	subge	r4, r2, #3
 800575a:	9306      	str	r3, [sp, #24]
 800575c:	bfb2      	itee	lt
 800575e:	2400      	movlt	r4, #0
 8005760:	2318      	movge	r3, #24
 8005762:	fb94 f4f3 	sdivge	r4, r4, r3
 8005766:	f06f 0317 	mvn.w	r3, #23
 800576a:	fb04 3303 	mla	r3, r4, r3, r3
 800576e:	eb03 0a02 	add.w	sl, r3, r2
 8005772:	9b04      	ldr	r3, [sp, #16]
 8005774:	9a06      	ldr	r2, [sp, #24]
 8005776:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005a50 <__kernel_rem_pio2+0x320>
 800577a:	eb03 0802 	add.w	r8, r3, r2
 800577e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8005780:	1aa7      	subs	r7, r4, r2
 8005782:	ae20      	add	r6, sp, #128	; 0x80
 8005784:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005788:	2500      	movs	r5, #0
 800578a:	4545      	cmp	r5, r8
 800578c:	dd18      	ble.n	80057c0 <__kernel_rem_pio2+0x90>
 800578e:	9b08      	ldr	r3, [sp, #32]
 8005790:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005794:	aa20      	add	r2, sp, #128	; 0x80
 8005796:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005a50 <__kernel_rem_pio2+0x320>
 800579a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800579e:	f1c3 0301 	rsb	r3, r3, #1
 80057a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80057a6:	9307      	str	r3, [sp, #28]
 80057a8:	9b07      	ldr	r3, [sp, #28]
 80057aa:	9a04      	ldr	r2, [sp, #16]
 80057ac:	4443      	add	r3, r8
 80057ae:	429a      	cmp	r2, r3
 80057b0:	db2f      	blt.n	8005812 <__kernel_rem_pio2+0xe2>
 80057b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80057b6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80057ba:	462f      	mov	r7, r5
 80057bc:	2600      	movs	r6, #0
 80057be:	e01b      	b.n	80057f8 <__kernel_rem_pio2+0xc8>
 80057c0:	42ef      	cmn	r7, r5
 80057c2:	d407      	bmi.n	80057d4 <__kernel_rem_pio2+0xa4>
 80057c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80057c8:	f7fa feac 	bl	8000524 <__aeabi_i2d>
 80057cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 80057d0:	3501      	adds	r5, #1
 80057d2:	e7da      	b.n	800578a <__kernel_rem_pio2+0x5a>
 80057d4:	ec51 0b18 	vmov	r0, r1, d8
 80057d8:	e7f8      	b.n	80057cc <__kernel_rem_pio2+0x9c>
 80057da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057de:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80057e2:	f7fa ff09 	bl	80005f8 <__aeabi_dmul>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ee:	f7fa fd4d 	bl	800028c <__adddf3>
 80057f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057f6:	3601      	adds	r6, #1
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	429e      	cmp	r6, r3
 80057fc:	f1a7 0708 	sub.w	r7, r7, #8
 8005800:	ddeb      	ble.n	80057da <__kernel_rem_pio2+0xaa>
 8005802:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005806:	3508      	adds	r5, #8
 8005808:	ecab 7b02 	vstmia	fp!, {d7}
 800580c:	f108 0801 	add.w	r8, r8, #1
 8005810:	e7ca      	b.n	80057a8 <__kernel_rem_pio2+0x78>
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	aa0c      	add	r2, sp, #48	; 0x30
 8005816:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800581a:	930b      	str	r3, [sp, #44]	; 0x2c
 800581c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800581e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005822:	9c04      	ldr	r4, [sp, #16]
 8005824:	930a      	str	r3, [sp, #40]	; 0x28
 8005826:	ab98      	add	r3, sp, #608	; 0x260
 8005828:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800582c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005830:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005834:	f8cd b008 	str.w	fp, [sp, #8]
 8005838:	4625      	mov	r5, r4
 800583a:	2d00      	cmp	r5, #0
 800583c:	dc78      	bgt.n	8005930 <__kernel_rem_pio2+0x200>
 800583e:	ec47 6b10 	vmov	d0, r6, r7
 8005842:	4650      	mov	r0, sl
 8005844:	f000 fbfc 	bl	8006040 <scalbn>
 8005848:	ec57 6b10 	vmov	r6, r7, d0
 800584c:	2200      	movs	r2, #0
 800584e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005852:	ee10 0a10 	vmov	r0, s0
 8005856:	4639      	mov	r1, r7
 8005858:	f7fa fece 	bl	80005f8 <__aeabi_dmul>
 800585c:	ec41 0b10 	vmov	d0, r0, r1
 8005860:	f000 fb6e 	bl	8005f40 <floor>
 8005864:	4b7f      	ldr	r3, [pc, #508]	; (8005a64 <__kernel_rem_pio2+0x334>)
 8005866:	ec51 0b10 	vmov	r0, r1, d0
 800586a:	2200      	movs	r2, #0
 800586c:	f7fa fec4 	bl	80005f8 <__aeabi_dmul>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4630      	mov	r0, r6
 8005876:	4639      	mov	r1, r7
 8005878:	f7fa fd06 	bl	8000288 <__aeabi_dsub>
 800587c:	460f      	mov	r7, r1
 800587e:	4606      	mov	r6, r0
 8005880:	f7fb f954 	bl	8000b2c <__aeabi_d2iz>
 8005884:	9007      	str	r0, [sp, #28]
 8005886:	f7fa fe4d 	bl	8000524 <__aeabi_i2d>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4630      	mov	r0, r6
 8005890:	4639      	mov	r1, r7
 8005892:	f7fa fcf9 	bl	8000288 <__aeabi_dsub>
 8005896:	f1ba 0f00 	cmp.w	sl, #0
 800589a:	4606      	mov	r6, r0
 800589c:	460f      	mov	r7, r1
 800589e:	dd70      	ble.n	8005982 <__kernel_rem_pio2+0x252>
 80058a0:	1e62      	subs	r2, r4, #1
 80058a2:	ab0c      	add	r3, sp, #48	; 0x30
 80058a4:	9d07      	ldr	r5, [sp, #28]
 80058a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80058aa:	f1ca 0118 	rsb	r1, sl, #24
 80058ae:	fa40 f301 	asr.w	r3, r0, r1
 80058b2:	441d      	add	r5, r3
 80058b4:	408b      	lsls	r3, r1
 80058b6:	1ac0      	subs	r0, r0, r3
 80058b8:	ab0c      	add	r3, sp, #48	; 0x30
 80058ba:	9507      	str	r5, [sp, #28]
 80058bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80058c0:	f1ca 0317 	rsb	r3, sl, #23
 80058c4:	fa40 f303 	asr.w	r3, r0, r3
 80058c8:	9302      	str	r3, [sp, #8]
 80058ca:	9b02      	ldr	r3, [sp, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dd66      	ble.n	800599e <__kernel_rem_pio2+0x26e>
 80058d0:	9b07      	ldr	r3, [sp, #28]
 80058d2:	2200      	movs	r2, #0
 80058d4:	3301      	adds	r3, #1
 80058d6:	9307      	str	r3, [sp, #28]
 80058d8:	4615      	mov	r5, r2
 80058da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80058de:	4294      	cmp	r4, r2
 80058e0:	f300 8099 	bgt.w	8005a16 <__kernel_rem_pio2+0x2e6>
 80058e4:	f1ba 0f00 	cmp.w	sl, #0
 80058e8:	dd07      	ble.n	80058fa <__kernel_rem_pio2+0x1ca>
 80058ea:	f1ba 0f01 	cmp.w	sl, #1
 80058ee:	f000 80a5 	beq.w	8005a3c <__kernel_rem_pio2+0x30c>
 80058f2:	f1ba 0f02 	cmp.w	sl, #2
 80058f6:	f000 80c1 	beq.w	8005a7c <__kernel_rem_pio2+0x34c>
 80058fa:	9b02      	ldr	r3, [sp, #8]
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d14e      	bne.n	800599e <__kernel_rem_pio2+0x26e>
 8005900:	4632      	mov	r2, r6
 8005902:	463b      	mov	r3, r7
 8005904:	4958      	ldr	r1, [pc, #352]	; (8005a68 <__kernel_rem_pio2+0x338>)
 8005906:	2000      	movs	r0, #0
 8005908:	f7fa fcbe 	bl	8000288 <__aeabi_dsub>
 800590c:	4606      	mov	r6, r0
 800590e:	460f      	mov	r7, r1
 8005910:	2d00      	cmp	r5, #0
 8005912:	d044      	beq.n	800599e <__kernel_rem_pio2+0x26e>
 8005914:	4650      	mov	r0, sl
 8005916:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005a58 <__kernel_rem_pio2+0x328>
 800591a:	f000 fb91 	bl	8006040 <scalbn>
 800591e:	4630      	mov	r0, r6
 8005920:	4639      	mov	r1, r7
 8005922:	ec53 2b10 	vmov	r2, r3, d0
 8005926:	f7fa fcaf 	bl	8000288 <__aeabi_dsub>
 800592a:	4606      	mov	r6, r0
 800592c:	460f      	mov	r7, r1
 800592e:	e036      	b.n	800599e <__kernel_rem_pio2+0x26e>
 8005930:	4b4e      	ldr	r3, [pc, #312]	; (8005a6c <__kernel_rem_pio2+0x33c>)
 8005932:	2200      	movs	r2, #0
 8005934:	4630      	mov	r0, r6
 8005936:	4639      	mov	r1, r7
 8005938:	f7fa fe5e 	bl	80005f8 <__aeabi_dmul>
 800593c:	f7fb f8f6 	bl	8000b2c <__aeabi_d2iz>
 8005940:	f7fa fdf0 	bl	8000524 <__aeabi_i2d>
 8005944:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <__kernel_rem_pio2+0x340>)
 8005946:	2200      	movs	r2, #0
 8005948:	4680      	mov	r8, r0
 800594a:	4689      	mov	r9, r1
 800594c:	f7fa fe54 	bl	80005f8 <__aeabi_dmul>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4630      	mov	r0, r6
 8005956:	4639      	mov	r1, r7
 8005958:	f7fa fc96 	bl	8000288 <__aeabi_dsub>
 800595c:	f7fb f8e6 	bl	8000b2c <__aeabi_d2iz>
 8005960:	9b02      	ldr	r3, [sp, #8]
 8005962:	f843 0b04 	str.w	r0, [r3], #4
 8005966:	3d01      	subs	r5, #1
 8005968:	9302      	str	r3, [sp, #8]
 800596a:	ab70      	add	r3, sp, #448	; 0x1c0
 800596c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	4640      	mov	r0, r8
 8005976:	4649      	mov	r1, r9
 8005978:	f7fa fc88 	bl	800028c <__adddf3>
 800597c:	4606      	mov	r6, r0
 800597e:	460f      	mov	r7, r1
 8005980:	e75b      	b.n	800583a <__kernel_rem_pio2+0x10a>
 8005982:	d105      	bne.n	8005990 <__kernel_rem_pio2+0x260>
 8005984:	1e63      	subs	r3, r4, #1
 8005986:	aa0c      	add	r2, sp, #48	; 0x30
 8005988:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800598c:	15c3      	asrs	r3, r0, #23
 800598e:	e79b      	b.n	80058c8 <__kernel_rem_pio2+0x198>
 8005990:	4b38      	ldr	r3, [pc, #224]	; (8005a74 <__kernel_rem_pio2+0x344>)
 8005992:	2200      	movs	r2, #0
 8005994:	f7fb f8b6 	bl	8000b04 <__aeabi_dcmpge>
 8005998:	2800      	cmp	r0, #0
 800599a:	d139      	bne.n	8005a10 <__kernel_rem_pio2+0x2e0>
 800599c:	9002      	str	r0, [sp, #8]
 800599e:	2200      	movs	r2, #0
 80059a0:	2300      	movs	r3, #0
 80059a2:	4630      	mov	r0, r6
 80059a4:	4639      	mov	r1, r7
 80059a6:	f7fb f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 80059aa:	2800      	cmp	r0, #0
 80059ac:	f000 80b4 	beq.w	8005b18 <__kernel_rem_pio2+0x3e8>
 80059b0:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 80059b4:	465b      	mov	r3, fp
 80059b6:	2200      	movs	r2, #0
 80059b8:	9904      	ldr	r1, [sp, #16]
 80059ba:	428b      	cmp	r3, r1
 80059bc:	da65      	bge.n	8005a8a <__kernel_rem_pio2+0x35a>
 80059be:	2a00      	cmp	r2, #0
 80059c0:	d07b      	beq.n	8005aba <__kernel_rem_pio2+0x38a>
 80059c2:	ab0c      	add	r3, sp, #48	; 0x30
 80059c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80059c8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 80a0 	beq.w	8005b12 <__kernel_rem_pio2+0x3e2>
 80059d2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005a58 <__kernel_rem_pio2+0x328>
 80059d6:	4650      	mov	r0, sl
 80059d8:	f000 fb32 	bl	8006040 <scalbn>
 80059dc:	4f23      	ldr	r7, [pc, #140]	; (8005a6c <__kernel_rem_pio2+0x33c>)
 80059de:	ec55 4b10 	vmov	r4, r5, d0
 80059e2:	46d8      	mov	r8, fp
 80059e4:	2600      	movs	r6, #0
 80059e6:	f1b8 0f00 	cmp.w	r8, #0
 80059ea:	f280 80cf 	bge.w	8005b8c <__kernel_rem_pio2+0x45c>
 80059ee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005a50 <__kernel_rem_pio2+0x320>
 80059f2:	465f      	mov	r7, fp
 80059f4:	f04f 0800 	mov.w	r8, #0
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	f2c0 80fd 	blt.w	8005bf8 <__kernel_rem_pio2+0x4c8>
 80059fe:	ab70      	add	r3, sp, #448	; 0x1c0
 8005a00:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005a78 <__kernel_rem_pio2+0x348>
 8005a04:	ec55 4b18 	vmov	r4, r5, d8
 8005a08:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005a0c:	2600      	movs	r6, #0
 8005a0e:	e0e5      	b.n	8005bdc <__kernel_rem_pio2+0x4ac>
 8005a10:	2302      	movs	r3, #2
 8005a12:	9302      	str	r3, [sp, #8]
 8005a14:	e75c      	b.n	80058d0 <__kernel_rem_pio2+0x1a0>
 8005a16:	f8db 3000 	ldr.w	r3, [fp]
 8005a1a:	b955      	cbnz	r5, 8005a32 <__kernel_rem_pio2+0x302>
 8005a1c:	b123      	cbz	r3, 8005a28 <__kernel_rem_pio2+0x2f8>
 8005a1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005a22:	f8cb 3000 	str.w	r3, [fp]
 8005a26:	2301      	movs	r3, #1
 8005a28:	3201      	adds	r2, #1
 8005a2a:	f10b 0b04 	add.w	fp, fp, #4
 8005a2e:	461d      	mov	r5, r3
 8005a30:	e755      	b.n	80058de <__kernel_rem_pio2+0x1ae>
 8005a32:	1acb      	subs	r3, r1, r3
 8005a34:	f8cb 3000 	str.w	r3, [fp]
 8005a38:	462b      	mov	r3, r5
 8005a3a:	e7f5      	b.n	8005a28 <__kernel_rem_pio2+0x2f8>
 8005a3c:	1e62      	subs	r2, r4, #1
 8005a3e:	ab0c      	add	r3, sp, #48	; 0x30
 8005a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005a48:	a90c      	add	r1, sp, #48	; 0x30
 8005a4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005a4e:	e754      	b.n	80058fa <__kernel_rem_pio2+0x1ca>
	...
 8005a5c:	3ff00000 	.word	0x3ff00000
 8005a60:	08006698 	.word	0x08006698
 8005a64:	40200000 	.word	0x40200000
 8005a68:	3ff00000 	.word	0x3ff00000
 8005a6c:	3e700000 	.word	0x3e700000
 8005a70:	41700000 	.word	0x41700000
 8005a74:	3fe00000 	.word	0x3fe00000
 8005a78:	08006658 	.word	0x08006658
 8005a7c:	1e62      	subs	r2, r4, #1
 8005a7e:	ab0c      	add	r3, sp, #48	; 0x30
 8005a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a88:	e7de      	b.n	8005a48 <__kernel_rem_pio2+0x318>
 8005a8a:	a90c      	add	r1, sp, #48	; 0x30
 8005a8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	430a      	orrs	r2, r1
 8005a94:	e790      	b.n	80059b8 <__kernel_rem_pio2+0x288>
 8005a96:	3301      	adds	r3, #1
 8005a98:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005a9c:	2900      	cmp	r1, #0
 8005a9e:	d0fa      	beq.n	8005a96 <__kernel_rem_pio2+0x366>
 8005aa0:	9a08      	ldr	r2, [sp, #32]
 8005aa2:	18e3      	adds	r3, r4, r3
 8005aa4:	18a6      	adds	r6, r4, r2
 8005aa6:	aa20      	add	r2, sp, #128	; 0x80
 8005aa8:	1c65      	adds	r5, r4, #1
 8005aaa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005aae:	9302      	str	r3, [sp, #8]
 8005ab0:	9b02      	ldr	r3, [sp, #8]
 8005ab2:	42ab      	cmp	r3, r5
 8005ab4:	da04      	bge.n	8005ac0 <__kernel_rem_pio2+0x390>
 8005ab6:	461c      	mov	r4, r3
 8005ab8:	e6b5      	b.n	8005826 <__kernel_rem_pio2+0xf6>
 8005aba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005abc:	2301      	movs	r3, #1
 8005abe:	e7eb      	b.n	8005a98 <__kernel_rem_pio2+0x368>
 8005ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ac6:	f7fa fd2d 	bl	8000524 <__aeabi_i2d>
 8005aca:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad0:	46b3      	mov	fp, r6
 8005ad2:	461c      	mov	r4, r3
 8005ad4:	2700      	movs	r7, #0
 8005ad6:	f04f 0800 	mov.w	r8, #0
 8005ada:	f04f 0900 	mov.w	r9, #0
 8005ade:	9b06      	ldr	r3, [sp, #24]
 8005ae0:	429f      	cmp	r7, r3
 8005ae2:	dd06      	ble.n	8005af2 <__kernel_rem_pio2+0x3c2>
 8005ae4:	ab70      	add	r3, sp, #448	; 0x1c0
 8005ae6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005aea:	e9c3 8900 	strd	r8, r9, [r3]
 8005aee:	3501      	adds	r5, #1
 8005af0:	e7de      	b.n	8005ab0 <__kernel_rem_pio2+0x380>
 8005af2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005af6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005afa:	f7fa fd7d 	bl	80005f8 <__aeabi_dmul>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4640      	mov	r0, r8
 8005b04:	4649      	mov	r1, r9
 8005b06:	f7fa fbc1 	bl	800028c <__adddf3>
 8005b0a:	3701      	adds	r7, #1
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	4689      	mov	r9, r1
 8005b10:	e7e5      	b.n	8005ade <__kernel_rem_pio2+0x3ae>
 8005b12:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005b16:	e754      	b.n	80059c2 <__kernel_rem_pio2+0x292>
 8005b18:	ec47 6b10 	vmov	d0, r6, r7
 8005b1c:	f1ca 0000 	rsb	r0, sl, #0
 8005b20:	f000 fa8e 	bl	8006040 <scalbn>
 8005b24:	ec57 6b10 	vmov	r6, r7, d0
 8005b28:	4b9f      	ldr	r3, [pc, #636]	; (8005da8 <__kernel_rem_pio2+0x678>)
 8005b2a:	ee10 0a10 	vmov	r0, s0
 8005b2e:	2200      	movs	r2, #0
 8005b30:	4639      	mov	r1, r7
 8005b32:	f7fa ffe7 	bl	8000b04 <__aeabi_dcmpge>
 8005b36:	b300      	cbz	r0, 8005b7a <__kernel_rem_pio2+0x44a>
 8005b38:	4b9c      	ldr	r3, [pc, #624]	; (8005dac <__kernel_rem_pio2+0x67c>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	4639      	mov	r1, r7
 8005b40:	f7fa fd5a 	bl	80005f8 <__aeabi_dmul>
 8005b44:	f7fa fff2 	bl	8000b2c <__aeabi_d2iz>
 8005b48:	4605      	mov	r5, r0
 8005b4a:	f7fa fceb 	bl	8000524 <__aeabi_i2d>
 8005b4e:	4b96      	ldr	r3, [pc, #600]	; (8005da8 <__kernel_rem_pio2+0x678>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	f7fa fd51 	bl	80005f8 <__aeabi_dmul>
 8005b56:	460b      	mov	r3, r1
 8005b58:	4602      	mov	r2, r0
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	f7fa fb93 	bl	8000288 <__aeabi_dsub>
 8005b62:	f7fa ffe3 	bl	8000b2c <__aeabi_d2iz>
 8005b66:	f104 0b01 	add.w	fp, r4, #1
 8005b6a:	ab0c      	add	r3, sp, #48	; 0x30
 8005b6c:	f10a 0a18 	add.w	sl, sl, #24
 8005b70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b74:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005b78:	e72b      	b.n	80059d2 <__kernel_rem_pio2+0x2a2>
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	f7fa ffd5 	bl	8000b2c <__aeabi_d2iz>
 8005b82:	ab0c      	add	r3, sp, #48	; 0x30
 8005b84:	46a3      	mov	fp, r4
 8005b86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005b8a:	e722      	b.n	80059d2 <__kernel_rem_pio2+0x2a2>
 8005b8c:	ab70      	add	r3, sp, #448	; 0x1c0
 8005b8e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8005b92:	ab0c      	add	r3, sp, #48	; 0x30
 8005b94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005b98:	f7fa fcc4 	bl	8000524 <__aeabi_i2d>
 8005b9c:	4622      	mov	r2, r4
 8005b9e:	462b      	mov	r3, r5
 8005ba0:	f7fa fd2a 	bl	80005f8 <__aeabi_dmul>
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	e9c9 0100 	strd	r0, r1, [r9]
 8005baa:	463b      	mov	r3, r7
 8005bac:	4620      	mov	r0, r4
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7fa fd22 	bl	80005f8 <__aeabi_dmul>
 8005bb4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005bb8:	4604      	mov	r4, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	e713      	b.n	80059e6 <__kernel_rem_pio2+0x2b6>
 8005bbe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005bc2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005bc6:	f7fa fd17 	bl	80005f8 <__aeabi_dmul>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f7fa fb5b 	bl	800028c <__adddf3>
 8005bd6:	3601      	adds	r6, #1
 8005bd8:	4604      	mov	r4, r0
 8005bda:	460d      	mov	r5, r1
 8005bdc:	9b04      	ldr	r3, [sp, #16]
 8005bde:	429e      	cmp	r6, r3
 8005be0:	dc01      	bgt.n	8005be6 <__kernel_rem_pio2+0x4b6>
 8005be2:	45b0      	cmp	r8, r6
 8005be4:	daeb      	bge.n	8005bbe <__kernel_rem_pio2+0x48e>
 8005be6:	ab48      	add	r3, sp, #288	; 0x120
 8005be8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005bec:	e9c3 4500 	strd	r4, r5, [r3]
 8005bf0:	3f01      	subs	r7, #1
 8005bf2:	f108 0801 	add.w	r8, r8, #1
 8005bf6:	e6ff      	b.n	80059f8 <__kernel_rem_pio2+0x2c8>
 8005bf8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	dc0b      	bgt.n	8005c16 <__kernel_rem_pio2+0x4e6>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	dc6e      	bgt.n	8005ce0 <__kernel_rem_pio2+0x5b0>
 8005c02:	d045      	beq.n	8005c90 <__kernel_rem_pio2+0x560>
 8005c04:	9b07      	ldr	r3, [sp, #28]
 8005c06:	f003 0007 	and.w	r0, r3, #7
 8005c0a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005c0e:	ecbd 8b02 	vpop	{d8}
 8005c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d1f3      	bne.n	8005c04 <__kernel_rem_pio2+0x4d4>
 8005c1c:	ab48      	add	r3, sp, #288	; 0x120
 8005c1e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8005c22:	46d0      	mov	r8, sl
 8005c24:	46d9      	mov	r9, fp
 8005c26:	f1b9 0f00 	cmp.w	r9, #0
 8005c2a:	f1a8 0808 	sub.w	r8, r8, #8
 8005c2e:	dc64      	bgt.n	8005cfa <__kernel_rem_pio2+0x5ca>
 8005c30:	465c      	mov	r4, fp
 8005c32:	2c01      	cmp	r4, #1
 8005c34:	f1aa 0a08 	sub.w	sl, sl, #8
 8005c38:	dc7e      	bgt.n	8005d38 <__kernel_rem_pio2+0x608>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	f1bb 0f01 	cmp.w	fp, #1
 8005c42:	f300 8097 	bgt.w	8005d74 <__kernel_rem_pio2+0x644>
 8005c46:	9b02      	ldr	r3, [sp, #8]
 8005c48:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8005c4c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f040 8099 	bne.w	8005d88 <__kernel_rem_pio2+0x658>
 8005c56:	9b01      	ldr	r3, [sp, #4]
 8005c58:	e9c3 5600 	strd	r5, r6, [r3]
 8005c5c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005c60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005c64:	e7ce      	b.n	8005c04 <__kernel_rem_pio2+0x4d4>
 8005c66:	ab48      	add	r3, sp, #288	; 0x120
 8005c68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f7fa fb0c 	bl	800028c <__adddf3>
 8005c74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005c78:	f1bb 0f00 	cmp.w	fp, #0
 8005c7c:	daf3      	bge.n	8005c66 <__kernel_rem_pio2+0x536>
 8005c7e:	9b02      	ldr	r3, [sp, #8]
 8005c80:	b113      	cbz	r3, 8005c88 <__kernel_rem_pio2+0x558>
 8005c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c86:	4619      	mov	r1, r3
 8005c88:	9b01      	ldr	r3, [sp, #4]
 8005c8a:	e9c3 0100 	strd	r0, r1, [r3]
 8005c8e:	e7b9      	b.n	8005c04 <__kernel_rem_pio2+0x4d4>
 8005c90:	2000      	movs	r0, #0
 8005c92:	2100      	movs	r1, #0
 8005c94:	e7f0      	b.n	8005c78 <__kernel_rem_pio2+0x548>
 8005c96:	ab48      	add	r3, sp, #288	; 0x120
 8005c98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f7fa faf4 	bl	800028c <__adddf3>
 8005ca4:	3c01      	subs	r4, #1
 8005ca6:	2c00      	cmp	r4, #0
 8005ca8:	daf5      	bge.n	8005c96 <__kernel_rem_pio2+0x566>
 8005caa:	9b02      	ldr	r3, [sp, #8]
 8005cac:	b1e3      	cbz	r3, 8005ce8 <__kernel_rem_pio2+0x5b8>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cb4:	9c01      	ldr	r4, [sp, #4]
 8005cb6:	e9c4 2300 	strd	r2, r3, [r4]
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005cc2:	f7fa fae1 	bl	8000288 <__aeabi_dsub>
 8005cc6:	ad4a      	add	r5, sp, #296	; 0x128
 8005cc8:	2401      	movs	r4, #1
 8005cca:	45a3      	cmp	fp, r4
 8005ccc:	da0f      	bge.n	8005cee <__kernel_rem_pio2+0x5be>
 8005cce:	9b02      	ldr	r3, [sp, #8]
 8005cd0:	b113      	cbz	r3, 8005cd8 <__kernel_rem_pio2+0x5a8>
 8005cd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	9b01      	ldr	r3, [sp, #4]
 8005cda:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005cde:	e791      	b.n	8005c04 <__kernel_rem_pio2+0x4d4>
 8005ce0:	465c      	mov	r4, fp
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	e7de      	b.n	8005ca6 <__kernel_rem_pio2+0x576>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	e7e2      	b.n	8005cb4 <__kernel_rem_pio2+0x584>
 8005cee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005cf2:	f7fa facb 	bl	800028c <__adddf3>
 8005cf6:	3401      	adds	r4, #1
 8005cf8:	e7e7      	b.n	8005cca <__kernel_rem_pio2+0x59a>
 8005cfa:	e9d8 4500 	ldrd	r4, r5, [r8]
 8005cfe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8005d02:	4620      	mov	r0, r4
 8005d04:	4632      	mov	r2, r6
 8005d06:	463b      	mov	r3, r7
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f7fa fabf 	bl	800028c <__adddf3>
 8005d0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4620      	mov	r0, r4
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7fa fab5 	bl	8000288 <__aeabi_dsub>
 8005d1e:	4632      	mov	r2, r6
 8005d20:	463b      	mov	r3, r7
 8005d22:	f7fa fab3 	bl	800028c <__adddf3>
 8005d26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005d2a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005d2e:	ed88 7b00 	vstr	d7, [r8]
 8005d32:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005d36:	e776      	b.n	8005c26 <__kernel_rem_pio2+0x4f6>
 8005d38:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d3c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005d40:	4640      	mov	r0, r8
 8005d42:	4632      	mov	r2, r6
 8005d44:	463b      	mov	r3, r7
 8005d46:	4649      	mov	r1, r9
 8005d48:	f7fa faa0 	bl	800028c <__adddf3>
 8005d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4640      	mov	r0, r8
 8005d56:	4649      	mov	r1, r9
 8005d58:	f7fa fa96 	bl	8000288 <__aeabi_dsub>
 8005d5c:	4632      	mov	r2, r6
 8005d5e:	463b      	mov	r3, r7
 8005d60:	f7fa fa94 	bl	800028c <__adddf3>
 8005d64:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005d68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d6c:	ed8a 7b00 	vstr	d7, [sl]
 8005d70:	3c01      	subs	r4, #1
 8005d72:	e75e      	b.n	8005c32 <__kernel_rem_pio2+0x502>
 8005d74:	ab48      	add	r3, sp, #288	; 0x120
 8005d76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f7fa fa85 	bl	800028c <__adddf3>
 8005d82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005d86:	e75a      	b.n	8005c3e <__kernel_rem_pio2+0x50e>
 8005d88:	9b01      	ldr	r3, [sp, #4]
 8005d8a:	9a01      	ldr	r2, [sp, #4]
 8005d8c:	601d      	str	r5, [r3, #0]
 8005d8e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005d92:	605c      	str	r4, [r3, #4]
 8005d94:	609f      	str	r7, [r3, #8]
 8005d96:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005d9a:	60d3      	str	r3, [r2, #12]
 8005d9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005da0:	6110      	str	r0, [r2, #16]
 8005da2:	6153      	str	r3, [r2, #20]
 8005da4:	e72e      	b.n	8005c04 <__kernel_rem_pio2+0x4d4>
 8005da6:	bf00      	nop
 8005da8:	41700000 	.word	0x41700000
 8005dac:	3e700000 	.word	0x3e700000

08005db0 <__kernel_sin>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	ed2d 8b04 	vpush	{d8-d9}
 8005db8:	eeb0 8a41 	vmov.f32	s16, s2
 8005dbc:	eef0 8a61 	vmov.f32	s17, s3
 8005dc0:	ec55 4b10 	vmov	r4, r5, d0
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005dca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005dce:	9001      	str	r0, [sp, #4]
 8005dd0:	da06      	bge.n	8005de0 <__kernel_sin+0x30>
 8005dd2:	ee10 0a10 	vmov	r0, s0
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	f7fa fea8 	bl	8000b2c <__aeabi_d2iz>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d051      	beq.n	8005e84 <__kernel_sin+0xd4>
 8005de0:	4622      	mov	r2, r4
 8005de2:	462b      	mov	r3, r5
 8005de4:	4620      	mov	r0, r4
 8005de6:	4629      	mov	r1, r5
 8005de8:	f7fa fc06 	bl	80005f8 <__aeabi_dmul>
 8005dec:	4682      	mov	sl, r0
 8005dee:	468b      	mov	fp, r1
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4620      	mov	r0, r4
 8005df6:	4629      	mov	r1, r5
 8005df8:	f7fa fbfe 	bl	80005f8 <__aeabi_dmul>
 8005dfc:	a341      	add	r3, pc, #260	; (adr r3, 8005f04 <__kernel_sin+0x154>)
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	4680      	mov	r8, r0
 8005e04:	4689      	mov	r9, r1
 8005e06:	4650      	mov	r0, sl
 8005e08:	4659      	mov	r1, fp
 8005e0a:	f7fa fbf5 	bl	80005f8 <__aeabi_dmul>
 8005e0e:	a33f      	add	r3, pc, #252	; (adr r3, 8005f0c <__kernel_sin+0x15c>)
 8005e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e14:	f7fa fa38 	bl	8000288 <__aeabi_dsub>
 8005e18:	4652      	mov	r2, sl
 8005e1a:	465b      	mov	r3, fp
 8005e1c:	f7fa fbec 	bl	80005f8 <__aeabi_dmul>
 8005e20:	a33c      	add	r3, pc, #240	; (adr r3, 8005f14 <__kernel_sin+0x164>)
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	f7fa fa31 	bl	800028c <__adddf3>
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	465b      	mov	r3, fp
 8005e2e:	f7fa fbe3 	bl	80005f8 <__aeabi_dmul>
 8005e32:	a33a      	add	r3, pc, #232	; (adr r3, 8005f1c <__kernel_sin+0x16c>)
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f7fa fa26 	bl	8000288 <__aeabi_dsub>
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	465b      	mov	r3, fp
 8005e40:	f7fa fbda 	bl	80005f8 <__aeabi_dmul>
 8005e44:	a337      	add	r3, pc, #220	; (adr r3, 8005f24 <__kernel_sin+0x174>)
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f7fa fa1f 	bl	800028c <__adddf3>
 8005e4e:	9b01      	ldr	r3, [sp, #4]
 8005e50:	4606      	mov	r6, r0
 8005e52:	460f      	mov	r7, r1
 8005e54:	b9eb      	cbnz	r3, 8005e92 <__kernel_sin+0xe2>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	f7fa fbcb 	bl	80005f8 <__aeabi_dmul>
 8005e62:	a325      	add	r3, pc, #148	; (adr r3, 8005ef8 <__kernel_sin+0x148>)
 8005e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e68:	f7fa fa0e 	bl	8000288 <__aeabi_dsub>
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	464b      	mov	r3, r9
 8005e70:	f7fa fbc2 	bl	80005f8 <__aeabi_dmul>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4620      	mov	r0, r4
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	f7fa fa06 	bl	800028c <__adddf3>
 8005e80:	4604      	mov	r4, r0
 8005e82:	460d      	mov	r5, r1
 8005e84:	ec45 4b10 	vmov	d0, r4, r5
 8005e88:	b003      	add	sp, #12
 8005e8a:	ecbd 8b04 	vpop	{d8-d9}
 8005e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e92:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <__kernel_sin+0x150>)
 8005e94:	ec51 0b18 	vmov	r0, r1, d8
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f7fa fbad 	bl	80005f8 <__aeabi_dmul>
 8005e9e:	4632      	mov	r2, r6
 8005ea0:	ec41 0b19 	vmov	d9, r0, r1
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	4640      	mov	r0, r8
 8005ea8:	4649      	mov	r1, r9
 8005eaa:	f7fa fba5 	bl	80005f8 <__aeabi_dmul>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	ec51 0b19 	vmov	r0, r1, d9
 8005eb6:	f7fa f9e7 	bl	8000288 <__aeabi_dsub>
 8005eba:	4652      	mov	r2, sl
 8005ebc:	465b      	mov	r3, fp
 8005ebe:	f7fa fb9b 	bl	80005f8 <__aeabi_dmul>
 8005ec2:	ec53 2b18 	vmov	r2, r3, d8
 8005ec6:	f7fa f9df 	bl	8000288 <__aeabi_dsub>
 8005eca:	a30b      	add	r3, pc, #44	; (adr r3, 8005ef8 <__kernel_sin+0x148>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	460f      	mov	r7, r1
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	f7fa fb8e 	bl	80005f8 <__aeabi_dmul>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa f9d2 	bl	800028c <__adddf3>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4620      	mov	r0, r4
 8005eee:	4629      	mov	r1, r5
 8005ef0:	f7fa f9ca 	bl	8000288 <__aeabi_dsub>
 8005ef4:	e7c4      	b.n	8005e80 <__kernel_sin+0xd0>
 8005ef6:	bf00      	nop
 8005ef8:	55555549 	.word	0x55555549
 8005efc:	3fc55555 	.word	0x3fc55555
 8005f00:	3fe00000 	.word	0x3fe00000
 8005f04:	5acfd57c 	.word	0x5acfd57c
 8005f08:	3de5d93a 	.word	0x3de5d93a
 8005f0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8005f10:	3e5ae5e6 	.word	0x3e5ae5e6
 8005f14:	57b1fe7d 	.word	0x57b1fe7d
 8005f18:	3ec71de3 	.word	0x3ec71de3
 8005f1c:	19c161d5 	.word	0x19c161d5
 8005f20:	3f2a01a0 	.word	0x3f2a01a0
 8005f24:	1110f8a6 	.word	0x1110f8a6
 8005f28:	3f811111 	.word	0x3f811111

08005f2c <fabs>:
 8005f2c:	ec51 0b10 	vmov	r0, r1, d0
 8005f30:	ee10 2a10 	vmov	r2, s0
 8005f34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f38:	ec43 2b10 	vmov	d0, r2, r3
 8005f3c:	4770      	bx	lr
	...

08005f40 <floor>:
 8005f40:	ec51 0b10 	vmov	r0, r1, d0
 8005f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005f4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005f50:	2e13      	cmp	r6, #19
 8005f52:	ee10 5a10 	vmov	r5, s0
 8005f56:	ee10 8a10 	vmov	r8, s0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	dc32      	bgt.n	8005fc4 <floor+0x84>
 8005f5e:	2e00      	cmp	r6, #0
 8005f60:	da14      	bge.n	8005f8c <floor+0x4c>
 8005f62:	a333      	add	r3, pc, #204	; (adr r3, 8006030 <floor+0xf0>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f7fa f990 	bl	800028c <__adddf3>
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2300      	movs	r3, #0
 8005f70:	f7fa fdd2 	bl	8000b18 <__aeabi_dcmpgt>
 8005f74:	b138      	cbz	r0, 8005f86 <floor+0x46>
 8005f76:	2c00      	cmp	r4, #0
 8005f78:	da57      	bge.n	800602a <floor+0xea>
 8005f7a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005f7e:	431d      	orrs	r5, r3
 8005f80:	d001      	beq.n	8005f86 <floor+0x46>
 8005f82:	4c2d      	ldr	r4, [pc, #180]	; (8006038 <floor+0xf8>)
 8005f84:	2500      	movs	r5, #0
 8005f86:	4621      	mov	r1, r4
 8005f88:	4628      	mov	r0, r5
 8005f8a:	e025      	b.n	8005fd8 <floor+0x98>
 8005f8c:	4f2b      	ldr	r7, [pc, #172]	; (800603c <floor+0xfc>)
 8005f8e:	4137      	asrs	r7, r6
 8005f90:	ea01 0307 	and.w	r3, r1, r7
 8005f94:	4303      	orrs	r3, r0
 8005f96:	d01f      	beq.n	8005fd8 <floor+0x98>
 8005f98:	a325      	add	r3, pc, #148	; (adr r3, 8006030 <floor+0xf0>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa f975 	bl	800028c <__adddf3>
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f7fa fdb7 	bl	8000b18 <__aeabi_dcmpgt>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d0eb      	beq.n	8005f86 <floor+0x46>
 8005fae:	2c00      	cmp	r4, #0
 8005fb0:	bfbe      	ittt	lt
 8005fb2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005fb6:	fa43 f606 	asrlt.w	r6, r3, r6
 8005fba:	19a4      	addlt	r4, r4, r6
 8005fbc:	ea24 0407 	bic.w	r4, r4, r7
 8005fc0:	2500      	movs	r5, #0
 8005fc2:	e7e0      	b.n	8005f86 <floor+0x46>
 8005fc4:	2e33      	cmp	r6, #51	; 0x33
 8005fc6:	dd0b      	ble.n	8005fe0 <floor+0xa0>
 8005fc8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005fcc:	d104      	bne.n	8005fd8 <floor+0x98>
 8005fce:	ee10 2a10 	vmov	r2, s0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	f7fa f95a 	bl	800028c <__adddf3>
 8005fd8:	ec41 0b10 	vmov	d0, r0, r1
 8005fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fe0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fe8:	fa23 f707 	lsr.w	r7, r3, r7
 8005fec:	4207      	tst	r7, r0
 8005fee:	d0f3      	beq.n	8005fd8 <floor+0x98>
 8005ff0:	a30f      	add	r3, pc, #60	; (adr r3, 8006030 <floor+0xf0>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	f7fa f949 	bl	800028c <__adddf3>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f7fa fd8b 	bl	8000b18 <__aeabi_dcmpgt>
 8006002:	2800      	cmp	r0, #0
 8006004:	d0bf      	beq.n	8005f86 <floor+0x46>
 8006006:	2c00      	cmp	r4, #0
 8006008:	da02      	bge.n	8006010 <floor+0xd0>
 800600a:	2e14      	cmp	r6, #20
 800600c:	d103      	bne.n	8006016 <floor+0xd6>
 800600e:	3401      	adds	r4, #1
 8006010:	ea25 0507 	bic.w	r5, r5, r7
 8006014:	e7b7      	b.n	8005f86 <floor+0x46>
 8006016:	2301      	movs	r3, #1
 8006018:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800601c:	fa03 f606 	lsl.w	r6, r3, r6
 8006020:	4435      	add	r5, r6
 8006022:	4545      	cmp	r5, r8
 8006024:	bf38      	it	cc
 8006026:	18e4      	addcc	r4, r4, r3
 8006028:	e7f2      	b.n	8006010 <floor+0xd0>
 800602a:	2500      	movs	r5, #0
 800602c:	462c      	mov	r4, r5
 800602e:	e7aa      	b.n	8005f86 <floor+0x46>
 8006030:	8800759c 	.word	0x8800759c
 8006034:	7e37e43c 	.word	0x7e37e43c
 8006038:	bff00000 	.word	0xbff00000
 800603c:	000fffff 	.word	0x000fffff

08006040 <scalbn>:
 8006040:	b570      	push	{r4, r5, r6, lr}
 8006042:	ec55 4b10 	vmov	r4, r5, d0
 8006046:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800604a:	4606      	mov	r6, r0
 800604c:	462b      	mov	r3, r5
 800604e:	b99a      	cbnz	r2, 8006078 <scalbn+0x38>
 8006050:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006054:	4323      	orrs	r3, r4
 8006056:	d036      	beq.n	80060c6 <scalbn+0x86>
 8006058:	4b39      	ldr	r3, [pc, #228]	; (8006140 <scalbn+0x100>)
 800605a:	4629      	mov	r1, r5
 800605c:	ee10 0a10 	vmov	r0, s0
 8006060:	2200      	movs	r2, #0
 8006062:	f7fa fac9 	bl	80005f8 <__aeabi_dmul>
 8006066:	4b37      	ldr	r3, [pc, #220]	; (8006144 <scalbn+0x104>)
 8006068:	429e      	cmp	r6, r3
 800606a:	4604      	mov	r4, r0
 800606c:	460d      	mov	r5, r1
 800606e:	da10      	bge.n	8006092 <scalbn+0x52>
 8006070:	a32b      	add	r3, pc, #172	; (adr r3, 8006120 <scalbn+0xe0>)
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	e03a      	b.n	80060ee <scalbn+0xae>
 8006078:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800607c:	428a      	cmp	r2, r1
 800607e:	d10c      	bne.n	800609a <scalbn+0x5a>
 8006080:	ee10 2a10 	vmov	r2, s0
 8006084:	4620      	mov	r0, r4
 8006086:	4629      	mov	r1, r5
 8006088:	f7fa f900 	bl	800028c <__adddf3>
 800608c:	4604      	mov	r4, r0
 800608e:	460d      	mov	r5, r1
 8006090:	e019      	b.n	80060c6 <scalbn+0x86>
 8006092:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006096:	460b      	mov	r3, r1
 8006098:	3a36      	subs	r2, #54	; 0x36
 800609a:	4432      	add	r2, r6
 800609c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80060a0:	428a      	cmp	r2, r1
 80060a2:	dd08      	ble.n	80060b6 <scalbn+0x76>
 80060a4:	2d00      	cmp	r5, #0
 80060a6:	a120      	add	r1, pc, #128	; (adr r1, 8006128 <scalbn+0xe8>)
 80060a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060ac:	da1c      	bge.n	80060e8 <scalbn+0xa8>
 80060ae:	a120      	add	r1, pc, #128	; (adr r1, 8006130 <scalbn+0xf0>)
 80060b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060b4:	e018      	b.n	80060e8 <scalbn+0xa8>
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	dd08      	ble.n	80060cc <scalbn+0x8c>
 80060ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80060be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80060c6:	ec45 4b10 	vmov	d0, r4, r5
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80060d0:	da19      	bge.n	8006106 <scalbn+0xc6>
 80060d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80060d6:	429e      	cmp	r6, r3
 80060d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80060dc:	dd0a      	ble.n	80060f4 <scalbn+0xb4>
 80060de:	a112      	add	r1, pc, #72	; (adr r1, 8006128 <scalbn+0xe8>)
 80060e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e2      	bne.n	80060ae <scalbn+0x6e>
 80060e8:	a30f      	add	r3, pc, #60	; (adr r3, 8006128 <scalbn+0xe8>)
 80060ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ee:	f7fa fa83 	bl	80005f8 <__aeabi_dmul>
 80060f2:	e7cb      	b.n	800608c <scalbn+0x4c>
 80060f4:	a10a      	add	r1, pc, #40	; (adr r1, 8006120 <scalbn+0xe0>)
 80060f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d0b8      	beq.n	8006070 <scalbn+0x30>
 80060fe:	a10e      	add	r1, pc, #56	; (adr r1, 8006138 <scalbn+0xf8>)
 8006100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006104:	e7b4      	b.n	8006070 <scalbn+0x30>
 8006106:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800610a:	3236      	adds	r2, #54	; 0x36
 800610c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006110:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006114:	4620      	mov	r0, r4
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <scalbn+0x108>)
 8006118:	2200      	movs	r2, #0
 800611a:	e7e8      	b.n	80060ee <scalbn+0xae>
 800611c:	f3af 8000 	nop.w
 8006120:	c2f8f359 	.word	0xc2f8f359
 8006124:	01a56e1f 	.word	0x01a56e1f
 8006128:	8800759c 	.word	0x8800759c
 800612c:	7e37e43c 	.word	0x7e37e43c
 8006130:	8800759c 	.word	0x8800759c
 8006134:	fe37e43c 	.word	0xfe37e43c
 8006138:	c2f8f359 	.word	0xc2f8f359
 800613c:	81a56e1f 	.word	0x81a56e1f
 8006140:	43500000 	.word	0x43500000
 8006144:	ffff3cb0 	.word	0xffff3cb0
 8006148:	3c900000 	.word	0x3c900000

0800614c <_init>:
 800614c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614e:	bf00      	nop
 8006150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006152:	bc08      	pop	{r3}
 8006154:	469e      	mov	lr, r3
 8006156:	4770      	bx	lr

08006158 <_fini>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	bf00      	nop
 800615c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800615e:	bc08      	pop	{r3}
 8006160:	469e      	mov	lr, r3
 8006162:	4770      	bx	lr
